
main_bot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045e8  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080047ac  080047ac  000057ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047c4  080047c4  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  080047c4  080047c4  000057c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047cc  080047cc  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047cc  080047cc  000057cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080047d0  080047d0  000057d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080047d4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000000c  080047e0  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  080047e0  00006208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7e5  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9b  00000000  00000000  00014821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000166c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a96  00000000  00000000  00017438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215c2  00000000  00000000  00017ece  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f49f  00000000  00000000  00039490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf9c2  00000000  00000000  0004892f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001182f1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003990  00000000  00000000  00118334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011bcc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004794 	.word	0x08004794

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08004794 	.word	0x08004794

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <exponent>:

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
int exponent(int i){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	int d = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
	for(int j = 3; j >= (i-5) * 2; j--){
 8000500:	2303      	movs	r3, #3
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	e005      	b.n	8000512 <exponent+0x1e>
		d *= 16;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	60fb      	str	r3, [r7, #12]
	for(int j = 3; j >= (i-5) * 2; j--){
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	3b01      	subs	r3, #1
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3b05      	subs	r3, #5
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	429a      	cmp	r2, r3
 800051c:	daf3      	bge.n	8000506 <exponent+0x12>
	}
	return d;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <CAN_MESSAGE_CONVERSION>:
int CAN_MESSAGE_CONVERSION(uint8_t RxData[8]){
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	 int d;
	 int x = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
	 for(int i = 7; i >= 5; i--){
 8000538:	2307      	movs	r3, #7
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	e011      	b.n	8000562 <CAN_MESSAGE_CONVERSION+0x36>
		 d = exponent(i);
 800053e:	6938      	ldr	r0, [r7, #16]
 8000540:	f7ff ffd8 	bl	80004f4 <exponent>
 8000544:	60f8      	str	r0, [r7, #12]
		 x += RxData[i] * d;
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	4413      	add	r3, r2
 800055a:	617b      	str	r3, [r7, #20]
	 for(int i = 7; i >= 5; i--){
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	3b01      	subs	r3, #1
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b04      	cmp	r3, #4
 8000566:	dcea      	bgt.n	800053e <CAN_MESSAGE_CONVERSION+0x12>
	  }
	 return x;
 8000568:	697b      	ldr	r3, [r7, #20]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <HAL_CAN_RxFifo0MsgPendingCallback>:
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000580:	2100      	movs	r1, #0
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f001 fb2c 	bl	8001be0 <HAL_CAN_GetRxMessage>
//	if(RxHeader.ExtId == 23){
//		datacheck = 1;
//	}
	datacheck = 1;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800058a:	2201      	movs	r2, #1
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200001f4 	.word	0x200001f4
 800059c:	200001d0 	.word	0x200001d0
 80005a0:	20000200 	.word	0x20000200

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 ffb7 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f9d9 	bl	8000964 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 fcef 	bl	8000f94 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005b6:	f000 fcc3 	bl	8000f40 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80005ba:	f000 fa3f 	bl	8000a3c <MX_CAN1_Init>
  MX_TIM1_Init();
 80005be:	f000 fa8f 	bl	8000ae0 <MX_TIM1_Init>
  MX_TIM2_Init();
 80005c2:	f000 fb39 	bl	8000c38 <MX_TIM2_Init>
  MX_TIM3_Init();
 80005c6:	f000 fbc3 	bl	8000d50 <MX_TIM3_Init>
  MX_TIM4_Init();
 80005ca:	f000 fc43 	bl	8000e54 <MX_TIM4_Init>
  //  pwmData[9] = 100;
  //
  //  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwmData, 10);

    // can messages
    HAL_CAN_Start(&hcan1);
 80005ce:	4886      	ldr	r0, [pc, #536]	@ (80007e8 <main+0x244>)
 80005d0:	f001 f9f2 	bl	80019b8 <HAL_CAN_Start>

    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005d4:	2102      	movs	r1, #2
 80005d6:	4884      	ldr	r0, [pc, #528]	@ (80007e8 <main+0x244>)
 80005d8:	f001 fc24 	bl	8001e24 <HAL_CAN_ActivateNotification>

    TxHeader.DLC = 8;
 80005dc:	4b83      	ldr	r3, [pc, #524]	@ (80007ec <main+0x248>)
 80005de:	2208      	movs	r2, #8
 80005e0:	611a      	str	r2, [r3, #16]
    TxHeader.IDE = CAN_ID_EXT;
 80005e2:	4b82      	ldr	r3, [pc, #520]	@ (80007ec <main+0x248>)
 80005e4:	2204      	movs	r2, #4
 80005e6:	609a      	str	r2, [r3, #8]
    TxHeader.RTR = CAN_RTR_DATA;
 80005e8:	4b80      	ldr	r3, [pc, #512]	@ (80007ec <main+0x248>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	60da      	str	r2, [r3, #12]
    TxHeader.ExtId = 400;
 80005ee:	4b7f      	ldr	r3, [pc, #508]	@ (80007ec <main+0x248>)
 80005f0:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80005f4:	605a      	str	r2, [r3, #4]

    TIM1->CCR1 = 0;
 80005f6:	4b7e      	ldr	r3, [pc, #504]	@ (80007f0 <main+0x24c>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM1->CCR2 = 0;
 80005fc:	4b7c      	ldr	r3, [pc, #496]	@ (80007f0 <main+0x24c>)
 80005fe:	2200      	movs	r2, #0
 8000600:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR1 = 1000;
 8000602:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800060a:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2->CCR2 = 1000;//TODOS
 800060c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000610:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000614:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM2->CCR3 = 0;
 8000616:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800061a:	2200      	movs	r2, #0
 800061c:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM3->CCR1 = 1000;
 800061e:	4b75      	ldr	r3, [pc, #468]	@ (80007f4 <main+0x250>)
 8000620:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000624:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3->CCR2 = 0;
 8000626:	4b73      	ldr	r3, [pc, #460]	@ (80007f4 <main+0x250>)
 8000628:	2200      	movs	r2, #0
 800062a:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM4->CCR1 = 0;
 800062c:	4b72      	ldr	r3, [pc, #456]	@ (80007f8 <main+0x254>)
 800062e:	2200      	movs	r2, #0
 8000630:	635a      	str	r2, [r3, #52]	@ 0x34
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000632:	2100      	movs	r1, #0
 8000634:	4871      	ldr	r0, [pc, #452]	@ (80007fc <main+0x258>)
 8000636:	f002 ff81 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800063a:	2104      	movs	r1, #4
 800063c:	486f      	ldr	r0, [pc, #444]	@ (80007fc <main+0x258>)
 800063e:	f002 ff7d 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000642:	2100      	movs	r1, #0
 8000644:	486e      	ldr	r0, [pc, #440]	@ (8000800 <main+0x25c>)
 8000646:	f002 ff79 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); //TODOS
 800064a:	2104      	movs	r1, #4
 800064c:	486c      	ldr	r0, [pc, #432]	@ (8000800 <main+0x25c>)
 800064e:	f002 ff75 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000652:	2108      	movs	r1, #8
 8000654:	486a      	ldr	r0, [pc, #424]	@ (8000800 <main+0x25c>)
 8000656:	f002 ff71 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800065a:	2100      	movs	r1, #0
 800065c:	4869      	ldr	r0, [pc, #420]	@ (8000804 <main+0x260>)
 800065e:	f002 ff6d 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000662:	2104      	movs	r1, #4
 8000664:	4867      	ldr	r0, [pc, #412]	@ (8000804 <main+0x260>)
 8000666:	f002 ff69 	bl	800353c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800066a:	2100      	movs	r1, #0
 800066c:	4866      	ldr	r0, [pc, #408]	@ (8000808 <main+0x264>)
 800066e:	f002 ff65 	bl	800353c <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int x = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	603b      	str	r3, [r7, #0]
	  if (datacheck){
 8000676:	4b65      	ldr	r3, [pc, #404]	@ (800080c <main+0x268>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d0f9      	beq.n	8000672 <main+0xce>
		  if(RxHeader.ExtId == 15 || RxHeader.ExtId == 16 || RxHeader.ExtId == 17 || RxHeader.ExtId == 18)
 800067e:	4b64      	ldr	r3, [pc, #400]	@ (8000810 <main+0x26c>)
 8000680:	685b      	ldr	r3, [r3, #4]
 8000682:	2b0f      	cmp	r3, #15
 8000684:	d00b      	beq.n	800069e <main+0xfa>
 8000686:	4b62      	ldr	r3, [pc, #392]	@ (8000810 <main+0x26c>)
 8000688:	685b      	ldr	r3, [r3, #4]
 800068a:	2b10      	cmp	r3, #16
 800068c:	d007      	beq.n	800069e <main+0xfa>
 800068e:	4b60      	ldr	r3, [pc, #384]	@ (8000810 <main+0x26c>)
 8000690:	685b      	ldr	r3, [r3, #4]
 8000692:	2b11      	cmp	r3, #17
 8000694:	d003      	beq.n	800069e <main+0xfa>
 8000696:	4b5e      	ldr	r3, [pc, #376]	@ (8000810 <main+0x26c>)
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	2b12      	cmp	r3, #18
 800069c:	d119      	bne.n	80006d2 <main+0x12e>
		  {
			  TxHeader.ExtId = RxHeader.ExtId;
 800069e:	4b5c      	ldr	r3, [pc, #368]	@ (8000810 <main+0x26c>)
 80006a0:	685b      	ldr	r3, [r3, #4]
 80006a2:	4a52      	ldr	r2, [pc, #328]	@ (80007ec <main+0x248>)
 80006a4:	6053      	str	r3, [r2, #4]
			  for(int i = 0; i < 4; i++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	617b      	str	r3, [r7, #20]
 80006aa:	e00b      	b.n	80006c4 <main+0x120>
				  TxData[i] = RxData[i];
 80006ac:	4a59      	ldr	r2, [pc, #356]	@ (8000814 <main+0x270>)
 80006ae:	697b      	ldr	r3, [r7, #20]
 80006b0:	4413      	add	r3, r2
 80006b2:	7819      	ldrb	r1, [r3, #0]
 80006b4:	4a58      	ldr	r2, [pc, #352]	@ (8000818 <main+0x274>)
 80006b6:	697b      	ldr	r3, [r7, #20]
 80006b8:	4413      	add	r3, r2
 80006ba:	460a      	mov	r2, r1
 80006bc:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 4; i++){
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	3301      	adds	r3, #1
 80006c2:	617b      	str	r3, [r7, #20]
 80006c4:	697b      	ldr	r3, [r7, #20]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	ddf0      	ble.n	80006ac <main+0x108>
			  }
			  // HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
			  datacheck = 0;
 80006ca:	4b50      	ldr	r3, [pc, #320]	@ (800080c <main+0x268>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	e12a      	b.n	8000928 <main+0x384>
		  }
		  // conveyer
		  else if(RxHeader.ExtId == 19)
 80006d2:	4b4f      	ldr	r3, [pc, #316]	@ (8000810 <main+0x26c>)
 80006d4:	685b      	ldr	r3, [r3, #4]
 80006d6:	2b13      	cmp	r3, #19
 80006d8:	d12b      	bne.n	8000732 <main+0x18e>
		  {
			  TxHeader.ExtId = 400;
 80006da:	4b44      	ldr	r3, [pc, #272]	@ (80007ec <main+0x248>)
 80006dc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80006e0:	605a      	str	r2, [r3, #4]
			  for(int i = 0; i < 8; i++){
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	e00b      	b.n	8000700 <main+0x15c>
				  TxData[i] = RxData[i];
 80006e8:	4a4a      	ldr	r2, [pc, #296]	@ (8000814 <main+0x270>)
 80006ea:	693b      	ldr	r3, [r7, #16]
 80006ec:	4413      	add	r3, r2
 80006ee:	7819      	ldrb	r1, [r3, #0]
 80006f0:	4a49      	ldr	r2, [pc, #292]	@ (8000818 <main+0x274>)
 80006f2:	693b      	ldr	r3, [r7, #16]
 80006f4:	4413      	add	r3, r2
 80006f6:	460a      	mov	r2, r1
 80006f8:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 8; i++){
 80006fa:	693b      	ldr	r3, [r7, #16]
 80006fc:	3301      	adds	r3, #1
 80006fe:	613b      	str	r3, [r7, #16]
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	2b07      	cmp	r3, #7
 8000704:	ddf0      	ble.n	80006e8 <main+0x144>
			  }
			  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000706:	4b45      	ldr	r3, [pc, #276]	@ (800081c <main+0x278>)
 8000708:	4a43      	ldr	r2, [pc, #268]	@ (8000818 <main+0x274>)
 800070a:	4938      	ldr	r1, [pc, #224]	@ (80007ec <main+0x248>)
 800070c:	4836      	ldr	r0, [pc, #216]	@ (80007e8 <main+0x244>)
 800070e:	f001 f997 	bl	8001a40 <HAL_CAN_AddTxMessage>


			  x = CAN_MESSAGE_CONVERSION(RxData);
 8000712:	4840      	ldr	r0, [pc, #256]	@ (8000814 <main+0x270>)
 8000714:	f7ff ff0a 	bl	800052c <CAN_MESSAGE_CONVERSION>
 8000718:	6038      	str	r0, [r7, #0]


			  TIM1->ARR = 1000;
 800071a:	4b35      	ldr	r3, [pc, #212]	@ (80007f0 <main+0x24c>)
 800071c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000720:	62da      	str	r2, [r3, #44]	@ 0x2c
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, x);
 8000722:	4b36      	ldr	r3, [pc, #216]	@ (80007fc <main+0x258>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	683a      	ldr	r2, [r7, #0]
 8000728:	635a      	str	r2, [r3, #52]	@ 0x34
			  datacheck = 0;
 800072a:	4b38      	ldr	r3, [pc, #224]	@ (800080c <main+0x268>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	e79f      	b.n	8000672 <main+0xce>
		  }
		  // Arm
		  else if(RxHeader.ExtId == 21)
 8000732:	4b37      	ldr	r3, [pc, #220]	@ (8000810 <main+0x26c>)
 8000734:	685b      	ldr	r3, [r3, #4]
 8000736:	2b15      	cmp	r3, #21
 8000738:	d14a      	bne.n	80007d0 <main+0x22c>
		  {
			  TxHeader.ExtId = 400;
 800073a:	4b2c      	ldr	r3, [pc, #176]	@ (80007ec <main+0x248>)
 800073c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000740:	605a      	str	r2, [r3, #4]
			  for(int i = 0; i < 8; i++){
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
 8000746:	e00b      	b.n	8000760 <main+0x1bc>
				  TxData[i] = RxData[i];
 8000748:	4a32      	ldr	r2, [pc, #200]	@ (8000814 <main+0x270>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	4413      	add	r3, r2
 800074e:	7819      	ldrb	r1, [r3, #0]
 8000750:	4a31      	ldr	r2, [pc, #196]	@ (8000818 <main+0x274>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	4413      	add	r3, r2
 8000756:	460a      	mov	r2, r1
 8000758:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 8; i++){
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	3301      	adds	r3, #1
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b07      	cmp	r3, #7
 8000764:	ddf0      	ble.n	8000748 <main+0x1a4>
			  }
			  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <main+0x278>)
 8000768:	4a2b      	ldr	r2, [pc, #172]	@ (8000818 <main+0x274>)
 800076a:	4920      	ldr	r1, [pc, #128]	@ (80007ec <main+0x248>)
 800076c:	481e      	ldr	r0, [pc, #120]	@ (80007e8 <main+0x244>)
 800076e:	f001 f967 	bl	8001a40 <HAL_CAN_AddTxMessage>


			  x = CAN_MESSAGE_CONVERSION(RxData);
 8000772:	4828      	ldr	r0, [pc, #160]	@ (8000814 <main+0x270>)
 8000774:	f7ff feda 	bl	800052c <CAN_MESSAGE_CONVERSION>
 8000778:	6038      	str	r0, [r7, #0]

			  TIM2->ARR = 1000;
 800077a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800077e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000782:	62da      	str	r2, [r3, #44]	@ 0x2c
			  // retract
			  if(x == 50){
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2b32      	cmp	r3, #50	@ 0x32
 8000788:	d109      	bne.n	800079e <main+0x1fa>
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 1000);
 800078a:	4b1d      	ldr	r3, [pc, #116]	@ (8000800 <main+0x25c>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000792:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 8000794:	4b1a      	ldr	r3, [pc, #104]	@ (8000800 <main+0x25c>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	2200      	movs	r2, #0
 800079a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800079c:	e014      	b.n	80007c8 <main+0x224>
			  }
			  // extend
			  else if(x == 150){
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	2b96      	cmp	r3, #150	@ 0x96
 80007a2:	d109      	bne.n	80007b8 <main+0x214>
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007a4:	4b16      	ldr	r3, [pc, #88]	@ (8000800 <main+0x25c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	2200      	movs	r2, #0
 80007aa:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 1000);
 80007ac:	4b14      	ldr	r3, [pc, #80]	@ (8000800 <main+0x25c>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007b4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80007b6:	e007      	b.n	80007c8 <main+0x224>
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 80007b8:	4b11      	ldr	r3, [pc, #68]	@ (8000800 <main+0x25c>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2200      	movs	r2, #0
 80007be:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);
 80007c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000800 <main+0x25c>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	2200      	movs	r2, #0
 80007c6:	63da      	str	r2, [r3, #60]	@ 0x3c
			  }


			  datacheck = 0;
 80007c8:	4b10      	ldr	r3, [pc, #64]	@ (800080c <main+0x268>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	e750      	b.n	8000672 <main+0xce>
		  }
		  // digger
		  else if(RxHeader.ExtId == 23)
 80007d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000810 <main+0x26c>)
 80007d2:	685b      	ldr	r3, [r3, #4]
 80007d4:	2b17      	cmp	r3, #23
 80007d6:	d16c      	bne.n	80008b2 <main+0x30e>
		  {
			  TxHeader.ExtId = 400;
 80007d8:	4b04      	ldr	r3, [pc, #16]	@ (80007ec <main+0x248>)
 80007da:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80007de:	605a      	str	r2, [r3, #4]
			  for(int i = 0; i < 8; i++){
 80007e0:	2300      	movs	r3, #0
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	e028      	b.n	8000838 <main+0x294>
 80007e6:	bf00      	nop
 80007e8:	20000028 	.word	0x20000028
 80007ec:	200001b8 	.word	0x200001b8
 80007f0:	40010000 	.word	0x40010000
 80007f4:	40000400 	.word	0x40000400
 80007f8:	40000800 	.word	0x40000800
 80007fc:	20000050 	.word	0x20000050
 8000800:	20000098 	.word	0x20000098
 8000804:	200000e0 	.word	0x200000e0
 8000808:	20000128 	.word	0x20000128
 800080c:	20000200 	.word	0x20000200
 8000810:	200001d0 	.word	0x200001d0
 8000814:	200001f4 	.word	0x200001f4
 8000818:	200001ec 	.word	0x200001ec
 800081c:	200001fc 	.word	0x200001fc
				  TxData[i] = RxData[i];
 8000820:	4a42      	ldr	r2, [pc, #264]	@ (800092c <main+0x388>)
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	4413      	add	r3, r2
 8000826:	7819      	ldrb	r1, [r3, #0]
 8000828:	4a41      	ldr	r2, [pc, #260]	@ (8000930 <main+0x38c>)
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	4413      	add	r3, r2
 800082e:	460a      	mov	r2, r1
 8000830:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 8; i++){
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	3301      	adds	r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	2b07      	cmp	r3, #7
 800083c:	ddf0      	ble.n	8000820 <main+0x27c>
			  }
			  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800083e:	4b3d      	ldr	r3, [pc, #244]	@ (8000934 <main+0x390>)
 8000840:	4a3b      	ldr	r2, [pc, #236]	@ (8000930 <main+0x38c>)
 8000842:	493d      	ldr	r1, [pc, #244]	@ (8000938 <main+0x394>)
 8000844:	483d      	ldr	r0, [pc, #244]	@ (800093c <main+0x398>)
 8000846:	f001 f8fb 	bl	8001a40 <HAL_CAN_AddTxMessage>


			  x = CAN_MESSAGE_CONVERSION(RxData);
 800084a:	4838      	ldr	r0, [pc, #224]	@ (800092c <main+0x388>)
 800084c:	f7ff fe6e 	bl	800052c <CAN_MESSAGE_CONVERSION>
 8000850:	6038      	str	r0, [r7, #0]

			  TIM3->ARR = 1000;
 8000852:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <main+0x39c>)
 8000854:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000858:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->ARR = 1000;
 800085a:	4b3a      	ldr	r3, [pc, #232]	@ (8000944 <main+0x3a0>)
 800085c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000860:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM2->ARR = 1000;//TODOS
 8000862:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000866:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800086a:	62da      	str	r2, [r3, #44]	@ 0x2c

			  if(x == 500){
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000872:	d10a      	bne.n	800088a <main+0x2e6>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1000);
 8000874:	4b34      	ldr	r3, [pc, #208]	@ (8000948 <main+0x3a4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800087c:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 1000);//TODOS
 800087e:	4b33      	ldr	r3, [pc, #204]	@ (800094c <main+0x3a8>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000886:	639a      	str	r2, [r3, #56]	@ 0x38
 8000888:	e00b      	b.n	80008a2 <main+0x2fe>
			  }else if(x == 600){
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 8000890:	d107      	bne.n	80008a2 <main+0x2fe>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8000892:	4b2d      	ldr	r3, [pc, #180]	@ (8000948 <main+0x3a4>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2200      	movs	r2, #0
 8000898:	635a      	str	r2, [r3, #52]	@ 0x34
				  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);//TODOS
 800089a:	4b2c      	ldr	r3, [pc, #176]	@ (800094c <main+0x3a8>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2200      	movs	r2, #0
 80008a0:	639a      	str	r2, [r3, #56]	@ 0x38
			  }
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, x);
 80008a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000950 <main+0x3ac>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	683a      	ldr	r2, [r7, #0]
 80008a8:	639a      	str	r2, [r3, #56]	@ 0x38
			  datacheck = 0;
 80008aa:	4b2a      	ldr	r3, [pc, #168]	@ (8000954 <main+0x3b0>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	e6df      	b.n	8000672 <main+0xce>
		  }
		  // servo
		  else if(RxHeader.ExtId == 25)
 80008b2:	4b29      	ldr	r3, [pc, #164]	@ (8000958 <main+0x3b4>)
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	2b19      	cmp	r3, #25
 80008b8:	d133      	bne.n	8000922 <main+0x37e>
		  {
			  TxHeader.ExtId = 400;
 80008ba:	4b1f      	ldr	r3, [pc, #124]	@ (8000938 <main+0x394>)
 80008bc:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80008c0:	605a      	str	r2, [r3, #4]
			  for(int i = 0; i < 8; i++){
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	e00b      	b.n	80008e0 <main+0x33c>
				  TxData[i] = RxData[i];
 80008c8:	4a18      	ldr	r2, [pc, #96]	@ (800092c <main+0x388>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	7819      	ldrb	r1, [r3, #0]
 80008d0:	4a17      	ldr	r2, [pc, #92]	@ (8000930 <main+0x38c>)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	4413      	add	r3, r2
 80008d6:	460a      	mov	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 8; i++){
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	3301      	adds	r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b07      	cmp	r3, #7
 80008e4:	ddf0      	ble.n	80008c8 <main+0x324>
			  }
			  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80008e6:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <main+0x390>)
 80008e8:	4a11      	ldr	r2, [pc, #68]	@ (8000930 <main+0x38c>)
 80008ea:	4913      	ldr	r1, [pc, #76]	@ (8000938 <main+0x394>)
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <main+0x398>)
 80008ee:	f001 f8a7 	bl	8001a40 <HAL_CAN_AddTxMessage>

			  x = CAN_MESSAGE_CONVERSION(RxData);
 80008f2:	480e      	ldr	r0, [pc, #56]	@ (800092c <main+0x388>)
 80008f4:	f7ff fe1a 	bl	800052c <CAN_MESSAGE_CONVERSION>
 80008f8:	6038      	str	r0, [r7, #0]

			  TIM3->ARR = 1000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <main+0x39c>)
 80008fc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000900:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM4->ARR = 1000;
 8000902:	4b16      	ldr	r3, [pc, #88]	@ (800095c <main+0x3b8>)
 8000904:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000908:	62da      	str	r2, [r3, #44]	@ 0x2c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, x);
 800090a:	4b0f      	ldr	r3, [pc, #60]	@ (8000948 <main+0x3a4>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	683a      	ldr	r2, [r7, #0]
 8000910:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, x);
 8000912:	4b13      	ldr	r3, [pc, #76]	@ (8000960 <main+0x3bc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	683a      	ldr	r2, [r7, #0]
 8000918:	635a      	str	r2, [r3, #52]	@ 0x34
			  datacheck = 0;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <main+0x3b0>)
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	e6a7      	b.n	8000672 <main+0xce>
		  }

		  else
		  {
			  datacheck = 0;
 8000922:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <main+0x3b0>)
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
  {
 8000928:	e6a3      	b.n	8000672 <main+0xce>
 800092a:	bf00      	nop
 800092c:	200001f4 	.word	0x200001f4
 8000930:	200001ec 	.word	0x200001ec
 8000934:	200001fc 	.word	0x200001fc
 8000938:	200001b8 	.word	0x200001b8
 800093c:	20000028 	.word	0x20000028
 8000940:	40000400 	.word	0x40000400
 8000944:	40010000 	.word	0x40010000
 8000948:	200000e0 	.word	0x200000e0
 800094c:	20000098 	.word	0x20000098
 8000950:	20000050 	.word	0x20000050
 8000954:	20000200 	.word	0x20000200
 8000958:	200001d0 	.word	0x200001d0
 800095c:	40000800 	.word	0x40000800
 8000960:	20000128 	.word	0x20000128

08000964 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b094      	sub	sp, #80	@ 0x50
 8000968:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	2234      	movs	r2, #52	@ 0x34
 8000970:	2100      	movs	r1, #0
 8000972:	4618      	mov	r0, r3
 8000974:	f003 fee2 	bl	800473c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000978:	f107 0308 	add.w	r3, r7, #8
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	4b29      	ldr	r3, [pc, #164]	@ (8000a34 <SystemClock_Config+0xd0>)
 800098e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000990:	4a28      	ldr	r2, [pc, #160]	@ (8000a34 <SystemClock_Config+0xd0>)
 8000992:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000996:	6413      	str	r3, [r2, #64]	@ 0x40
 8000998:	4b26      	ldr	r3, [pc, #152]	@ (8000a34 <SystemClock_Config+0xd0>)
 800099a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800099c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a0:	607b      	str	r3, [r7, #4]
 80009a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80009a4:	2300      	movs	r3, #0
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	4b23      	ldr	r3, [pc, #140]	@ (8000a38 <SystemClock_Config+0xd4>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b0:	4a21      	ldr	r2, [pc, #132]	@ (8000a38 <SystemClock_Config+0xd4>)
 80009b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009b6:	6013      	str	r3, [r2, #0]
 80009b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000a38 <SystemClock_Config+0xd4>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c0:	603b      	str	r3, [r7, #0]
 80009c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009c4:	2301      	movs	r3, #1
 80009c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009cc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009d2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d8:	2304      	movs	r3, #4
 80009da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 80009dc:	2348      	movs	r3, #72	@ 0x48
 80009de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80009e4:	2302      	movs	r3, #2
 80009e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e8:	2302      	movs	r3, #2
 80009ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ec:	f107 031c 	add.w	r3, r7, #28
 80009f0:	4618      	mov	r0, r3
 80009f2:	f002 fa5d 	bl	8002eb0 <HAL_RCC_OscConfig>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80009fc:	f000 fb24 	bl	8001048 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a00:	230f      	movs	r3, #15
 8000a02:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a04:	2302      	movs	r3, #2
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a0c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a12:	2300      	movs	r3, #0
 8000a14:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a16:	f107 0308 	add.w	r3, r7, #8
 8000a1a:	2102      	movs	r1, #2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f001 fefd 	bl	800281c <HAL_RCC_ClockConfig>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000a28:	f000 fb0e 	bl	8001048 <Error_Handler>
  }
}
 8000a2c:	bf00      	nop
 8000a2e:	3750      	adds	r7, #80	@ 0x50
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	40023800 	.word	0x40023800
 8000a38:	40007000 	.word	0x40007000

08000a3c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b08a      	sub	sp, #40	@ 0x28
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a42:	4b25      	ldr	r3, [pc, #148]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a44:	4a25      	ldr	r2, [pc, #148]	@ (8000adc <MX_CAN1_Init+0xa0>)
 8000a46:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000a48:	4b23      	ldr	r3, [pc, #140]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a4a:	2212      	movs	r2, #18
 8000a4c:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a4e:	4b22      	ldr	r3, [pc, #136]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a54:	4b20      	ldr	r3, [pc, #128]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000a5a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a5c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000a60:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000a62:	4b1d      	ldr	r3, [pc, #116]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a68:	4b1b      	ldr	r3, [pc, #108]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a6e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a74:	4b18      	ldr	r3, [pc, #96]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a7a:	4b17      	ldr	r3, [pc, #92]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a80:	4b15      	ldr	r3, [pc, #84]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a86:	4b14      	ldr	r3, [pc, #80]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000a8c:	4812      	ldr	r0, [pc, #72]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000a8e:	f000 fdb7 	bl	8001600 <HAL_CAN_Init>
 8000a92:	4603      	mov	r3, r0
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d001      	beq.n	8000a9c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000a98:	f000 fad6 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

  canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000a9c:	2301      	movs	r3, #1
 8000a9e:	623b      	str	r3, [r7, #32]
  canfilterconfig.FilterBank = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]
  canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  canfilterconfig.FilterIdHigh = 0;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	603b      	str	r3, [r7, #0]
  canfilterconfig.FilterIdLow = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	607b      	str	r3, [r7, #4]
  canfilterconfig.FilterMaskIdHigh = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60bb      	str	r3, [r7, #8]
  canfilterconfig.FilterMaskIdLow = 0;
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	60fb      	str	r3, [r7, #12]
  canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
  canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000abc:	2301      	movs	r3, #1
 8000abe:	61fb      	str	r3, [r7, #28]
  canfilterconfig.SlaveStartFilterBank = 40;
 8000ac0:	2328      	movs	r3, #40	@ 0x28
 8000ac2:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	4619      	mov	r1, r3
 8000ac8:	4803      	ldr	r0, [pc, #12]	@ (8000ad8 <MX_CAN1_Init+0x9c>)
 8000aca:	f000 fe95 	bl	80017f8 <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000028 	.word	0x20000028
 8000adc:	40006400 	.word	0x40006400

08000ae0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b096      	sub	sp, #88	@ 0x58
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ae6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000aea:	2200      	movs	r2, #0
 8000aec:	601a      	str	r2, [r3, #0]
 8000aee:	605a      	str	r2, [r3, #4]
 8000af0:	609a      	str	r2, [r3, #8]
 8000af2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000af4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000afe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b02:	2200      	movs	r2, #0
 8000b04:	601a      	str	r2, [r3, #0]
 8000b06:	605a      	str	r2, [r3, #4]
 8000b08:	609a      	str	r2, [r3, #8]
 8000b0a:	60da      	str	r2, [r3, #12]
 8000b0c:	611a      	str	r2, [r3, #16]
 8000b0e:	615a      	str	r2, [r3, #20]
 8000b10:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2220      	movs	r2, #32
 8000b16:	2100      	movs	r1, #0
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f003 fe0f 	bl	800473c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b1e:	4b44      	ldr	r3, [pc, #272]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b20:	4a44      	ldr	r2, [pc, #272]	@ (8000c34 <MX_TIM1_Init+0x154>)
 8000b22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000b24:	4b42      	ldr	r3, [pc, #264]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b26:	2247      	movs	r2, #71	@ 0x47
 8000b28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b2a:	4b41      	ldr	r3, [pc, #260]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1500-1;
 8000b30:	4b3f      	ldr	r3, [pc, #252]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b32:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000b36:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b38:	4b3d      	ldr	r3, [pc, #244]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b3e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b44:	4b3a      	ldr	r3, [pc, #232]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b4a:	4839      	ldr	r0, [pc, #228]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b4c:	f002 fc4e 	bl	80033ec <HAL_TIM_Base_Init>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b56:	f000 fa77 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b5e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b60:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b64:	4619      	mov	r1, r3
 8000b66:	4832      	ldr	r0, [pc, #200]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b68:	f002 fe72 	bl	8003850 <HAL_TIM_ConfigClockSource>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000b72:	f000 fa69 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000b76:	482e      	ldr	r0, [pc, #184]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b78:	f002 fc87 	bl	800348a <HAL_TIM_PWM_Init>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000b82:	f000 fa61 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b86:	2300      	movs	r3, #0
 8000b88:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b92:	4619      	mov	r1, r3
 8000b94:	4826      	ldr	r0, [pc, #152]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000b96:	f003 fa3f 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000ba0:	f000 fa52 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba4:	2360      	movs	r3, #96	@ 0x60
 8000ba6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4819      	ldr	r0, [pc, #100]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000bca:	f002 fd7f 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000bd4:	f000 fa38 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bdc:	2204      	movs	r2, #4
 8000bde:	4619      	mov	r1, r3
 8000be0:	4813      	ldr	r0, [pc, #76]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000be2:	f002 fd73 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000bec:	f000 fa2c 	bl	8001048 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c04:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c08:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c0e:	1d3b      	adds	r3, r7, #4
 8000c10:	4619      	mov	r1, r3
 8000c12:	4807      	ldr	r0, [pc, #28]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000c14:	f003 fa7c 	bl	8004110 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 8000c1e:	f000 fa13 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c22:	4803      	ldr	r0, [pc, #12]	@ (8000c30 <MX_TIM1_Init+0x150>)
 8000c24:	f000 faf0 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000c28:	bf00      	nop
 8000c2a:	3758      	adds	r7, #88	@ 0x58
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	20000050 	.word	0x20000050
 8000c34:	40010000 	.word	0x40010000

08000c38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08e      	sub	sp, #56	@ 0x38
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	f107 0320 	add.w	r3, r7, #32
 8000c50:	2200      	movs	r2, #0
 8000c52:	601a      	str	r2, [r3, #0]
 8000c54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
 8000c64:	615a      	str	r2, [r3, #20]
 8000c66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c68:	4b38      	ldr	r3, [pc, #224]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000c70:	4b36      	ldr	r3, [pc, #216]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c72:	2247      	movs	r2, #71	@ 0x47
 8000c74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b35      	ldr	r3, [pc, #212]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500-1;
 8000c7c:	4b33      	ldr	r3, [pc, #204]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c7e:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000c82:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c8a:	4b30      	ldr	r3, [pc, #192]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c90:	482e      	ldr	r0, [pc, #184]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000c92:	f002 fbab 	bl	80033ec <HAL_TIM_Base_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c9c:	f000 f9d4 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000caa:	4619      	mov	r1, r3
 8000cac:	4827      	ldr	r0, [pc, #156]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000cae:	f002 fdcf 	bl	8003850 <HAL_TIM_ConfigClockSource>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d001      	beq.n	8000cbc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cb8:	f000 f9c6 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cbc:	4823      	ldr	r0, [pc, #140]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000cbe:	f002 fbe4 	bl	800348a <HAL_TIM_PWM_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cc8:	f000 f9be 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cd4:	f107 0320 	add.w	r3, r7, #32
 8000cd8:	4619      	mov	r1, r3
 8000cda:	481c      	ldr	r0, [pc, #112]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000cdc:	f003 f99c 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000ce6:	f000 f9af 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cea:	2360      	movs	r3, #96	@ 0x60
 8000cec:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cfa:	1d3b      	adds	r3, r7, #4
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000d02:	f002 fce3 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d0c:	f000 f99c 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	2204      	movs	r2, #4
 8000d14:	4619      	mov	r1, r3
 8000d16:	480d      	ldr	r0, [pc, #52]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000d18:	f002 fcd8 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_TIM2_Init+0xee>
	{
	  Error_Handler();
 8000d22:	f000 f991 	bl	8001048 <Error_Handler>
	}
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d26:	1d3b      	adds	r3, r7, #4
 8000d28:	2208      	movs	r2, #8
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	4807      	ldr	r0, [pc, #28]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000d2e:	f002 fccd 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x104>
  {
    Error_Handler();
 8000d38:	f000 f986 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d3c:	4803      	ldr	r0, [pc, #12]	@ (8000d4c <MX_TIM2_Init+0x114>)
 8000d3e:	f000 fa63 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000d42:	bf00      	nop
 8000d44:	3738      	adds	r7, #56	@ 0x38
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	20000098 	.word	0x20000098

08000d50 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08e      	sub	sp, #56	@ 0x38
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d56:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	2200      	movs	r2, #0
 8000d6a:	601a      	str	r2, [r3, #0]
 8000d6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d6e:	1d3b      	adds	r3, r7, #4
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
 8000d7a:	611a      	str	r2, [r3, #16]
 8000d7c:	615a      	str	r2, [r3, #20]
 8000d7e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d80:	4b32      	ldr	r3, [pc, #200]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000d82:	4a33      	ldr	r2, [pc, #204]	@ (8000e50 <MX_TIM3_Init+0x100>)
 8000d84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000d86:	4b31      	ldr	r3, [pc, #196]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000d88:	2247      	movs	r2, #71	@ 0x47
 8000d8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d8c:	4b2f      	ldr	r3, [pc, #188]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1500-1;
 8000d92:	4b2e      	ldr	r3, [pc, #184]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000d94:	f240 52db 	movw	r2, #1499	@ 0x5db
 8000d98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000da0:	4b2a      	ldr	r3, [pc, #168]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000da6:	4829      	ldr	r0, [pc, #164]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000da8:	f002 fb20 	bl	80033ec <HAL_TIM_Base_Init>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000db2:	f000 f949 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dba:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000dbc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4822      	ldr	r0, [pc, #136]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000dc4:	f002 fd44 	bl	8003850 <HAL_TIM_ConfigClockSource>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000dce:	f000 f93b 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dd2:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000dd4:	f002 fb59 	bl	800348a <HAL_TIM_PWM_Init>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dde:	f000 f933 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2300      	movs	r3, #0
 8000de4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dea:	f107 0320 	add.w	r3, r7, #32
 8000dee:	4619      	mov	r1, r3
 8000df0:	4816      	ldr	r0, [pc, #88]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000df2:	f003 f911 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000dfc:	f000 f924 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e00:	2360      	movs	r3, #96	@ 0x60
 8000e02:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e04:	2300      	movs	r3, #0
 8000e06:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	4619      	mov	r1, r3
 8000e16:	480d      	ldr	r0, [pc, #52]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000e18:	f002 fc58 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000e22:	f000 f911 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e26:	1d3b      	adds	r3, r7, #4
 8000e28:	2204      	movs	r2, #4
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4807      	ldr	r0, [pc, #28]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000e2e:	f002 fc4d 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000e38:	f000 f906 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e3c:	4803      	ldr	r0, [pc, #12]	@ (8000e4c <MX_TIM3_Init+0xfc>)
 8000e3e:	f000 f9e3 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000e42:	bf00      	nop
 8000e44:	3738      	adds	r7, #56	@ 0x38
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	200000e0 	.word	0x200000e0
 8000e50:	40000400 	.word	0x40000400

08000e54 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08e      	sub	sp, #56	@ 0x38
 8000e58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e5a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]
 8000e62:	605a      	str	r2, [r3, #4]
 8000e64:	609a      	str	r2, [r3, #8]
 8000e66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
 8000e80:	615a      	str	r2, [r3, #20]
 8000e82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e84:	4b2c      	ldr	r3, [pc, #176]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e86:	4a2d      	ldr	r2, [pc, #180]	@ (8000f3c <MX_TIM4_Init+0xe8>)
 8000e88:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 72-1;
 8000e8a:	4b2b      	ldr	r3, [pc, #172]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e8c:	2247      	movs	r2, #71	@ 0x47
 8000e8e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e90:	4b29      	ldr	r3, [pc, #164]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 8000e96:	4b28      	ldr	r3, [pc, #160]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000e98:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e9c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e9e:	4b26      	ldr	r3, [pc, #152]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ea4:	4b24      	ldr	r3, [pc, #144]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000eaa:	4823      	ldr	r0, [pc, #140]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000eac:	f002 fa9e 	bl	80033ec <HAL_TIM_Base_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000eb6:	f000 f8c7 	bl	8001048 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000eba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ec0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	481c      	ldr	r0, [pc, #112]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ec8:	f002 fcc2 	bl	8003850 <HAL_TIM_ConfigClockSource>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000ed2:	f000 f8b9 	bl	8001048 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000ed6:	4818      	ldr	r0, [pc, #96]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ed8:	f002 fad7 	bl	800348a <HAL_TIM_PWM_Init>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ee2:	f000 f8b1 	bl	8001048 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eea:	2300      	movs	r3, #0
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4810      	ldr	r0, [pc, #64]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000ef6:	f003 f88f 	bl	8004018 <HAL_TIMEx_MasterConfigSynchronization>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000f00:	f000 f8a2 	bl	8001048 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f04:	2360      	movs	r3, #96	@ 0x60
 8000f06:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000f1c:	f002 fbd6 	bl	80036cc <HAL_TIM_PWM_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000f26:	f000 f88f 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f2a:	4803      	ldr	r0, [pc, #12]	@ (8000f38 <MX_TIM4_Init+0xe4>)
 8000f2c:	f000 f96c 	bl	8001208 <HAL_TIM_MspPostInit>

}
 8000f30:	bf00      	nop
 8000f32:	3738      	adds	r7, #56	@ 0x38
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000128 	.word	0x20000128
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f44:	4b11      	ldr	r3, [pc, #68]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f46:	4a12      	ldr	r2, [pc, #72]	@ (8000f90 <MX_USART2_UART_Init+0x50>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b0e      	ldr	r3, [pc, #56]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b09      	ldr	r3, [pc, #36]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b08      	ldr	r3, [pc, #32]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f76:	4805      	ldr	r0, [pc, #20]	@ (8000f8c <MX_USART2_UART_Init+0x4c>)
 8000f78:	f003 f91c 	bl	80041b4 <HAL_UART_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f82:	f000 f861 	bl	8001048 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	20000170 	.word	0x20000170
 8000f90:	40004400 	.word	0x40004400

08000f94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b08a      	sub	sp, #40	@ 0x28
 8000f98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f9a:	f107 0314 	add.w	r3, r7, #20
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	4b24      	ldr	r3, [pc, #144]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb2:	4a23      	ldr	r2, [pc, #140]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fb4:	f043 0304 	orr.w	r3, r3, #4
 8000fb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fba:	4b21      	ldr	r3, [pc, #132]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fbe:	f003 0304 	and.w	r3, r3, #4
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
 8000fca:	4b1d      	ldr	r3, [pc, #116]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a1c      	ldr	r2, [pc, #112]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fd0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b1a      	ldr	r3, [pc, #104]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	4b16      	ldr	r3, [pc, #88]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a15      	ldr	r2, [pc, #84]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b13      	ldr	r3, [pc, #76]	@ (8001040 <MX_GPIO_Init+0xac>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	4b0f      	ldr	r3, [pc, #60]	@ (8001040 <MX_GPIO_Init+0xac>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a0e      	ldr	r2, [pc, #56]	@ (8001040 <MX_GPIO_Init+0xac>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b0c      	ldr	r3, [pc, #48]	@ (8001040 <MX_GPIO_Init+0xac>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800101a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800101e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001020:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001024:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4804      	ldr	r0, [pc, #16]	@ (8001044 <MX_GPIO_Init+0xb0>)
 8001032:	f001 fa5f 	bl	80024f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	@ 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020800 	.word	0x40020800

08001048 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800104c:	b672      	cpsid	i
}
 800104e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001050:	bf00      	nop
 8001052:	e7fd      	b.n	8001050 <Error_Handler+0x8>

08001054 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	607b      	str	r3, [r7, #4]
 800105e:	4b10      	ldr	r3, [pc, #64]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001062:	4a0f      	ldr	r2, [pc, #60]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001064:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001068:	6453      	str	r3, [r2, #68]	@ 0x44
 800106a:	4b0d      	ldr	r3, [pc, #52]	@ (80010a0 <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001072:	607b      	str	r3, [r7, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	603b      	str	r3, [r7, #0]
 800107a:	4b09      	ldr	r3, [pc, #36]	@ (80010a0 <HAL_MspInit+0x4c>)
 800107c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800107e:	4a08      	ldr	r2, [pc, #32]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001080:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001084:	6413      	str	r3, [r2, #64]	@ 0x40
 8001086:	4b06      	ldr	r3, [pc, #24]	@ (80010a0 <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800108e:	603b      	str	r3, [r7, #0]
 8001090:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001092:	2007      	movs	r0, #7
 8001094:	f001 f9ec 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	40023800 	.word	0x40023800

080010a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08a      	sub	sp, #40	@ 0x28
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	2200      	movs	r2, #0
 80010b2:	601a      	str	r2, [r3, #0]
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	609a      	str	r2, [r3, #8]
 80010b8:	60da      	str	r2, [r3, #12]
 80010ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1d      	ldr	r2, [pc, #116]	@ (8001138 <HAL_CAN_MspInit+0x94>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d134      	bne.n	8001130 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	613b      	str	r3, [r7, #16]
 80010ca:	4b1c      	ldr	r3, [pc, #112]	@ (800113c <HAL_CAN_MspInit+0x98>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	4a1b      	ldr	r2, [pc, #108]	@ (800113c <HAL_CAN_MspInit+0x98>)
 80010d0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80010d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80010d6:	4b19      	ldr	r3, [pc, #100]	@ (800113c <HAL_CAN_MspInit+0x98>)
 80010d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60fb      	str	r3, [r7, #12]
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_CAN_MspInit+0x98>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a14      	ldr	r2, [pc, #80]	@ (800113c <HAL_CAN_MspInit+0x98>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b12      	ldr	r3, [pc, #72]	@ (800113c <HAL_CAN_MspInit+0x98>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
 80010fc:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010fe:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001102:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001104:	2302      	movs	r3, #2
 8001106:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001108:	2300      	movs	r3, #0
 800110a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800110c:	2303      	movs	r3, #3
 800110e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001110:	2309      	movs	r3, #9
 8001112:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	4809      	ldr	r0, [pc, #36]	@ (8001140 <HAL_CAN_MspInit+0x9c>)
 800111c:	f001 f9ea 	bl	80024f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2014      	movs	r0, #20
 8001126:	f001 f9ae 	bl	8002486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800112a:	2014      	movs	r0, #20
 800112c:	f001 f9c7 	bl	80024be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	@ 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40006400 	.word	0x40006400
 800113c:	40023800 	.word	0x40023800
 8001140:	40020000 	.word	0x40020000

08001144 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b480      	push	{r7}
 8001146:	b087      	sub	sp, #28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a29      	ldr	r2, [pc, #164]	@ (80011f8 <HAL_TIM_Base_MspInit+0xb4>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10e      	bne.n	8001174 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b28      	ldr	r3, [pc, #160]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	4a27      	ldr	r2, [pc, #156]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6453      	str	r3, [r2, #68]	@ 0x44
 8001166:	4b25      	ldr	r3, [pc, #148]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	617b      	str	r3, [r7, #20]
 8001170:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001172:	e03a      	b.n	80011ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM2)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800117c:	d10e      	bne.n	800119c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	613b      	str	r3, [r7, #16]
 8001182:	4b1e      	ldr	r3, [pc, #120]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001186:	4a1d      	ldr	r2, [pc, #116]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001188:	f043 0301 	orr.w	r3, r3, #1
 800118c:	6413      	str	r3, [r2, #64]	@ 0x40
 800118e:	4b1b      	ldr	r3, [pc, #108]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	693b      	ldr	r3, [r7, #16]
}
 800119a:	e026      	b.n	80011ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM3)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_TIM_Base_MspInit+0xbc>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d10e      	bne.n	80011c4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b14      	ldr	r3, [pc, #80]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ae:	4a13      	ldr	r2, [pc, #76]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b6:	4b11      	ldr	r3, [pc, #68]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
}
 80011c2:	e012      	b.n	80011ea <HAL_TIM_Base_MspInit+0xa6>
  else if(htim_base->Instance==TIM4)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a0e      	ldr	r2, [pc, #56]	@ (8001204 <HAL_TIM_Base_MspInit+0xc0>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10d      	bne.n	80011ea <HAL_TIM_Base_MspInit+0xa6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ce:	2300      	movs	r3, #0
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	4b0a      	ldr	r3, [pc, #40]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011d6:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011d8:	f043 0304 	orr.w	r3, r3, #4
 80011dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80011de:	4b07      	ldr	r3, [pc, #28]	@ (80011fc <HAL_TIM_Base_MspInit+0xb8>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e2:	f003 0304 	and.w	r3, r3, #4
 80011e6:	60bb      	str	r3, [r7, #8]
 80011e8:	68bb      	ldr	r3, [r7, #8]
}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40023800 	.word	0x40023800
 8001200:	40000400 	.word	0x40000400
 8001204:	40000800 	.word	0x40000800

08001208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08c      	sub	sp, #48	@ 0x30
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 031c 	add.w	r3, r7, #28
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a58      	ldr	r2, [pc, #352]	@ (8001388 <HAL_TIM_MspPostInit+0x180>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d11f      	bne.n	800126a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	61bb      	str	r3, [r7, #24]
 800122e:	4b57      	ldr	r3, [pc, #348]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	4a56      	ldr	r2, [pc, #344]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	@ 0x30
 800123a:	4b54      	ldr	r3, [pc, #336]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
 8001244:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001246:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800124c:	2302      	movs	r3, #2
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001250:	2300      	movs	r3, #0
 8001252:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001254:	2300      	movs	r3, #0
 8001256:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001258:	2301      	movs	r3, #1
 800125a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 031c 	add.w	r3, r7, #28
 8001260:	4619      	mov	r1, r3
 8001262:	484b      	ldr	r0, [pc, #300]	@ (8001390 <HAL_TIM_MspPostInit+0x188>)
 8001264:	f001 f946 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001268:	e089      	b.n	800137e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001272:	d13d      	bne.n	80012f0 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	4b44      	ldr	r3, [pc, #272]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 800127a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127c:	4a43      	ldr	r2, [pc, #268]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 800127e:	f043 0301 	orr.w	r3, r3, #1
 8001282:	6313      	str	r3, [r2, #48]	@ 0x30
 8001284:	4b41      	ldr	r3, [pc, #260]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001288:	f003 0301 	and.w	r3, r3, #1
 800128c:	617b      	str	r3, [r7, #20]
 800128e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	4b3d      	ldr	r3, [pc, #244]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001298:	4a3c      	ldr	r2, [pc, #240]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 800129a:	f043 0302 	orr.w	r3, r3, #2
 800129e:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a0:	4b3a      	ldr	r3, [pc, #232]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	613b      	str	r3, [r7, #16]
 80012aa:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012ac:	2320      	movs	r3, #32
 80012ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b0:	2302      	movs	r3, #2
 80012b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b8:	2300      	movs	r3, #0
 80012ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012bc:	2301      	movs	r3, #1
 80012be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	f107 031c 	add.w	r3, r7, #28
 80012c4:	4619      	mov	r1, r3
 80012c6:	4832      	ldr	r0, [pc, #200]	@ (8001390 <HAL_TIM_MspPostInit+0x188>)
 80012c8:	f001 f914 	bl	80024f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012cc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012de:	2301      	movs	r3, #1
 80012e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	4619      	mov	r1, r3
 80012e8:	482a      	ldr	r0, [pc, #168]	@ (8001394 <HAL_TIM_MspPostInit+0x18c>)
 80012ea:	f001 f903 	bl	80024f4 <HAL_GPIO_Init>
}
 80012ee:	e046      	b.n	800137e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM3)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4a28      	ldr	r2, [pc, #160]	@ (8001398 <HAL_TIM_MspPostInit+0x190>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d11e      	bne.n	8001338 <HAL_TIM_MspPostInit+0x130>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b23      	ldr	r3, [pc, #140]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a22      	ldr	r2, [pc, #136]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0302 	and.w	r3, r3, #2
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001316:	2330      	movs	r3, #48	@ 0x30
 8001318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001326:	2302      	movs	r3, #2
 8001328:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4818      	ldr	r0, [pc, #96]	@ (8001394 <HAL_TIM_MspPostInit+0x18c>)
 8001332:	f001 f8df 	bl	80024f4 <HAL_GPIO_Init>
}
 8001336:	e022      	b.n	800137e <HAL_TIM_MspPostInit+0x176>
  else if(htim->Instance==TIM4)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a17      	ldr	r2, [pc, #92]	@ (800139c <HAL_TIM_MspPostInit+0x194>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d11d      	bne.n	800137e <HAL_TIM_MspPostInit+0x176>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
 8001346:	4b11      	ldr	r3, [pc, #68]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a10      	ldr	r2, [pc, #64]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 800134c:	f043 0302 	orr.w	r3, r3, #2
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_TIM_MspPostInit+0x184>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f003 0302 	and.w	r3, r3, #2
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800135e:	2340      	movs	r3, #64	@ 0x40
 8001360:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136a:	2300      	movs	r3, #0
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800136e:	2302      	movs	r3, #2
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	4806      	ldr	r0, [pc, #24]	@ (8001394 <HAL_TIM_MspPostInit+0x18c>)
 800137a:	f001 f8bb 	bl	80024f4 <HAL_GPIO_Init>
}
 800137e:	bf00      	nop
 8001380:	3730      	adds	r7, #48	@ 0x30
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40010000 	.word	0x40010000
 800138c:	40023800 	.word	0x40023800
 8001390:	40020000 	.word	0x40020000
 8001394:	40020400 	.word	0x40020400
 8001398:	40000400 	.word	0x40000400
 800139c:	40000800 	.word	0x40000800

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08a      	sub	sp, #40	@ 0x28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a19      	ldr	r2, [pc, #100]	@ (8001424 <HAL_UART_MspInit+0x84>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d12b      	bne.n	800141a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	613b      	str	r3, [r7, #16]
 80013c6:	4b18      	ldr	r3, [pc, #96]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ca:	4a17      	ldr	r2, [pc, #92]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013da:	613b      	str	r3, [r7, #16]
 80013dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
 80013e2:	4b11      	ldr	r3, [pc, #68]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	4a10      	ldr	r2, [pc, #64]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013e8:	f043 0301 	orr.w	r3, r3, #1
 80013ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ee:	4b0e      	ldr	r3, [pc, #56]	@ (8001428 <HAL_UART_MspInit+0x88>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	60fb      	str	r3, [r7, #12]
 80013f8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013fa:	230c      	movs	r3, #12
 80013fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fe:	2302      	movs	r3, #2
 8001400:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	2300      	movs	r3, #0
 8001404:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001406:	2303      	movs	r3, #3
 8001408:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800140a:	2307      	movs	r3, #7
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	4619      	mov	r1, r3
 8001414:	4805      	ldr	r0, [pc, #20]	@ (800142c <HAL_UART_MspInit+0x8c>)
 8001416:	f001 f86d 	bl	80024f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800141a:	bf00      	nop
 800141c:	3728      	adds	r7, #40	@ 0x28
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40004400 	.word	0x40004400
 8001428:	40023800 	.word	0x40023800
 800142c:	40020000 	.word	0x40020000

08001430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <NMI_Handler+0x4>

08001438 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <HardFault_Handler+0x4>

08001440 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001444:	bf00      	nop
 8001446:	e7fd      	b.n	8001444 <MemManage_Handler+0x4>

08001448 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <BusFault_Handler+0x4>

08001450 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <UsageFault_Handler+0x4>

08001458 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001486:	f000 f89b 	bl	80015c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
	...

08001490 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001494:	4802      	ldr	r0, [pc, #8]	@ (80014a0 <CAN1_RX0_IRQHandler+0x10>)
 8001496:	f000 fceb 	bl	8001e70 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	20000028 	.word	0x20000028

080014a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014a8:	4b06      	ldr	r3, [pc, #24]	@ (80014c4 <SystemInit+0x20>)
 80014aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014ae:	4a05      	ldr	r2, [pc, #20]	@ (80014c4 <SystemInit+0x20>)
 80014b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80014b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014b8:	bf00      	nop
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	e000ed00 	.word	0xe000ed00

080014c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80014c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001500 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80014cc:	f7ff ffea 	bl	80014a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80014d0:	480c      	ldr	r0, [pc, #48]	@ (8001504 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80014d2:	490d      	ldr	r1, [pc, #52]	@ (8001508 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80014d4:	4a0d      	ldr	r2, [pc, #52]	@ (800150c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014d8:	e002      	b.n	80014e0 <LoopCopyDataInit>

080014da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014de:	3304      	adds	r3, #4

080014e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014e4:	d3f9      	bcc.n	80014da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80014e8:	4c0a      	ldr	r4, [pc, #40]	@ (8001514 <LoopFillZerobss+0x22>)
  movs r3, #0
 80014ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014ec:	e001      	b.n	80014f2 <LoopFillZerobss>

080014ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014f0:	3204      	adds	r2, #4

080014f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014f4:	d3fb      	bcc.n	80014ee <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80014f6:	f003 f929 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014fa:	f7ff f853 	bl	80005a4 <main>
  bx  lr    
 80014fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001500:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001504:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001508:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800150c:	080047d4 	.word	0x080047d4
  ldr r2, =_sbss
 8001510:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001514:	20000208 	.word	0x20000208

08001518 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001518:	e7fe      	b.n	8001518 <ADC_IRQHandler>
	...

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001520:	4b0e      	ldr	r3, [pc, #56]	@ (800155c <HAL_Init+0x40>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a0d      	ldr	r2, [pc, #52]	@ (800155c <HAL_Init+0x40>)
 8001526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800152a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800152c:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <HAL_Init+0x40>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0a      	ldr	r2, [pc, #40]	@ (800155c <HAL_Init+0x40>)
 8001532:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001536:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <HAL_Init+0x40>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a07      	ldr	r2, [pc, #28]	@ (800155c <HAL_Init+0x40>)
 800153e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001542:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001544:	2003      	movs	r0, #3
 8001546:	f000 ff93 	bl	8002470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800154a:	2000      	movs	r0, #0
 800154c:	f000 f808 	bl	8001560 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001550:	f7ff fd80 	bl	8001054 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023c00 	.word	0x40023c00

08001560 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001568:	4b12      	ldr	r3, [pc, #72]	@ (80015b4 <HAL_InitTick+0x54>)
 800156a:	681a      	ldr	r2, [r3, #0]
 800156c:	4b12      	ldr	r3, [pc, #72]	@ (80015b8 <HAL_InitTick+0x58>)
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001576:	fbb3 f3f1 	udiv	r3, r3, r1
 800157a:	fbb2 f3f3 	udiv	r3, r2, r3
 800157e:	4618      	mov	r0, r3
 8001580:	f000 ffab 	bl	80024da <HAL_SYSTICK_Config>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e00e      	b.n	80015ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2b0f      	cmp	r3, #15
 8001592:	d80a      	bhi.n	80015aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001594:	2200      	movs	r2, #0
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800159c:	f000 ff73 	bl	8002486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015a0:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <HAL_InitTick+0x5c>)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
 80015a8:	e000      	b.n	80015ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	20000000 	.word	0x20000000
 80015b8:	20000008 	.word	0x20000008
 80015bc:	20000004 	.word	0x20000004

080015c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015c4:	4b06      	ldr	r3, [pc, #24]	@ (80015e0 <HAL_IncTick+0x20>)
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	461a      	mov	r2, r3
 80015ca:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <HAL_IncTick+0x24>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4413      	add	r3, r2
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_IncTick+0x24>)
 80015d2:	6013      	str	r3, [r2, #0]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	20000008 	.word	0x20000008
 80015e4:	20000204 	.word	0x20000204

080015e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return uwTick;
 80015ec:	4b03      	ldr	r3, [pc, #12]	@ (80015fc <HAL_GetTick+0x14>)
 80015ee:	681b      	ldr	r3, [r3, #0]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	20000204 	.word	0x20000204

08001600 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e0ed      	b.n	80017ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001618:	b2db      	uxtb	r3, r3
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f7ff fd40 	bl	80010a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f042 0201 	orr.w	r2, r2, #1
 8001632:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001634:	f7ff ffd8 	bl	80015e8 <HAL_GetTick>
 8001638:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800163a:	e012      	b.n	8001662 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800163c:	f7ff ffd4 	bl	80015e8 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b0a      	cmp	r3, #10
 8001648:	d90b      	bls.n	8001662 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	2205      	movs	r2, #5
 800165a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e0c5      	b.n	80017ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0301 	and.w	r3, r3, #1
 800166c:	2b00      	cmp	r3, #0
 800166e:	d0e5      	beq.n	800163c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 0202 	bic.w	r2, r2, #2
 800167e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001680:	f7ff ffb2 	bl	80015e8 <HAL_GetTick>
 8001684:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001686:	e012      	b.n	80016ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001688:	f7ff ffae 	bl	80015e8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b0a      	cmp	r3, #10
 8001694:	d90b      	bls.n	80016ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800169a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2205      	movs	r2, #5
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	e09f      	b.n	80017ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d1e5      	bne.n	8001688 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	7e1b      	ldrb	r3, [r3, #24]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d108      	bne.n	80016d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	e007      	b.n	80016e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	681a      	ldr	r2, [r3, #0]
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7e5b      	ldrb	r3, [r3, #25]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d108      	bne.n	8001700 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	e007      	b.n	8001710 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800170e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	7e9b      	ldrb	r3, [r3, #26]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d108      	bne.n	800172a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 0220 	orr.w	r2, r2, #32
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e007      	b.n	800173a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f022 0220 	bic.w	r2, r2, #32
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	7edb      	ldrb	r3, [r3, #27]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d108      	bne.n	8001754 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 0210 	bic.w	r2, r2, #16
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e007      	b.n	8001764 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0210 	orr.w	r2, r2, #16
 8001762:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	7f1b      	ldrb	r3, [r3, #28]
 8001768:	2b01      	cmp	r3, #1
 800176a:	d108      	bne.n	800177e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f042 0208 	orr.w	r2, r2, #8
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	e007      	b.n	800178e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f022 0208 	bic.w	r2, r2, #8
 800178c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7f5b      	ldrb	r3, [r3, #29]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d108      	bne.n	80017a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 0204 	orr.w	r2, r2, #4
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e007      	b.n	80017b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	68db      	ldr	r3, [r3, #12]
 80017c0:	431a      	orrs	r2, r3
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	431a      	orrs	r2, r3
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	695b      	ldr	r3, [r3, #20]
 80017cc:	ea42 0103 	orr.w	r1, r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	1e5a      	subs	r2, r3, #1
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	430a      	orrs	r2, r1
 80017dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2200      	movs	r2, #0
 80017e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3710      	adds	r7, #16
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b087      	sub	sp, #28
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800180e:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d003      	beq.n	800181e <HAL_CAN_ConfigFilter+0x26>
 8001816:	7cfb      	ldrb	r3, [r7, #19]
 8001818:	2b02      	cmp	r3, #2
 800181a:	f040 80be 	bne.w	800199a <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800181e:	4b65      	ldr	r3, [pc, #404]	@ (80019b4 <HAL_CAN_ConfigFilter+0x1bc>)
 8001820:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001828:	f043 0201 	orr.w	r2, r3, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001838:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001842:	697b      	ldr	r3, [r7, #20]
 8001844:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800184c:	021b      	lsls	r3, r3, #8
 800184e:	431a      	orrs	r2, r3
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	2201      	movs	r2, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	43db      	mvns	r3, r3
 8001870:	401a      	ands	r2, r3
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	69db      	ldr	r3, [r3, #28]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d123      	bne.n	80018c8 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	401a      	ands	r2, r3
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018a2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	3248      	adds	r2, #72	@ 0x48
 80018a8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018bc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018be:	6979      	ldr	r1, [r7, #20]
 80018c0:	3348      	adds	r3, #72	@ 0x48
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	440b      	add	r3, r1
 80018c6:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d122      	bne.n	8001916 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018f0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	3248      	adds	r2, #72	@ 0x48
 80018f6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800190a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	3348      	adds	r3, #72	@ 0x48
 8001910:	00db      	lsls	r3, r3, #3
 8001912:	440b      	add	r3, r1
 8001914:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	699b      	ldr	r3, [r3, #24]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d109      	bne.n	8001932 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	43db      	mvns	r3, r3
 8001928:	401a      	ands	r2, r3
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001930:	e007      	b.n	8001942 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	431a      	orrs	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	691b      	ldr	r3, [r3, #16]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d109      	bne.n	800195e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	43db      	mvns	r3, r3
 8001954:	401a      	ands	r2, r3
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800195c:	e007      	b.n	800196e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	431a      	orrs	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	6a1b      	ldr	r3, [r3, #32]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d107      	bne.n	8001986 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	431a      	orrs	r2, r3
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800198c:	f023 0201 	bic.w	r2, r3, #1
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001996:	2300      	movs	r3, #0
 8001998:	e006      	b.n	80019a8 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800199e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	371c      	adds	r7, #28
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	40006400 	.word	0x40006400

080019b8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d12e      	bne.n	8001a2a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f022 0201 	bic.w	r2, r2, #1
 80019e2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019e4:	f7ff fe00 	bl	80015e8 <HAL_GetTick>
 80019e8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019ea:	e012      	b.n	8001a12 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ec:	f7ff fdfc 	bl	80015e8 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b0a      	cmp	r3, #10
 80019f8:	d90b      	bls.n	8001a12 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2205      	movs	r2, #5
 8001a0a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e012      	b.n	8001a38 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e5      	bne.n	80019ec <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8001a26:	2300      	movs	r3, #0
 8001a28:	e006      	b.n	8001a38 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a2e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
  }
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	3710      	adds	r7, #16
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b089      	sub	sp, #36	@ 0x24
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	60b9      	str	r1, [r7, #8]
 8001a4a:	607a      	str	r2, [r7, #4]
 8001a4c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a54:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d003      	beq.n	8001a6c <HAL_CAN_AddTxMessage+0x2c>
 8001a64:	7ffb      	ldrb	r3, [r7, #31]
 8001a66:	2b02      	cmp	r3, #2
 8001a68:	f040 80ad 	bne.w	8001bc6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10a      	bne.n	8001a8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d105      	bne.n	8001a8c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	f000 8095 	beq.w	8001bb6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	0e1b      	lsrs	r3, r3, #24
 8001a90:	f003 0303 	and.w	r3, r3, #3
 8001a94:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a96:	2201      	movs	r2, #1
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d10d      	bne.n	8001ac4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001ab2:	68f9      	ldr	r1, [r7, #12]
 8001ab4:	6809      	ldr	r1, [r1, #0]
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	3318      	adds	r3, #24
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	440b      	add	r3, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e00f      	b.n	8001ae4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001aca:	68bb      	ldr	r3, [r7, #8]
 8001acc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ace:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ad4:	68f9      	ldr	r1, [r7, #12]
 8001ad6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001ad8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3318      	adds	r3, #24
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	440b      	add	r3, r1
 8001ae2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	6819      	ldr	r1, [r3, #0]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	691a      	ldr	r2, [r3, #16]
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3318      	adds	r3, #24
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	440b      	add	r3, r1
 8001af4:	3304      	adds	r3, #4
 8001af6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	7d1b      	ldrb	r3, [r3, #20]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d111      	bne.n	8001b24 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	3318      	adds	r3, #24
 8001b08:	011b      	lsls	r3, r3, #4
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	6811      	ldr	r1, [r2, #0]
 8001b14:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	3318      	adds	r3, #24
 8001b1c:	011b      	lsls	r3, r3, #4
 8001b1e:	440b      	add	r3, r1
 8001b20:	3304      	adds	r3, #4
 8001b22:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3307      	adds	r3, #7
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	061a      	lsls	r2, r3, #24
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3306      	adds	r3, #6
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	041b      	lsls	r3, r3, #16
 8001b34:	431a      	orrs	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	3305      	adds	r3, #5
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	021b      	lsls	r3, r3, #8
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	3204      	adds	r2, #4
 8001b44:	7812      	ldrb	r2, [r2, #0]
 8001b46:	4610      	mov	r0, r2
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	6811      	ldr	r1, [r2, #0]
 8001b4c:	ea43 0200 	orr.w	r2, r3, r0
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	011b      	lsls	r3, r3, #4
 8001b54:	440b      	add	r3, r1
 8001b56:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b5a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3303      	adds	r3, #3
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	061a      	lsls	r2, r3, #24
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	3302      	adds	r3, #2
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	041b      	lsls	r3, r3, #16
 8001b6c:	431a      	orrs	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	3301      	adds	r3, #1
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	021b      	lsls	r3, r3, #8
 8001b76:	4313      	orrs	r3, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	7812      	ldrb	r2, [r2, #0]
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	68fa      	ldr	r2, [r7, #12]
 8001b80:	6811      	ldr	r1, [r2, #0]
 8001b82:	ea43 0200 	orr.w	r2, r3, r0
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	011b      	lsls	r3, r3, #4
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b90:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3318      	adds	r3, #24
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	4413      	add	r3, r2
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68fa      	ldr	r2, [r7, #12]
 8001ba2:	6811      	ldr	r1, [r2, #0]
 8001ba4:	f043 0201 	orr.w	r2, r3, #1
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	3318      	adds	r3, #24
 8001bac:	011b      	lsls	r3, r3, #4
 8001bae:	440b      	add	r3, r1
 8001bb0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e00e      	b.n	8001bd4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e006      	b.n	8001bd4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bca:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
  }
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3724      	adds	r7, #36	@ 0x24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001be0:	b480      	push	{r7}
 8001be2:	b087      	sub	sp, #28
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bf4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bf6:	7dfb      	ldrb	r3, [r7, #23]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d003      	beq.n	8001c04 <HAL_CAN_GetRxMessage+0x24>
 8001bfc:	7dfb      	ldrb	r3, [r7, #23]
 8001bfe:	2b02      	cmp	r3, #2
 8001c00:	f040 8103 	bne.w	8001e0a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c04:	68bb      	ldr	r3, [r7, #8]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d10e      	bne.n	8001c28 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	f003 0303 	and.w	r3, r3, #3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d116      	bne.n	8001c46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c1c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e0f7      	b.n	8001e18 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	f003 0303 	and.w	r3, r3, #3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d107      	bne.n	8001c46 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c3a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e0e8      	b.n	8001e18 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	331b      	adds	r3, #27
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	4413      	add	r3, r2
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0204 	and.w	r2, r3, #4
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10c      	bne.n	8001c7e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	331b      	adds	r3, #27
 8001c6c:	011b      	lsls	r3, r3, #4
 8001c6e:	4413      	add	r3, r2
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	0d5b      	lsrs	r3, r3, #21
 8001c74:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e00b      	b.n	8001c96 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	331b      	adds	r3, #27
 8001c86:	011b      	lsls	r3, r3, #4
 8001c88:	4413      	add	r3, r2
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	08db      	lsrs	r3, r3, #3
 8001c8e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	331b      	adds	r3, #27
 8001c9e:	011b      	lsls	r3, r3, #4
 8001ca0:	4413      	add	r3, r2
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0202 	and.w	r2, r3, #2
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
 8001cb2:	331b      	adds	r3, #27
 8001cb4:	011b      	lsls	r3, r3, #4
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2208      	movs	r2, #8
 8001cc8:	611a      	str	r2, [r3, #16]
 8001cca:	e00b      	b.n	8001ce4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	331b      	adds	r3, #27
 8001cd4:	011b      	lsls	r3, r3, #4
 8001cd6:	4413      	add	r3, r2
 8001cd8:	3304      	adds	r3, #4
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 020f 	and.w	r2, r3, #15
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	331b      	adds	r3, #27
 8001cec:	011b      	lsls	r3, r3, #4
 8001cee:	4413      	add	r3, r2
 8001cf0:	3304      	adds	r3, #4
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	0a1b      	lsrs	r3, r3, #8
 8001cf6:	b2da      	uxtb	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	331b      	adds	r3, #27
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	4413      	add	r3, r2
 8001d08:	3304      	adds	r3, #4
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	0c1b      	lsrs	r3, r3, #16
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681a      	ldr	r2, [r3, #0]
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	011b      	lsls	r3, r3, #4
 8001d1c:	4413      	add	r3, r2
 8001d1e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4413      	add	r3, r2
 8001d34:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	0a1a      	lsrs	r2, r3, #8
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	3301      	adds	r3, #1
 8001d40:	b2d2      	uxtb	r2, r2
 8001d42:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	011b      	lsls	r3, r3, #4
 8001d4c:	4413      	add	r3, r2
 8001d4e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	0c1a      	lsrs	r2, r3, #16
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	3302      	adds	r3, #2
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	011b      	lsls	r3, r3, #4
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	0e1a      	lsrs	r2, r3, #24
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	3303      	adds	r3, #3
 8001d74:	b2d2      	uxtb	r2, r2
 8001d76:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	011b      	lsls	r3, r3, #4
 8001d80:	4413      	add	r3, r2
 8001d82:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	3304      	adds	r3, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	011b      	lsls	r3, r3, #4
 8001d98:	4413      	add	r3, r2
 8001d9a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	0a1a      	lsrs	r2, r3, #8
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3305      	adds	r3, #5
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	011b      	lsls	r3, r3, #4
 8001db2:	4413      	add	r3, r2
 8001db4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	0c1a      	lsrs	r2, r3, #16
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	3306      	adds	r3, #6
 8001dc0:	b2d2      	uxtb	r2, r2
 8001dc2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	011b      	lsls	r3, r3, #4
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	0e1a      	lsrs	r2, r3, #24
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	3307      	adds	r3, #7
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d108      	bne.n	8001df6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f042 0220 	orr.w	r2, r2, #32
 8001df2:	60da      	str	r2, [r3, #12]
 8001df4:	e007      	b.n	8001e06 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	691a      	ldr	r2, [r3, #16]
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 0220 	orr.w	r2, r2, #32
 8001e04:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e06:	2300      	movs	r3, #0
 8001e08:	e006      	b.n	8001e18 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
  }
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	371c      	adds	r7, #28
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr

08001e24 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e34:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e36:	7bfb      	ldrb	r3, [r7, #15]
 8001e38:	2b01      	cmp	r3, #1
 8001e3a:	d002      	beq.n	8001e42 <HAL_CAN_ActivateNotification+0x1e>
 8001e3c:	7bfb      	ldrb	r3, [r7, #15]
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d109      	bne.n	8001e56 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	6959      	ldr	r1, [r3, #20]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	e006      	b.n	8001e64 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e5a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
  }
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3714      	adds	r7, #20
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08a      	sub	sp, #40	@ 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001eac:	6a3b      	ldr	r3, [r7, #32]
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d07c      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	f003 0301 	and.w	r3, r3, #1
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d023      	beq.n	8001f08 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	f003 0302 	and.w	r3, r3, #2
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f983 	bl	80021de <HAL_CAN_TxMailbox0CompleteCallback>
 8001ed8:	e016      	b.n	8001f08 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f003 0304 	and.w	r3, r3, #4
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	e00c      	b.n	8001f08 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d004      	beq.n	8001f02 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001efe:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f00:	e002      	b.n	8001f08 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f989 	bl	800221a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d024      	beq.n	8001f5c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f1a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f963 	bl	80021f2 <HAL_CAN_TxMailbox1CompleteCallback>
 8001f2c:	e016      	b.n	8001f5c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d004      	beq.n	8001f42 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001f3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f40:	e00c      	b.n	8001f5c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001f42:	69bb      	ldr	r3, [r7, #24]
 8001f44:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d004      	beq.n	8001f56 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f54:	e002      	b.n	8001f5c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f969 	bl	800222e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001f5c:	69bb      	ldr	r3, [r7, #24]
 8001f5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d024      	beq.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001f6e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f943 	bl	8002206 <HAL_CAN_TxMailbox2CompleteCallback>
 8001f80:	e016      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d004      	beq.n	8001f96 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001f92:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f94:	e00c      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d004      	beq.n	8001faa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fa8:	e002      	b.n	8001fb0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f949 	bl	8002242 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001fb0:	6a3b      	ldr	r3, [r7, #32]
 8001fb2:	f003 0308 	and.w	r3, r3, #8
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fca:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2210      	movs	r2, #16
 8001fd2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001fd4:	6a3b      	ldr	r3, [r7, #32]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d00b      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	f003 0308 	and.w	r3, r3, #8
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	2208      	movs	r2, #8
 8001fee:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f000 f930 	bl	8002256 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001ff6:	6a3b      	ldr	r3, [r7, #32]
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	f003 0303 	and.w	r3, r3, #3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7fe fab0 	bl	8000574 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d00c      	beq.n	8002038 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	f003 0310 	and.w	r3, r3, #16
 8002024:	2b00      	cmp	r3, #0
 8002026:	d007      	beq.n	8002038 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	2210      	movs	r2, #16
 8002036:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002038:	6a3b      	ldr	r3, [r7, #32]
 800203a:	f003 0320 	and.w	r3, r3, #32
 800203e:	2b00      	cmp	r3, #0
 8002040:	d00b      	beq.n	800205a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d006      	beq.n	800205a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2208      	movs	r2, #8
 8002052:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 f912 	bl	800227e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800205a:	6a3b      	ldr	r3, [r7, #32]
 800205c:	f003 0310 	and.w	r3, r3, #16
 8002060:	2b00      	cmp	r3, #0
 8002062:	d009      	beq.n	8002078 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	2b00      	cmp	r3, #0
 8002070:	d002      	beq.n	8002078 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f000 f8f9 	bl	800226a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002078:	6a3b      	ldr	r3, [r7, #32]
 800207a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00b      	beq.n	800209a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	f003 0310 	and.w	r3, r3, #16
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f000 f8fc 	bl	8002292 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f003 0308 	and.w	r3, r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d006      	beq.n	80020bc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2208      	movs	r2, #8
 80020b4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f8f5 	bl	80022a6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80020bc:	6a3b      	ldr	r3, [r7, #32]
 80020be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d07b      	beq.n	80021be <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d072      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020d0:	6a3b      	ldr	r3, [r7, #32]
 80020d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d008      	beq.n	80020ec <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80020e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e6:	f043 0301 	orr.w	r3, r3, #1
 80020ea:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d008      	beq.n	8002108 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d003      	beq.n	8002108 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002100:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002102:	f043 0302 	orr.w	r3, r3, #2
 8002106:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800210e:	2b00      	cmp	r3, #0
 8002110:	d008      	beq.n	8002124 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002118:	2b00      	cmp	r3, #0
 800211a:	d003      	beq.n	8002124 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800211c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211e:	f043 0304 	orr.w	r3, r3, #4
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002124:	6a3b      	ldr	r3, [r7, #32]
 8002126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800212a:	2b00      	cmp	r3, #0
 800212c:	d043      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002134:	2b00      	cmp	r3, #0
 8002136:	d03e      	beq.n	80021b6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800213e:	2b60      	cmp	r3, #96	@ 0x60
 8002140:	d02b      	beq.n	800219a <HAL_CAN_IRQHandler+0x32a>
 8002142:	2b60      	cmp	r3, #96	@ 0x60
 8002144:	d82e      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 8002146:	2b50      	cmp	r3, #80	@ 0x50
 8002148:	d022      	beq.n	8002190 <HAL_CAN_IRQHandler+0x320>
 800214a:	2b50      	cmp	r3, #80	@ 0x50
 800214c:	d82a      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 800214e:	2b40      	cmp	r3, #64	@ 0x40
 8002150:	d019      	beq.n	8002186 <HAL_CAN_IRQHandler+0x316>
 8002152:	2b40      	cmp	r3, #64	@ 0x40
 8002154:	d826      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 8002156:	2b30      	cmp	r3, #48	@ 0x30
 8002158:	d010      	beq.n	800217c <HAL_CAN_IRQHandler+0x30c>
 800215a:	2b30      	cmp	r3, #48	@ 0x30
 800215c:	d822      	bhi.n	80021a4 <HAL_CAN_IRQHandler+0x334>
 800215e:	2b10      	cmp	r3, #16
 8002160:	d002      	beq.n	8002168 <HAL_CAN_IRQHandler+0x2f8>
 8002162:	2b20      	cmp	r3, #32
 8002164:	d005      	beq.n	8002172 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002166:	e01d      	b.n	80021a4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	f043 0308 	orr.w	r3, r3, #8
 800216e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002170:	e019      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002174:	f043 0310 	orr.w	r3, r3, #16
 8002178:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800217a:	e014      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800217e:	f043 0320 	orr.w	r3, r3, #32
 8002182:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002184:	e00f      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800218e:	e00a      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002198:	e005      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80021a2:	e000      	b.n	80021a6 <HAL_CAN_IRQHandler+0x336>
            break;
 80021a4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	699a      	ldr	r2, [r3, #24]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80021b4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2204      	movs	r2, #4
 80021bc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80021be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d008      	beq.n	80021d6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80021c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021ca:	431a      	orrs	r2, r3
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 f872 	bl	80022ba <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80021d6:	bf00      	nop
 80021d8:	3728      	adds	r7, #40	@ 0x28
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80021e6:	bf00      	nop
 80021e8:	370c      	adds	r7, #12
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr

080021f2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80021f2:	b480      	push	{r7}
 80021f4:	b083      	sub	sp, #12
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800220e:	bf00      	nop
 8002210:	370c      	adds	r7, #12
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr

0800221a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800221a:	b480      	push	{r7}
 800221c:	b083      	sub	sp, #12
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002222:	bf00      	nop
 8002224:	370c      	adds	r7, #12
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr

0800222e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002236:	bf00      	nop
 8002238:	370c      	adds	r7, #12
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr

08002242 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800224a:	bf00      	nop
 800224c:	370c      	adds	r7, #12
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002256:	b480      	push	{r7}
 8002258:	b083      	sub	sp, #12
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800225e:	bf00      	nop
 8002260:	370c      	adds	r7, #12
 8002262:	46bd      	mov	sp, r7
 8002264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002268:	4770      	bx	lr

0800226a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002286:	bf00      	nop
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80022a6:	b480      	push	{r7}
 80022a8:	b083      	sub	sp, #12
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80022ae:	bf00      	nop
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b083      	sub	sp, #12
 80022be:	af00      	add	r7, sp, #0
 80022c0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr
	...

080022d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f003 0307 	and.w	r3, r3, #7
 80022de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022e6:	68ba      	ldr	r2, [r7, #8]
 80022e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80022ec:	4013      	ands	r3, r2
 80022ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002300:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002302:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <__NVIC_SetPriorityGrouping+0x44>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	60d3      	str	r3, [r2, #12]
}
 8002308:	bf00      	nop
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	e000ed00 	.word	0xe000ed00

08002318 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800231c:	4b04      	ldr	r3, [pc, #16]	@ (8002330 <__NVIC_GetPriorityGrouping+0x18>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	f003 0307 	and.w	r3, r3, #7
}
 8002326:	4618      	mov	r0, r3
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr
 8002330:	e000ed00 	.word	0xe000ed00

08002334 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800233e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002342:	2b00      	cmp	r3, #0
 8002344:	db0b      	blt.n	800235e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	f003 021f 	and.w	r2, r3, #31
 800234c:	4907      	ldr	r1, [pc, #28]	@ (800236c <__NVIC_EnableIRQ+0x38>)
 800234e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002352:	095b      	lsrs	r3, r3, #5
 8002354:	2001      	movs	r0, #1
 8002356:	fa00 f202 	lsl.w	r2, r0, r2
 800235a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	e000e100 	.word	0xe000e100

08002370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	4603      	mov	r3, r0
 8002378:	6039      	str	r1, [r7, #0]
 800237a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800237c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002380:	2b00      	cmp	r3, #0
 8002382:	db0a      	blt.n	800239a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	490c      	ldr	r1, [pc, #48]	@ (80023bc <__NVIC_SetPriority+0x4c>)
 800238a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800238e:	0112      	lsls	r2, r2, #4
 8002390:	b2d2      	uxtb	r2, r2
 8002392:	440b      	add	r3, r1
 8002394:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002398:	e00a      	b.n	80023b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4908      	ldr	r1, [pc, #32]	@ (80023c0 <__NVIC_SetPriority+0x50>)
 80023a0:	79fb      	ldrb	r3, [r7, #7]
 80023a2:	f003 030f 	and.w	r3, r3, #15
 80023a6:	3b04      	subs	r3, #4
 80023a8:	0112      	lsls	r2, r2, #4
 80023aa:	b2d2      	uxtb	r2, r2
 80023ac:	440b      	add	r3, r1
 80023ae:	761a      	strb	r2, [r3, #24]
}
 80023b0:	bf00      	nop
 80023b2:	370c      	adds	r7, #12
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	e000e100 	.word	0xe000e100
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	60b9      	str	r1, [r7, #8]
 80023ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 0307 	and.w	r3, r3, #7
 80023d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023d8:	69fb      	ldr	r3, [r7, #28]
 80023da:	f1c3 0307 	rsb	r3, r3, #7
 80023de:	2b04      	cmp	r3, #4
 80023e0:	bf28      	it	cs
 80023e2:	2304      	movcs	r3, #4
 80023e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	3304      	adds	r3, #4
 80023ea:	2b06      	cmp	r3, #6
 80023ec:	d902      	bls.n	80023f4 <NVIC_EncodePriority+0x30>
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3b03      	subs	r3, #3
 80023f2:	e000      	b.n	80023f6 <NVIC_EncodePriority+0x32>
 80023f4:	2300      	movs	r3, #0
 80023f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023f8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80023fc:	69bb      	ldr	r3, [r7, #24]
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	401a      	ands	r2, r3
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800240c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	fa01 f303 	lsl.w	r3, r1, r3
 8002416:	43d9      	mvns	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800241c:	4313      	orrs	r3, r2
         );
}
 800241e:	4618      	mov	r0, r3
 8002420:	3724      	adds	r7, #36	@ 0x24
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
	...

0800242c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3b01      	subs	r3, #1
 8002438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800243c:	d301      	bcc.n	8002442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800243e:	2301      	movs	r3, #1
 8002440:	e00f      	b.n	8002462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002442:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <SysTick_Config+0x40>)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800244a:	210f      	movs	r1, #15
 800244c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002450:	f7ff ff8e 	bl	8002370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002454:	4b05      	ldr	r3, [pc, #20]	@ (800246c <SysTick_Config+0x40>)
 8002456:	2200      	movs	r2, #0
 8002458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800245a:	4b04      	ldr	r3, [pc, #16]	@ (800246c <SysTick_Config+0x40>)
 800245c:	2207      	movs	r2, #7
 800245e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002460:	2300      	movs	r3, #0
}
 8002462:	4618      	mov	r0, r3
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	e000e010 	.word	0xe000e010

08002470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f7ff ff29 	bl	80022d0 <__NVIC_SetPriorityGrouping>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}

08002486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002486:	b580      	push	{r7, lr}
 8002488:	b086      	sub	sp, #24
 800248a:	af00      	add	r7, sp, #0
 800248c:	4603      	mov	r3, r0
 800248e:	60b9      	str	r1, [r7, #8]
 8002490:	607a      	str	r2, [r7, #4]
 8002492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002498:	f7ff ff3e 	bl	8002318 <__NVIC_GetPriorityGrouping>
 800249c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	6978      	ldr	r0, [r7, #20]
 80024a4:	f7ff ff8e 	bl	80023c4 <NVIC_EncodePriority>
 80024a8:	4602      	mov	r2, r0
 80024aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024ae:	4611      	mov	r1, r2
 80024b0:	4618      	mov	r0, r3
 80024b2:	f7ff ff5d 	bl	8002370 <__NVIC_SetPriority>
}
 80024b6:	bf00      	nop
 80024b8:	3718      	adds	r7, #24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	4603      	mov	r3, r0
 80024c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff31 	bl	8002334 <__NVIC_EnableIRQ>
}
 80024d2:	bf00      	nop
 80024d4:	3708      	adds	r7, #8
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}

080024da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024da:	b580      	push	{r7, lr}
 80024dc:	b082      	sub	sp, #8
 80024de:	af00      	add	r7, sp, #0
 80024e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ffa2 	bl	800242c <SysTick_Config>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3708      	adds	r7, #8
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
	...

080024f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b089      	sub	sp, #36	@ 0x24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002506:	2300      	movs	r3, #0
 8002508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800250a:	2300      	movs	r3, #0
 800250c:	61fb      	str	r3, [r7, #28]
 800250e:	e165      	b.n	80027dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002510:	2201      	movs	r2, #1
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	4013      	ands	r3, r2
 8002522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	429a      	cmp	r2, r3
 800252a:	f040 8154 	bne.w	80027d6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f003 0303 	and.w	r3, r3, #3
 8002536:	2b01      	cmp	r3, #1
 8002538:	d005      	beq.n	8002546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002542:	2b02      	cmp	r3, #2
 8002544:	d130      	bne.n	80025a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	689b      	ldr	r3, [r3, #8]
 800254a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	2203      	movs	r2, #3
 8002552:	fa02 f303 	lsl.w	r3, r2, r3
 8002556:	43db      	mvns	r3, r3
 8002558:	69ba      	ldr	r2, [r7, #24]
 800255a:	4013      	ands	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68da      	ldr	r2, [r3, #12]
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	fa02 f303 	lsl.w	r3, r2, r3
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	4313      	orrs	r3, r2
 800256e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	69ba      	ldr	r2, [r7, #24]
 8002574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800257c:	2201      	movs	r2, #1
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	091b      	lsrs	r3, r3, #4
 8002592:	f003 0201 	and.w	r2, r3, #1
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	fa02 f303 	lsl.w	r3, r2, r3
 800259c:	69ba      	ldr	r2, [r7, #24]
 800259e:	4313      	orrs	r3, r2
 80025a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 0303 	and.w	r3, r3, #3
 80025b0:	2b03      	cmp	r3, #3
 80025b2:	d017      	beq.n	80025e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	68db      	ldr	r3, [r3, #12]
 80025b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	005b      	lsls	r3, r3, #1
 80025be:	2203      	movs	r2, #3
 80025c0:	fa02 f303 	lsl.w	r3, r2, r3
 80025c4:	43db      	mvns	r3, r3
 80025c6:	69ba      	ldr	r2, [r7, #24]
 80025c8:	4013      	ands	r3, r2
 80025ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	689a      	ldr	r2, [r3, #8]
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	005b      	lsls	r3, r3, #1
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4313      	orrs	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d123      	bne.n	8002638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	08da      	lsrs	r2, r3, #3
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	3208      	adds	r2, #8
 80025f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	220f      	movs	r2, #15
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	69ba      	ldr	r2, [r7, #24]
 8002610:	4013      	ands	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	691a      	ldr	r2, [r3, #16]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4313      	orrs	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	08da      	lsrs	r2, r3, #3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3208      	adds	r2, #8
 8002632:	69b9      	ldr	r1, [r7, #24]
 8002634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	2203      	movs	r2, #3
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43db      	mvns	r3, r3
 800264a:	69ba      	ldr	r2, [r7, #24]
 800264c:	4013      	ands	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	685b      	ldr	r3, [r3, #4]
 8002654:	f003 0203 	and.w	r2, r3, #3
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fa02 f303 	lsl.w	r3, r2, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4313      	orrs	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80ae 	beq.w	80027d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	60fb      	str	r3, [r7, #12]
 800267e:	4b5d      	ldr	r3, [pc, #372]	@ (80027f4 <HAL_GPIO_Init+0x300>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002682:	4a5c      	ldr	r2, [pc, #368]	@ (80027f4 <HAL_GPIO_Init+0x300>)
 8002684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002688:	6453      	str	r3, [r2, #68]	@ 0x44
 800268a:	4b5a      	ldr	r3, [pc, #360]	@ (80027f4 <HAL_GPIO_Init+0x300>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800268e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002692:	60fb      	str	r3, [r7, #12]
 8002694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002696:	4a58      	ldr	r2, [pc, #352]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	089b      	lsrs	r3, r3, #2
 800269c:	3302      	adds	r3, #2
 800269e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	f003 0303 	and.w	r3, r3, #3
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	220f      	movs	r2, #15
 80026ae:	fa02 f303 	lsl.w	r3, r2, r3
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4a4f      	ldr	r2, [pc, #316]	@ (80027fc <HAL_GPIO_Init+0x308>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d025      	beq.n	800270e <HAL_GPIO_Init+0x21a>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a4e      	ldr	r2, [pc, #312]	@ (8002800 <HAL_GPIO_Init+0x30c>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d01f      	beq.n	800270a <HAL_GPIO_Init+0x216>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4a4d      	ldr	r2, [pc, #308]	@ (8002804 <HAL_GPIO_Init+0x310>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d019      	beq.n	8002706 <HAL_GPIO_Init+0x212>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	4a4c      	ldr	r2, [pc, #304]	@ (8002808 <HAL_GPIO_Init+0x314>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d013      	beq.n	8002702 <HAL_GPIO_Init+0x20e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4a4b      	ldr	r2, [pc, #300]	@ (800280c <HAL_GPIO_Init+0x318>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <HAL_GPIO_Init+0x20a>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	4a4a      	ldr	r2, [pc, #296]	@ (8002810 <HAL_GPIO_Init+0x31c>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d007      	beq.n	80026fa <HAL_GPIO_Init+0x206>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a49      	ldr	r2, [pc, #292]	@ (8002814 <HAL_GPIO_Init+0x320>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_GPIO_Init+0x202>
 80026f2:	2306      	movs	r3, #6
 80026f4:	e00c      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 80026f6:	2307      	movs	r3, #7
 80026f8:	e00a      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 80026fa:	2305      	movs	r3, #5
 80026fc:	e008      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 80026fe:	2304      	movs	r3, #4
 8002700:	e006      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 8002702:	2303      	movs	r3, #3
 8002704:	e004      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 8002706:	2302      	movs	r3, #2
 8002708:	e002      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 800270a:	2301      	movs	r3, #1
 800270c:	e000      	b.n	8002710 <HAL_GPIO_Init+0x21c>
 800270e:	2300      	movs	r3, #0
 8002710:	69fa      	ldr	r2, [r7, #28]
 8002712:	f002 0203 	and.w	r2, r2, #3
 8002716:	0092      	lsls	r2, r2, #2
 8002718:	4093      	lsls	r3, r2
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4313      	orrs	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002720:	4935      	ldr	r1, [pc, #212]	@ (80027f8 <HAL_GPIO_Init+0x304>)
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	089b      	lsrs	r3, r3, #2
 8002726:	3302      	adds	r3, #2
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800272e:	4b3a      	ldr	r3, [pc, #232]	@ (8002818 <HAL_GPIO_Init+0x324>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	43db      	mvns	r3, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4013      	ands	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	693b      	ldr	r3, [r7, #16]
 800274e:	4313      	orrs	r3, r2
 8002750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002752:	4a31      	ldr	r2, [pc, #196]	@ (8002818 <HAL_GPIO_Init+0x324>)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002758:	4b2f      	ldr	r3, [pc, #188]	@ (8002818 <HAL_GPIO_Init+0x324>)
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	43db      	mvns	r3, r3
 8002762:	69ba      	ldr	r2, [r7, #24]
 8002764:	4013      	ands	r3, r2
 8002766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	4313      	orrs	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800277c:	4a26      	ldr	r2, [pc, #152]	@ (8002818 <HAL_GPIO_Init+0x324>)
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002782:	4b25      	ldr	r3, [pc, #148]	@ (8002818 <HAL_GPIO_Init+0x324>)
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	43db      	mvns	r3, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4013      	ands	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d003      	beq.n	80027a6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002818 <HAL_GPIO_Init+0x324>)
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002818 <HAL_GPIO_Init+0x324>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	43db      	mvns	r3, r3
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	4013      	ands	r3, r2
 80027ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d003      	beq.n	80027d0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027d0:	4a11      	ldr	r2, [pc, #68]	@ (8002818 <HAL_GPIO_Init+0x324>)
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	3301      	adds	r3, #1
 80027da:	61fb      	str	r3, [r7, #28]
 80027dc:	69fb      	ldr	r3, [r7, #28]
 80027de:	2b0f      	cmp	r3, #15
 80027e0:	f67f ae96 	bls.w	8002510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop
 80027e8:	3724      	adds	r7, #36	@ 0x24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40020000 	.word	0x40020000
 8002800:	40020400 	.word	0x40020400
 8002804:	40020800 	.word	0x40020800
 8002808:	40020c00 	.word	0x40020c00
 800280c:	40021000 	.word	0x40021000
 8002810:	40021400 	.word	0x40021400
 8002814:	40021800 	.word	0x40021800
 8002818:	40013c00 	.word	0x40013c00

0800281c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
 8002824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e0cc      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002830:	4b68      	ldr	r3, [pc, #416]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 030f 	and.w	r3, r3, #15
 8002838:	683a      	ldr	r2, [r7, #0]
 800283a:	429a      	cmp	r2, r3
 800283c:	d90c      	bls.n	8002858 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800283e:	4b65      	ldr	r3, [pc, #404]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002840:	683a      	ldr	r2, [r7, #0]
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0b8      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0302 	and.w	r3, r3, #2
 8002860:	2b00      	cmp	r3, #0
 8002862:	d020      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 0304 	and.w	r3, r3, #4
 800286c:	2b00      	cmp	r3, #0
 800286e:	d005      	beq.n	800287c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002870:	4b59      	ldr	r3, [pc, #356]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	4a58      	ldr	r2, [pc, #352]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002876:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800287a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0308 	and.w	r3, r3, #8
 8002884:	2b00      	cmp	r3, #0
 8002886:	d005      	beq.n	8002894 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002888:	4b53      	ldr	r3, [pc, #332]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	4a52      	ldr	r2, [pc, #328]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002892:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002894:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	494d      	ldr	r1, [pc, #308]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0301 	and.w	r3, r3, #1
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d044      	beq.n	800293c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028ba:	4b47      	ldr	r3, [pc, #284]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d119      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e07f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d003      	beq.n	80028da <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028d6:	2b03      	cmp	r3, #3
 80028d8:	d107      	bne.n	80028ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028da:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d109      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e06f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ea:	4b3b      	ldr	r3, [pc, #236]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e067      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028fa:	4b37      	ldr	r3, [pc, #220]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f023 0203 	bic.w	r2, r3, #3
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	4934      	ldr	r1, [pc, #208]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	4313      	orrs	r3, r2
 800290a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe fe6c 	bl	80015e8 <HAL_GetTick>
 8002910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	e00a      	b.n	800292a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	f7fe fe68 	bl	80015e8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002922:	4293      	cmp	r3, r2
 8002924:	d901      	bls.n	800292a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002926:	2303      	movs	r3, #3
 8002928:	e04f      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292a:	4b2b      	ldr	r3, [pc, #172]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 020c 	and.w	r2, r3, #12
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	429a      	cmp	r2, r3
 800293a:	d1eb      	bne.n	8002914 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800293c:	4b25      	ldr	r3, [pc, #148]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 030f 	and.w	r3, r3, #15
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	429a      	cmp	r2, r3
 8002948:	d20c      	bcs.n	8002964 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294a:	4b22      	ldr	r3, [pc, #136]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 800294c:	683a      	ldr	r2, [r7, #0]
 800294e:	b2d2      	uxtb	r2, r2
 8002950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002952:	4b20      	ldr	r3, [pc, #128]	@ (80029d4 <HAL_RCC_ClockConfig+0x1b8>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 030f 	and.w	r3, r3, #15
 800295a:	683a      	ldr	r2, [r7, #0]
 800295c:	429a      	cmp	r2, r3
 800295e:	d001      	beq.n	8002964 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002960:	2301      	movs	r3, #1
 8002962:	e032      	b.n	80029ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002970:	4b19      	ldr	r3, [pc, #100]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	689b      	ldr	r3, [r3, #8]
 8002974:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	68db      	ldr	r3, [r3, #12]
 800297c:	4916      	ldr	r1, [pc, #88]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800297e:	4313      	orrs	r3, r2
 8002980:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d009      	beq.n	80029a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800298e:	4b12      	ldr	r3, [pc, #72]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	691b      	ldr	r3, [r3, #16]
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	490e      	ldr	r1, [pc, #56]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029a2:	f000 f855 	bl	8002a50 <HAL_RCC_GetSysClockFreq>
 80029a6:	4602      	mov	r2, r0
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_ClockConfig+0x1bc>)
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	f003 030f 	and.w	r3, r3, #15
 80029b2:	490a      	ldr	r1, [pc, #40]	@ (80029dc <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	5ccb      	ldrb	r3, [r1, r3]
 80029b6:	fa22 f303 	lsr.w	r3, r2, r3
 80029ba:	4a09      	ldr	r2, [pc, #36]	@ (80029e0 <HAL_RCC_ClockConfig+0x1c4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029be:	4b09      	ldr	r3, [pc, #36]	@ (80029e4 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7fe fdcc 	bl	8001560 <HAL_InitTick>

  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3710      	adds	r7, #16
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	40023c00 	.word	0x40023c00
 80029d8:	40023800 	.word	0x40023800
 80029dc:	080047ac 	.word	0x080047ac
 80029e0:	20000000 	.word	0x20000000
 80029e4:	20000004 	.word	0x20000004

080029e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029ec:	4b03      	ldr	r3, [pc, #12]	@ (80029fc <HAL_RCC_GetHCLKFreq+0x14>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f8:	4770      	bx	lr
 80029fa:	bf00      	nop
 80029fc:	20000000 	.word	0x20000000

08002a00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a04:	f7ff fff0 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	0a9b      	lsrs	r3, r3, #10
 8002a10:	f003 0307 	and.w	r3, r3, #7
 8002a14:	4903      	ldr	r1, [pc, #12]	@ (8002a24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a16:	5ccb      	ldrb	r3, [r1, r3]
 8002a18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40023800 	.word	0x40023800
 8002a24:	080047bc 	.word	0x080047bc

08002a28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002a2c:	f7ff ffdc 	bl	80029e8 <HAL_RCC_GetHCLKFreq>
 8002a30:	4602      	mov	r2, r0
 8002a32:	4b05      	ldr	r3, [pc, #20]	@ (8002a48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	0b5b      	lsrs	r3, r3, #13
 8002a38:	f003 0307 	and.w	r3, r3, #7
 8002a3c:	4903      	ldr	r1, [pc, #12]	@ (8002a4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a3e:	5ccb      	ldrb	r3, [r1, r3]
 8002a40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	080047bc 	.word	0x080047bc

08002a50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a54:	b0ae      	sub	sp, #184	@ 0xb8
 8002a56:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a64:	2300      	movs	r3, #0
 8002a66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a70:	2300      	movs	r3, #0
 8002a72:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a76:	4bcb      	ldr	r3, [pc, #812]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b0c      	cmp	r3, #12
 8002a80:	f200 8206 	bhi.w	8002e90 <HAL_RCC_GetSysClockFreq+0x440>
 8002a84:	a201      	add	r2, pc, #4	@ (adr r2, 8002a8c <HAL_RCC_GetSysClockFreq+0x3c>)
 8002a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a8a:	bf00      	nop
 8002a8c:	08002ac1 	.word	0x08002ac1
 8002a90:	08002e91 	.word	0x08002e91
 8002a94:	08002e91 	.word	0x08002e91
 8002a98:	08002e91 	.word	0x08002e91
 8002a9c:	08002ac9 	.word	0x08002ac9
 8002aa0:	08002e91 	.word	0x08002e91
 8002aa4:	08002e91 	.word	0x08002e91
 8002aa8:	08002e91 	.word	0x08002e91
 8002aac:	08002ad1 	.word	0x08002ad1
 8002ab0:	08002e91 	.word	0x08002e91
 8002ab4:	08002e91 	.word	0x08002e91
 8002ab8:	08002e91 	.word	0x08002e91
 8002abc:	08002cc1 	.word	0x08002cc1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac0:	4bb9      	ldr	r3, [pc, #740]	@ (8002da8 <HAL_RCC_GetSysClockFreq+0x358>)
 8002ac2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002ac6:	e1e7      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ac8:	4bb8      	ldr	r3, [pc, #736]	@ (8002dac <HAL_RCC_GetSysClockFreq+0x35c>)
 8002aca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ace:	e1e3      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4bb4      	ldr	r3, [pc, #720]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ad8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002adc:	4bb1      	ldr	r3, [pc, #708]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d071      	beq.n	8002bcc <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae8:	4bae      	ldr	r3, [pc, #696]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	099b      	lsrs	r3, r3, #6
 8002aee:	2200      	movs	r2, #0
 8002af0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002af4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002af8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002afc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b00:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b04:	2300      	movs	r3, #0
 8002b06:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b0a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b0e:	4622      	mov	r2, r4
 8002b10:	462b      	mov	r3, r5
 8002b12:	f04f 0000 	mov.w	r0, #0
 8002b16:	f04f 0100 	mov.w	r1, #0
 8002b1a:	0159      	lsls	r1, r3, #5
 8002b1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b20:	0150      	lsls	r0, r2, #5
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4621      	mov	r1, r4
 8002b28:	1a51      	subs	r1, r2, r1
 8002b2a:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b32:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b34:	f04f 0200 	mov.w	r2, #0
 8002b38:	f04f 0300 	mov.w	r3, #0
 8002b3c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b40:	4649      	mov	r1, r9
 8002b42:	018b      	lsls	r3, r1, #6
 8002b44:	4641      	mov	r1, r8
 8002b46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b4a:	4641      	mov	r1, r8
 8002b4c:	018a      	lsls	r2, r1, #6
 8002b4e:	4641      	mov	r1, r8
 8002b50:	1a51      	subs	r1, r2, r1
 8002b52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b54:	4649      	mov	r1, r9
 8002b56:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b68:	4649      	mov	r1, r9
 8002b6a:	00cb      	lsls	r3, r1, #3
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b72:	4641      	mov	r1, r8
 8002b74:	00ca      	lsls	r2, r1, #3
 8002b76:	4610      	mov	r0, r2
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	189b      	adds	r3, r3, r2
 8002b80:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b82:	462b      	mov	r3, r5
 8002b84:	460a      	mov	r2, r1
 8002b86:	eb42 0303 	adc.w	r3, r2, r3
 8002b8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b98:	4629      	mov	r1, r5
 8002b9a:	024b      	lsls	r3, r1, #9
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba2:	4621      	mov	r1, r4
 8002ba4:	024a      	lsls	r2, r1, #9
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bae:	2200      	movs	r2, #0
 8002bb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bb4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bb8:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002bbc:	f7fd fb22 	bl	8000204 <__aeabi_uldivmod>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bca:	e067      	b.n	8002c9c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bcc:	4b75      	ldr	r3, [pc, #468]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	099b      	lsrs	r3, r3, #6
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002bd8:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002bdc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002be4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002be6:	2300      	movs	r3, #0
 8002be8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002bea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002bee:	4622      	mov	r2, r4
 8002bf0:	462b      	mov	r3, r5
 8002bf2:	f04f 0000 	mov.w	r0, #0
 8002bf6:	f04f 0100 	mov.w	r1, #0
 8002bfa:	0159      	lsls	r1, r3, #5
 8002bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c00:	0150      	lsls	r0, r2, #5
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4621      	mov	r1, r4
 8002c08:	1a51      	subs	r1, r2, r1
 8002c0a:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c0c:	4629      	mov	r1, r5
 8002c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8002c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c20:	4649      	mov	r1, r9
 8002c22:	018b      	lsls	r3, r1, #6
 8002c24:	4641      	mov	r1, r8
 8002c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c2a:	4641      	mov	r1, r8
 8002c2c:	018a      	lsls	r2, r1, #6
 8002c2e:	4641      	mov	r1, r8
 8002c30:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c34:	4649      	mov	r1, r9
 8002c36:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c3a:	f04f 0200 	mov.w	r2, #0
 8002c3e:	f04f 0300 	mov.w	r3, #0
 8002c42:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c46:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c4a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c4e:	4692      	mov	sl, r2
 8002c50:	469b      	mov	fp, r3
 8002c52:	4623      	mov	r3, r4
 8002c54:	eb1a 0303 	adds.w	r3, sl, r3
 8002c58:	623b      	str	r3, [r7, #32]
 8002c5a:	462b      	mov	r3, r5
 8002c5c:	eb4b 0303 	adc.w	r3, fp, r3
 8002c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c6e:	4629      	mov	r1, r5
 8002c70:	028b      	lsls	r3, r1, #10
 8002c72:	4621      	mov	r1, r4
 8002c74:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c78:	4621      	mov	r1, r4
 8002c7a:	028a      	lsls	r2, r1, #10
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002c84:	2200      	movs	r2, #0
 8002c86:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c88:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c8a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c8e:	f7fd fab9 	bl	8000204 <__aeabi_uldivmod>
 8002c92:	4602      	mov	r2, r0
 8002c94:	460b      	mov	r3, r1
 8002c96:	4613      	mov	r3, r2
 8002c98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c9c:	4b41      	ldr	r3, [pc, #260]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	0c1b      	lsrs	r3, r3, #16
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002cae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002cbe:	e0eb      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002cc0:	4b38      	ldr	r3, [pc, #224]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ccc:	4b35      	ldr	r3, [pc, #212]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d06b      	beq.n	8002db0 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002cd8:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCC_GetSysClockFreq+0x354>)
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	099b      	lsrs	r3, r3, #6
 8002cde:	2200      	movs	r2, #0
 8002ce0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002ce2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002ce4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ce6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cea:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cec:	2300      	movs	r3, #0
 8002cee:	667b      	str	r3, [r7, #100]	@ 0x64
 8002cf0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002cf4:	4622      	mov	r2, r4
 8002cf6:	462b      	mov	r3, r5
 8002cf8:	f04f 0000 	mov.w	r0, #0
 8002cfc:	f04f 0100 	mov.w	r1, #0
 8002d00:	0159      	lsls	r1, r3, #5
 8002d02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d06:	0150      	lsls	r0, r2, #5
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4621      	mov	r1, r4
 8002d0e:	1a51      	subs	r1, r2, r1
 8002d10:	61b9      	str	r1, [r7, #24]
 8002d12:	4629      	mov	r1, r5
 8002d14:	eb63 0301 	sbc.w	r3, r3, r1
 8002d18:	61fb      	str	r3, [r7, #28]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d26:	4659      	mov	r1, fp
 8002d28:	018b      	lsls	r3, r1, #6
 8002d2a:	4651      	mov	r1, sl
 8002d2c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d30:	4651      	mov	r1, sl
 8002d32:	018a      	lsls	r2, r1, #6
 8002d34:	4651      	mov	r1, sl
 8002d36:	ebb2 0801 	subs.w	r8, r2, r1
 8002d3a:	4659      	mov	r1, fp
 8002d3c:	eb63 0901 	sbc.w	r9, r3, r1
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d54:	4690      	mov	r8, r2
 8002d56:	4699      	mov	r9, r3
 8002d58:	4623      	mov	r3, r4
 8002d5a:	eb18 0303 	adds.w	r3, r8, r3
 8002d5e:	613b      	str	r3, [r7, #16]
 8002d60:	462b      	mov	r3, r5
 8002d62:	eb49 0303 	adc.w	r3, r9, r3
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d74:	4629      	mov	r1, r5
 8002d76:	024b      	lsls	r3, r1, #9
 8002d78:	4621      	mov	r1, r4
 8002d7a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d7e:	4621      	mov	r1, r4
 8002d80:	024a      	lsls	r2, r1, #9
 8002d82:	4610      	mov	r0, r2
 8002d84:	4619      	mov	r1, r3
 8002d86:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d8e:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d94:	f7fd fa36 	bl	8000204 <__aeabi_uldivmod>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4613      	mov	r3, r2
 8002d9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002da2:	e065      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x420>
 8002da4:	40023800 	.word	0x40023800
 8002da8:	00f42400 	.word	0x00f42400
 8002dac:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002db0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	099b      	lsrs	r3, r3, #6
 8002db6:	2200      	movs	r2, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	4611      	mov	r1, r2
 8002dbc:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002dc0:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dc6:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002dca:	4642      	mov	r2, r8
 8002dcc:	464b      	mov	r3, r9
 8002dce:	f04f 0000 	mov.w	r0, #0
 8002dd2:	f04f 0100 	mov.w	r1, #0
 8002dd6:	0159      	lsls	r1, r3, #5
 8002dd8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ddc:	0150      	lsls	r0, r2, #5
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4641      	mov	r1, r8
 8002de4:	1a51      	subs	r1, r2, r1
 8002de6:	60b9      	str	r1, [r7, #8]
 8002de8:	4649      	mov	r1, r9
 8002dea:	eb63 0301 	sbc.w	r3, r3, r1
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	f04f 0200 	mov.w	r2, #0
 8002df4:	f04f 0300 	mov.w	r3, #0
 8002df8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002dfc:	4659      	mov	r1, fp
 8002dfe:	018b      	lsls	r3, r1, #6
 8002e00:	4651      	mov	r1, sl
 8002e02:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e06:	4651      	mov	r1, sl
 8002e08:	018a      	lsls	r2, r1, #6
 8002e0a:	4651      	mov	r1, sl
 8002e0c:	1a54      	subs	r4, r2, r1
 8002e0e:	4659      	mov	r1, fp
 8002e10:	eb63 0501 	sbc.w	r5, r3, r1
 8002e14:	f04f 0200 	mov.w	r2, #0
 8002e18:	f04f 0300 	mov.w	r3, #0
 8002e1c:	00eb      	lsls	r3, r5, #3
 8002e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e22:	00e2      	lsls	r2, r4, #3
 8002e24:	4614      	mov	r4, r2
 8002e26:	461d      	mov	r5, r3
 8002e28:	4643      	mov	r3, r8
 8002e2a:	18e3      	adds	r3, r4, r3
 8002e2c:	603b      	str	r3, [r7, #0]
 8002e2e:	464b      	mov	r3, r9
 8002e30:	eb45 0303 	adc.w	r3, r5, r3
 8002e34:	607b      	str	r3, [r7, #4]
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e42:	4629      	mov	r1, r5
 8002e44:	028b      	lsls	r3, r1, #10
 8002e46:	4621      	mov	r1, r4
 8002e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e4c:	4621      	mov	r1, r4
 8002e4e:	028a      	lsls	r2, r1, #10
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e58:	2200      	movs	r2, #0
 8002e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e5c:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e5e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e62:	f7fd f9cf 	bl	8000204 <__aeabi_uldivmod>
 8002e66:	4602      	mov	r2, r0
 8002e68:	460b      	mov	r3, r1
 8002e6a:	4613      	mov	r3, r2
 8002e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e70:	4b0d      	ldr	r3, [pc, #52]	@ (8002ea8 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	0f1b      	lsrs	r3, r3, #28
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002e7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002e82:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e8a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e8e:	e003      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b06      	ldr	r3, [pc, #24]	@ (8002eac <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e92:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e96:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e98:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	37b8      	adds	r7, #184	@ 0xb8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ea6:	bf00      	nop
 8002ea8:	40023800 	.word	0x40023800
 8002eac:	00f42400 	.word	0x00f42400

08002eb0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b086      	sub	sp, #24
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e28d      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0301 	and.w	r3, r3, #1
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 8083 	beq.w	8002fd6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ed0:	4b94      	ldr	r3, [pc, #592]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d019      	beq.n	8002f10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002edc:	4b91      	ldr	r3, [pc, #580]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002ee4:	2b08      	cmp	r3, #8
 8002ee6:	d106      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ee8:	4b8e      	ldr	r3, [pc, #568]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ef4:	d00c      	beq.n	8002f10 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ef6:	4b8b      	ldr	r3, [pc, #556]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002efe:	2b0c      	cmp	r3, #12
 8002f00:	d112      	bne.n	8002f28 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f02:	4b88      	ldr	r3, [pc, #544]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f0a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f0e:	d10b      	bne.n	8002f28 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f10:	4b84      	ldr	r3, [pc, #528]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d05b      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x124>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d157      	bne.n	8002fd4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e25a      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f30:	d106      	bne.n	8002f40 <HAL_RCC_OscConfig+0x90>
 8002f32:	4b7c      	ldr	r3, [pc, #496]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a7b      	ldr	r2, [pc, #492]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f3c:	6013      	str	r3, [r2, #0]
 8002f3e:	e01d      	b.n	8002f7c <HAL_RCC_OscConfig+0xcc>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f48:	d10c      	bne.n	8002f64 <HAL_RCC_OscConfig+0xb4>
 8002f4a:	4b76      	ldr	r3, [pc, #472]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a75      	ldr	r2, [pc, #468]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f54:	6013      	str	r3, [r2, #0]
 8002f56:	4b73      	ldr	r3, [pc, #460]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a72      	ldr	r2, [pc, #456]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	e00b      	b.n	8002f7c <HAL_RCC_OscConfig+0xcc>
 8002f64:	4b6f      	ldr	r3, [pc, #444]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a6e      	ldr	r2, [pc, #440]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	4b6c      	ldr	r3, [pc, #432]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a6b      	ldr	r2, [pc, #428]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d013      	beq.n	8002fac <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f84:	f7fe fb30 	bl	80015e8 <HAL_GetTick>
 8002f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f8a:	e008      	b.n	8002f9e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f8c:	f7fe fb2c 	bl	80015e8 <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	2b64      	cmp	r3, #100	@ 0x64
 8002f98:	d901      	bls.n	8002f9e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	e21f      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9e:	4b61      	ldr	r3, [pc, #388]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d0f0      	beq.n	8002f8c <HAL_RCC_OscConfig+0xdc>
 8002faa:	e014      	b.n	8002fd6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fb1c 	bl	80015e8 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fb18 	bl	80015e8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e20b      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc6:	4b57      	ldr	r3, [pc, #348]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d1f0      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x104>
 8002fd2:	e000      	b.n	8002fd6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d06f      	beq.n	80030c2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002fe2:	4b50      	ldr	r3, [pc, #320]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	f003 030c 	and.w	r3, r3, #12
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d017      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002fee:	4b4d      	ldr	r3, [pc, #308]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ff6:	2b08      	cmp	r3, #8
 8002ff8:	d105      	bne.n	8003006 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ffa:	4b4a      	ldr	r3, [pc, #296]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d00b      	beq.n	800301e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003006:	4b47      	ldr	r3, [pc, #284]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800300e:	2b0c      	cmp	r3, #12
 8003010:	d11c      	bne.n	800304c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003012:	4b44      	ldr	r3, [pc, #272]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d116      	bne.n	800304c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800301e:	4b41      	ldr	r3, [pc, #260]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d005      	beq.n	8003036 <HAL_RCC_OscConfig+0x186>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	2b01      	cmp	r3, #1
 8003030:	d001      	beq.n	8003036 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e1d3      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003036:	4b3b      	ldr	r3, [pc, #236]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	4937      	ldr	r1, [pc, #220]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003046:	4313      	orrs	r3, r2
 8003048:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	e03a      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	68db      	ldr	r3, [r3, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d020      	beq.n	8003096 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003054:	4b34      	ldr	r3, [pc, #208]	@ (8003128 <HAL_RCC_OscConfig+0x278>)
 8003056:	2201      	movs	r2, #1
 8003058:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800305a:	f7fe fac5 	bl	80015e8 <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003060:	e008      	b.n	8003074 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003062:	f7fe fac1 	bl	80015e8 <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d901      	bls.n	8003074 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003070:	2303      	movs	r3, #3
 8003072:	e1b4      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003074:	4b2b      	ldr	r3, [pc, #172]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0302 	and.w	r3, r3, #2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d0f0      	beq.n	8003062 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003080:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	00db      	lsls	r3, r3, #3
 800308e:	4925      	ldr	r1, [pc, #148]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 8003090:	4313      	orrs	r3, r2
 8003092:	600b      	str	r3, [r1, #0]
 8003094:	e015      	b.n	80030c2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003096:	4b24      	ldr	r3, [pc, #144]	@ (8003128 <HAL_RCC_OscConfig+0x278>)
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309c:	f7fe faa4 	bl	80015e8 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a4:	f7fe faa0 	bl	80015e8 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e193      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030b6:	4b1b      	ldr	r3, [pc, #108]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d036      	beq.n	800313c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d016      	beq.n	8003104 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030d6:	4b15      	ldr	r3, [pc, #84]	@ (800312c <HAL_RCC_OscConfig+0x27c>)
 80030d8:	2201      	movs	r2, #1
 80030da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030dc:	f7fe fa84 	bl	80015e8 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030e4:	f7fe fa80 	bl	80015e8 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e173      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030f6:	4b0b      	ldr	r3, [pc, #44]	@ (8003124 <HAL_RCC_OscConfig+0x274>)
 80030f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0x234>
 8003102:	e01b      	b.n	800313c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003104:	4b09      	ldr	r3, [pc, #36]	@ (800312c <HAL_RCC_OscConfig+0x27c>)
 8003106:	2200      	movs	r2, #0
 8003108:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800310a:	f7fe fa6d 	bl	80015e8 <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003110:	e00e      	b.n	8003130 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003112:	f7fe fa69 	bl	80015e8 <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d907      	bls.n	8003130 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e15c      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
 8003124:	40023800 	.word	0x40023800
 8003128:	42470000 	.word	0x42470000
 800312c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003130:	4b8a      	ldr	r3, [pc, #552]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d1ea      	bne.n	8003112 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0304 	and.w	r3, r3, #4
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8097 	beq.w	8003278 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800314a:	2300      	movs	r3, #0
 800314c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800314e:	4b83      	ldr	r3, [pc, #524]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d10f      	bne.n	800317a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800315a:	2300      	movs	r3, #0
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	4b7f      	ldr	r3, [pc, #508]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003162:	4a7e      	ldr	r2, [pc, #504]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003164:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003168:	6413      	str	r3, [r2, #64]	@ 0x40
 800316a:	4b7c      	ldr	r3, [pc, #496]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003172:	60bb      	str	r3, [r7, #8]
 8003174:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003176:	2301      	movs	r3, #1
 8003178:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800317a:	4b79      	ldr	r3, [pc, #484]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003182:	2b00      	cmp	r3, #0
 8003184:	d118      	bne.n	80031b8 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003186:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a75      	ldr	r2, [pc, #468]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 800318c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003192:	f7fe fa29 	bl	80015e8 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319a:	f7fe fa25 	bl	80015e8 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e118      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b6c      	ldr	r3, [pc, #432]	@ (8003360 <HAL_RCC_OscConfig+0x4b0>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d106      	bne.n	80031ce <HAL_RCC_OscConfig+0x31e>
 80031c0:	4b66      	ldr	r3, [pc, #408]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031c4:	4a65      	ldr	r2, [pc, #404]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80031cc:	e01c      	b.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	2b05      	cmp	r3, #5
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCC_OscConfig+0x340>
 80031d6:	4b61      	ldr	r3, [pc, #388]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031da:	4a60      	ldr	r2, [pc, #384]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031dc:	f043 0304 	orr.w	r3, r3, #4
 80031e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80031e2:	4b5e      	ldr	r3, [pc, #376]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031e6:	4a5d      	ldr	r2, [pc, #372]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031e8:	f043 0301 	orr.w	r3, r3, #1
 80031ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80031ee:	e00b      	b.n	8003208 <HAL_RCC_OscConfig+0x358>
 80031f0:	4b5a      	ldr	r3, [pc, #360]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f4:	4a59      	ldr	r2, [pc, #356]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031f6:	f023 0301 	bic.w	r3, r3, #1
 80031fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80031fc:	4b57      	ldr	r3, [pc, #348]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80031fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003200:	4a56      	ldr	r2, [pc, #344]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003202:	f023 0304 	bic.w	r3, r3, #4
 8003206:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	689b      	ldr	r3, [r3, #8]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003210:	f7fe f9ea 	bl	80015e8 <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003216:	e00a      	b.n	800322e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003218:	f7fe f9e6 	bl	80015e8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003226:	4293      	cmp	r3, r2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e0d7      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322e:	4b4b      	ldr	r3, [pc, #300]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003232:	f003 0302 	and.w	r3, r3, #2
 8003236:	2b00      	cmp	r3, #0
 8003238:	d0ee      	beq.n	8003218 <HAL_RCC_OscConfig+0x368>
 800323a:	e014      	b.n	8003266 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800323c:	f7fe f9d4 	bl	80015e8 <HAL_GetTick>
 8003240:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003242:	e00a      	b.n	800325a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003244:	f7fe f9d0 	bl	80015e8 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003252:	4293      	cmp	r3, r2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e0c1      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800325a:	4b40      	ldr	r3, [pc, #256]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1ee      	bne.n	8003244 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d105      	bne.n	8003278 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800326c:	4b3b      	ldr	r3, [pc, #236]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003270:	4a3a      	ldr	r2, [pc, #232]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003272:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003276:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f000 80ad 	beq.w	80033dc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003282:	4b36      	ldr	r3, [pc, #216]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
 800328a:	2b08      	cmp	r3, #8
 800328c:	d060      	beq.n	8003350 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d145      	bne.n	8003322 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003296:	4b33      	ldr	r3, [pc, #204]	@ (8003364 <HAL_RCC_OscConfig+0x4b4>)
 8003298:	2200      	movs	r2, #0
 800329a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fe f9a4 	bl	80015e8 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a4:	f7fe f9a0 	bl	80015e8 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b02      	cmp	r3, #2
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e093      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032b6:	4b29      	ldr	r3, [pc, #164]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69da      	ldr	r2, [r3, #28]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6a1b      	ldr	r3, [r3, #32]
 80032ca:	431a      	orrs	r2, r3
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032d0:	019b      	lsls	r3, r3, #6
 80032d2:	431a      	orrs	r2, r3
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d8:	085b      	lsrs	r3, r3, #1
 80032da:	3b01      	subs	r3, #1
 80032dc:	041b      	lsls	r3, r3, #16
 80032de:	431a      	orrs	r2, r3
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032e4:	061b      	lsls	r3, r3, #24
 80032e6:	431a      	orrs	r2, r3
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ec:	071b      	lsls	r3, r3, #28
 80032ee:	491b      	ldr	r1, [pc, #108]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032f4:	4b1b      	ldr	r3, [pc, #108]	@ (8003364 <HAL_RCC_OscConfig+0x4b4>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032fa:	f7fe f975 	bl	80015e8 <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003300:	e008      	b.n	8003314 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003302:	f7fe f971 	bl	80015e8 <HAL_GetTick>
 8003306:	4602      	mov	r2, r0
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	1ad3      	subs	r3, r2, r3
 800330c:	2b02      	cmp	r3, #2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e064      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0f0      	beq.n	8003302 <HAL_RCC_OscConfig+0x452>
 8003320:	e05c      	b.n	80033dc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003322:	4b10      	ldr	r3, [pc, #64]	@ (8003364 <HAL_RCC_OscConfig+0x4b4>)
 8003324:	2200      	movs	r2, #0
 8003326:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe f95e 	bl	80015e8 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe f95a 	bl	80015e8 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04d      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	4b06      	ldr	r3, [pc, #24]	@ (800335c <HAL_RCC_OscConfig+0x4ac>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x480>
 800334e:	e045      	b.n	80033dc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	2b01      	cmp	r3, #1
 8003356:	d107      	bne.n	8003368 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e040      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
 800335c:	40023800 	.word	0x40023800
 8003360:	40007000 	.word	0x40007000
 8003364:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003368:	4b1f      	ldr	r3, [pc, #124]	@ (80033e8 <HAL_RCC_OscConfig+0x538>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d030      	beq.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003380:	429a      	cmp	r2, r3
 8003382:	d129      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	429a      	cmp	r2, r3
 8003390:	d122      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003392:	68fa      	ldr	r2, [r7, #12]
 8003394:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003398:	4013      	ands	r3, r2
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800339e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d119      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ae:	085b      	lsrs	r3, r3, #1
 80033b0:	3b01      	subs	r3, #1
 80033b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d10f      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033c4:	429a      	cmp	r2, r3
 80033c6:	d107      	bne.n	80033d8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d001      	beq.n	80033dc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e000      	b.n	80033de <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80033dc:	2300      	movs	r3, #0
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3718      	adds	r7, #24
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	40023800 	.word	0x40023800

080033ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e041      	b.n	8003482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fd fe96 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f000 fad8 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e041      	b.n	8003520 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f839 	bl	8003528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f000 fa89 	bl	80039e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_TIM_PWM_Start+0x24>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e022      	b.n	80035a6 <HAL_TIM_PWM_Start+0x6a>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b04      	cmp	r3, #4
 8003564:	d109      	bne.n	800357a <HAL_TIM_PWM_Start+0x3e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e015      	b.n	80035a6 <HAL_TIM_PWM_Start+0x6a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start+0x58>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e008      	b.n	80035a6 <HAL_TIM_PWM_Start+0x6a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e07c      	b.n	80036a8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x82>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_PWM_Start+0xaa>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0x92>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_PWM_Start+0xaa>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Start+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_PWM_Start+0xaa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fcec 	bl	8003fcc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a2d      	ldr	r2, [pc, #180]	@ (80036b0 <HAL_TIM_PWM_Start+0x174>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d004      	beq.n	8003608 <HAL_TIM_PWM_Start+0xcc>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	4a2c      	ldr	r2, [pc, #176]	@ (80036b4 <HAL_TIM_PWM_Start+0x178>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d101      	bne.n	800360c <HAL_TIM_PWM_Start+0xd0>
 8003608:	2301      	movs	r3, #1
 800360a:	e000      	b.n	800360e <HAL_TIM_PWM_Start+0xd2>
 800360c:	2300      	movs	r3, #0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003620:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a22      	ldr	r2, [pc, #136]	@ (80036b0 <HAL_TIM_PWM_Start+0x174>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d022      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003634:	d01d      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a1f      	ldr	r2, [pc, #124]	@ (80036b8 <HAL_TIM_PWM_Start+0x17c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d018      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a1d      	ldr	r2, [pc, #116]	@ (80036bc <HAL_TIM_PWM_Start+0x180>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d013      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a1c      	ldr	r2, [pc, #112]	@ (80036c0 <HAL_TIM_PWM_Start+0x184>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d00e      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a16      	ldr	r2, [pc, #88]	@ (80036b4 <HAL_TIM_PWM_Start+0x178>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d009      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a18      	ldr	r2, [pc, #96]	@ (80036c4 <HAL_TIM_PWM_Start+0x188>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d004      	beq.n	8003672 <HAL_TIM_PWM_Start+0x136>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a16      	ldr	r2, [pc, #88]	@ (80036c8 <HAL_TIM_PWM_Start+0x18c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d111      	bne.n	8003696 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f003 0307 	and.w	r3, r3, #7
 800367c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2b06      	cmp	r3, #6
 8003682:	d010      	beq.n	80036a6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f042 0201 	orr.w	r2, r2, #1
 8003692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003694:	e007      	b.n	80036a6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f042 0201 	orr.w	r2, r2, #1
 80036a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036a6:	2300      	movs	r3, #0
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3710      	adds	r7, #16
 80036ac:	46bd      	mov	sp, r7
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40010000 	.word	0x40010000
 80036b4:	40010400 	.word	0x40010400
 80036b8:	40000400 	.word	0x40000400
 80036bc:	40000800 	.word	0x40000800
 80036c0:	40000c00 	.word	0x40000c00
 80036c4:	40014000 	.word	0x40014000
 80036c8:	40001800 	.word	0x40001800

080036cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b086      	sub	sp, #24
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d101      	bne.n	80036ea <HAL_TIM_PWM_ConfigChannel+0x1e>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e0ae      	b.n	8003848 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2201      	movs	r2, #1
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b0c      	cmp	r3, #12
 80036f6:	f200 809f 	bhi.w	8003838 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003700 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003700:	08003735 	.word	0x08003735
 8003704:	08003839 	.word	0x08003839
 8003708:	08003839 	.word	0x08003839
 800370c:	08003839 	.word	0x08003839
 8003710:	08003775 	.word	0x08003775
 8003714:	08003839 	.word	0x08003839
 8003718:	08003839 	.word	0x08003839
 800371c:	08003839 	.word	0x08003839
 8003720:	080037b7 	.word	0x080037b7
 8003724:	08003839 	.word	0x08003839
 8003728:	08003839 	.word	0x08003839
 800372c:	08003839 	.word	0x08003839
 8003730:	080037f7 	.word	0x080037f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	4618      	mov	r0, r3
 800373c:	f000 f9fc 	bl	8003b38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	699a      	ldr	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0208 	orr.w	r2, r2, #8
 800374e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699a      	ldr	r2, [r3, #24]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0204 	bic.w	r2, r2, #4
 800375e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6999      	ldr	r1, [r3, #24]
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	691a      	ldr	r2, [r3, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	619a      	str	r2, [r3, #24]
      break;
 8003772:	e064      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	4618      	mov	r0, r3
 800377c:	f000 fa4c 	bl	8003c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	699a      	ldr	r2, [r3, #24]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800378e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	699a      	ldr	r2, [r3, #24]
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800379e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6999      	ldr	r1, [r3, #24]
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	021a      	lsls	r2, r3, #8
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	430a      	orrs	r2, r1
 80037b2:	619a      	str	r2, [r3, #24]
      break;
 80037b4:	e043      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	4618      	mov	r0, r3
 80037be:	f000 faa1 	bl	8003d04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	69da      	ldr	r2, [r3, #28]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0208 	orr.w	r2, r2, #8
 80037d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0204 	bic.w	r2, r2, #4
 80037e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	69d9      	ldr	r1, [r3, #28]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	691a      	ldr	r2, [r3, #16]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	61da      	str	r2, [r3, #28]
      break;
 80037f4:	e023      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68b9      	ldr	r1, [r7, #8]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f000 faf5 	bl	8003dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	69da      	ldr	r2, [r3, #28]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003810:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	69da      	ldr	r2, [r3, #28]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003820:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	69d9      	ldr	r1, [r3, #28]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	021a      	lsls	r2, r3, #8
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	61da      	str	r2, [r3, #28]
      break;
 8003836:	e002      	b.n	800383e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003838:	2301      	movs	r3, #1
 800383a:	75fb      	strb	r3, [r7, #23]
      break;
 800383c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003846:	7dfb      	ldrb	r3, [r7, #23]
}
 8003848:	4618      	mov	r0, r3
 800384a:	3718      	adds	r7, #24
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800385a:	2300      	movs	r3, #0
 800385c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIM_ConfigClockSource+0x1c>
 8003868:	2302      	movs	r3, #2
 800386a:	e0b4      	b.n	80039d6 <HAL_TIM_ConfigClockSource+0x186>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800388a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003892:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	68ba      	ldr	r2, [r7, #8]
 800389a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a4:	d03e      	beq.n	8003924 <HAL_TIM_ConfigClockSource+0xd4>
 80038a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038aa:	f200 8087 	bhi.w	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b2:	f000 8086 	beq.w	80039c2 <HAL_TIM_ConfigClockSource+0x172>
 80038b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ba:	d87f      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038bc:	2b70      	cmp	r3, #112	@ 0x70
 80038be:	d01a      	beq.n	80038f6 <HAL_TIM_ConfigClockSource+0xa6>
 80038c0:	2b70      	cmp	r3, #112	@ 0x70
 80038c2:	d87b      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038c4:	2b60      	cmp	r3, #96	@ 0x60
 80038c6:	d050      	beq.n	800396a <HAL_TIM_ConfigClockSource+0x11a>
 80038c8:	2b60      	cmp	r3, #96	@ 0x60
 80038ca:	d877      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038cc:	2b50      	cmp	r3, #80	@ 0x50
 80038ce:	d03c      	beq.n	800394a <HAL_TIM_ConfigClockSource+0xfa>
 80038d0:	2b50      	cmp	r3, #80	@ 0x50
 80038d2:	d873      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	d058      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x13a>
 80038d8:	2b40      	cmp	r3, #64	@ 0x40
 80038da:	d86f      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b30      	cmp	r3, #48	@ 0x30
 80038de:	d064      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038e0:	2b30      	cmp	r3, #48	@ 0x30
 80038e2:	d86b      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d060      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038e8:	2b20      	cmp	r3, #32
 80038ea:	d867      	bhi.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d05c      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	2b10      	cmp	r3, #16
 80038f2:	d05a      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x15a>
 80038f4:	e062      	b.n	80039bc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003906:	f000 fb41 	bl	8003f8c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003918:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	609a      	str	r2, [r3, #8]
      break;
 8003922:	e04f      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003934:	f000 fb2a 	bl	8003f8c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003946:	609a      	str	r2, [r3, #8]
      break;
 8003948:	e03c      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003956:	461a      	mov	r2, r3
 8003958:	f000 fa9e 	bl	8003e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2150      	movs	r1, #80	@ 0x50
 8003962:	4618      	mov	r0, r3
 8003964:	f000 faf7 	bl	8003f56 <TIM_ITRx_SetConfig>
      break;
 8003968:	e02c      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003976:	461a      	mov	r2, r3
 8003978:	f000 fabd 	bl	8003ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2160      	movs	r1, #96	@ 0x60
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fae7 	bl	8003f56 <TIM_ITRx_SetConfig>
      break;
 8003988:	e01c      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 fa7e 	bl	8003e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2140      	movs	r1, #64	@ 0x40
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 fad7 	bl	8003f56 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e00c      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4619      	mov	r1, r3
 80039b4:	4610      	mov	r0, r2
 80039b6:	f000 face 	bl	8003f56 <TIM_ITRx_SetConfig>
      break;
 80039ba:	e003      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039bc:	2301      	movs	r3, #1
 80039be:	73fb      	strb	r3, [r7, #15]
      break;
 80039c0:	e000      	b.n	80039c4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039c2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
	...

080039e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b085      	sub	sp, #20
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a46      	ldr	r2, [pc, #280]	@ (8003b0c <TIM_Base_SetConfig+0x12c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d013      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039fe:	d00f      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	4a43      	ldr	r2, [pc, #268]	@ (8003b10 <TIM_Base_SetConfig+0x130>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d00b      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4a42      	ldr	r2, [pc, #264]	@ (8003b14 <TIM_Base_SetConfig+0x134>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d007      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	4a41      	ldr	r2, [pc, #260]	@ (8003b18 <TIM_Base_SetConfig+0x138>)
 8003a14:	4293      	cmp	r3, r2
 8003a16:	d003      	beq.n	8003a20 <TIM_Base_SetConfig+0x40>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a40      	ldr	r2, [pc, #256]	@ (8003b1c <TIM_Base_SetConfig+0x13c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d108      	bne.n	8003a32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	4a35      	ldr	r2, [pc, #212]	@ (8003b0c <TIM_Base_SetConfig+0x12c>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d02b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a40:	d027      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	4a32      	ldr	r2, [pc, #200]	@ (8003b10 <TIM_Base_SetConfig+0x130>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d023      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	4a31      	ldr	r2, [pc, #196]	@ (8003b14 <TIM_Base_SetConfig+0x134>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d01f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	4a30      	ldr	r2, [pc, #192]	@ (8003b18 <TIM_Base_SetConfig+0x138>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d01b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8003b1c <TIM_Base_SetConfig+0x13c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d017      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4a2e      	ldr	r2, [pc, #184]	@ (8003b20 <TIM_Base_SetConfig+0x140>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d013      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	4a2d      	ldr	r2, [pc, #180]	@ (8003b24 <TIM_Base_SetConfig+0x144>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d00f      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	4a2c      	ldr	r2, [pc, #176]	@ (8003b28 <TIM_Base_SetConfig+0x148>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d00b      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	@ (8003b2c <TIM_Base_SetConfig+0x14c>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d007      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	4a2a      	ldr	r2, [pc, #168]	@ (8003b30 <TIM_Base_SetConfig+0x150>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d003      	beq.n	8003a92 <TIM_Base_SetConfig+0xb2>
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	4a29      	ldr	r2, [pc, #164]	@ (8003b34 <TIM_Base_SetConfig+0x154>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d108      	bne.n	8003aa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	68db      	ldr	r3, [r3, #12]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	689a      	ldr	r2, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4a10      	ldr	r2, [pc, #64]	@ (8003b0c <TIM_Base_SetConfig+0x12c>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d003      	beq.n	8003ad8 <TIM_Base_SetConfig+0xf8>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	4a12      	ldr	r2, [pc, #72]	@ (8003b1c <TIM_Base_SetConfig+0x13c>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d103      	bne.n	8003ae0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b01      	cmp	r3, #1
 8003af0:	d105      	bne.n	8003afe <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	691b      	ldr	r3, [r3, #16]
 8003af6:	f023 0201 	bic.w	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	611a      	str	r2, [r3, #16]
  }
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
 8003b0a:	bf00      	nop
 8003b0c:	40010000 	.word	0x40010000
 8003b10:	40000400 	.word	0x40000400
 8003b14:	40000800 	.word	0x40000800
 8003b18:	40000c00 	.word	0x40000c00
 8003b1c:	40010400 	.word	0x40010400
 8003b20:	40014000 	.word	0x40014000
 8003b24:	40014400 	.word	0x40014400
 8003b28:	40014800 	.word	0x40014800
 8003b2c:	40001800 	.word	0x40001800
 8003b30:	40001c00 	.word	0x40001c00
 8003b34:	40002000 	.word	0x40002000

08003b38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b38:	b480      	push	{r7}
 8003b3a:	b087      	sub	sp, #28
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a1b      	ldr	r3, [r3, #32]
 8003b4c:	f023 0201 	bic.w	r2, r3, #1
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f023 0303 	bic.w	r3, r3, #3
 8003b6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	f023 0302 	bic.w	r3, r3, #2
 8003b80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	4a20      	ldr	r2, [pc, #128]	@ (8003c10 <TIM_OC1_SetConfig+0xd8>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d003      	beq.n	8003b9c <TIM_OC1_SetConfig+0x64>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a1f      	ldr	r2, [pc, #124]	@ (8003c14 <TIM_OC1_SetConfig+0xdc>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10c      	bne.n	8003bb6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0308 	bic.w	r3, r3, #8
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f023 0304 	bic.w	r3, r3, #4
 8003bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a15      	ldr	r2, [pc, #84]	@ (8003c10 <TIM_OC1_SetConfig+0xd8>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d003      	beq.n	8003bc6 <TIM_OC1_SetConfig+0x8e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a14      	ldr	r2, [pc, #80]	@ (8003c14 <TIM_OC1_SetConfig+0xdc>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d111      	bne.n	8003bea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bcc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bd4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	699b      	ldr	r3, [r3, #24]
 8003be4:	693a      	ldr	r2, [r7, #16]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	693a      	ldr	r2, [r7, #16]
 8003bee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	685a      	ldr	r2, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	697a      	ldr	r2, [r7, #20]
 8003c02:	621a      	str	r2, [r3, #32]
}
 8003c04:	bf00      	nop
 8003c06:	371c      	adds	r7, #28
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	40010000 	.word	0x40010000
 8003c14:	40010400 	.word	0x40010400

08003c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b087      	sub	sp, #28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f023 0210 	bic.w	r2, r3, #16
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	021b      	lsls	r3, r3, #8
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0320 	bic.w	r3, r3, #32
 8003c62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	011b      	lsls	r3, r3, #4
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	4a22      	ldr	r2, [pc, #136]	@ (8003cfc <TIM_OC2_SetConfig+0xe4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d003      	beq.n	8003c80 <TIM_OC2_SetConfig+0x68>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4a21      	ldr	r2, [pc, #132]	@ (8003d00 <TIM_OC2_SetConfig+0xe8>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d10d      	bne.n	8003c9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c9a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a17      	ldr	r2, [pc, #92]	@ (8003cfc <TIM_OC2_SetConfig+0xe4>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d003      	beq.n	8003cac <TIM_OC2_SetConfig+0x94>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <TIM_OC2_SetConfig+0xe8>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d113      	bne.n	8003cd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	699b      	ldr	r3, [r3, #24]
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	693a      	ldr	r2, [r7, #16]
 8003cd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685a      	ldr	r2, [r3, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	621a      	str	r2, [r3, #32]
}
 8003cee:	bf00      	nop
 8003cf0:	371c      	adds	r7, #28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	40010400 	.word	0x40010400

08003d04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f023 0303 	bic.w	r3, r3, #3
 8003d3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003d4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	021b      	lsls	r3, r3, #8
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a21      	ldr	r2, [pc, #132]	@ (8003de4 <TIM_OC3_SetConfig+0xe0>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_OC3_SetConfig+0x66>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a20      	ldr	r2, [pc, #128]	@ (8003de8 <TIM_OC3_SetConfig+0xe4>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d10d      	bne.n	8003d86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	021b      	lsls	r3, r3, #8
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a16      	ldr	r2, [pc, #88]	@ (8003de4 <TIM_OC3_SetConfig+0xe0>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d003      	beq.n	8003d96 <TIM_OC3_SetConfig+0x92>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a15      	ldr	r2, [pc, #84]	@ (8003de8 <TIM_OC3_SetConfig+0xe4>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d113      	bne.n	8003dbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003da4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	695b      	ldr	r3, [r3, #20]
 8003daa:	011b      	lsls	r3, r3, #4
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	011b      	lsls	r3, r3, #4
 8003db8:	693a      	ldr	r2, [r7, #16]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	693a      	ldr	r2, [r7, #16]
 8003dc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	68fa      	ldr	r2, [r7, #12]
 8003dc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	685a      	ldr	r2, [r3, #4]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	697a      	ldr	r2, [r7, #20]
 8003dd6:	621a      	str	r2, [r3, #32]
}
 8003dd8:	bf00      	nop
 8003dda:	371c      	adds	r7, #28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	40010000 	.word	0x40010000
 8003de8:	40010400 	.word	0x40010400

08003dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b087      	sub	sp, #28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a1b      	ldr	r3, [r3, #32]
 8003e00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	021b      	lsls	r3, r3, #8
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	689b      	ldr	r3, [r3, #8]
 8003e3c:	031b      	lsls	r3, r3, #12
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a12      	ldr	r2, [pc, #72]	@ (8003e90 <TIM_OC4_SetConfig+0xa4>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC4_SetConfig+0x68>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a11      	ldr	r2, [pc, #68]	@ (8003e94 <TIM_OC4_SetConfig+0xa8>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d109      	bne.n	8003e68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	695b      	ldr	r3, [r3, #20]
 8003e60:	019b      	lsls	r3, r3, #6
 8003e62:	697a      	ldr	r2, [r7, #20]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	697a      	ldr	r2, [r7, #20]
 8003e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	621a      	str	r2, [r3, #32]
}
 8003e82:	bf00      	nop
 8003e84:	371c      	adds	r7, #28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40010400 	.word	0x40010400

08003e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b087      	sub	sp, #28
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a1b      	ldr	r3, [r3, #32]
 8003ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	f023 0201 	bic.w	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	011b      	lsls	r3, r3, #4
 8003ec8:	693a      	ldr	r2, [r7, #16]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f023 030a 	bic.w	r3, r3, #10
 8003ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003ed6:	697a      	ldr	r2, [r7, #20]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4313      	orrs	r3, r2
 8003edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b087      	sub	sp, #28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	60f8      	str	r0, [r7, #12]
 8003efe:	60b9      	str	r1, [r7, #8]
 8003f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	f023 0210 	bic.w	r2, r3, #16
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	699b      	ldr	r3, [r3, #24]
 8003f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	031b      	lsls	r3, r3, #12
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003f32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	011b      	lsls	r3, r3, #4
 8003f38:	697a      	ldr	r2, [r7, #20]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	621a      	str	r2, [r3, #32]
}
 8003f4a:	bf00      	nop
 8003f4c:	371c      	adds	r7, #28
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr

08003f56 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f56:	b480      	push	{r7}
 8003f58:	b085      	sub	sp, #20
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	6078      	str	r0, [r7, #4]
 8003f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f6c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f6e:	683a      	ldr	r2, [r7, #0]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f043 0307 	orr.w	r3, r3, #7
 8003f78:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	609a      	str	r2, [r3, #8]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b087      	sub	sp, #28
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	689b      	ldr	r3, [r3, #8]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fa6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	021a      	lsls	r2, r3, #8
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	609a      	str	r2, [r3, #8]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b087      	sub	sp, #28
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	f003 031f 	and.w	r3, r3, #31
 8003fde:	2201      	movs	r2, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6a1a      	ldr	r2, [r3, #32]
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	43db      	mvns	r3, r3
 8003fee:	401a      	ands	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1a      	ldr	r2, [r3, #32]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
 8003ffa:	f003 031f 	and.w	r3, r3, #31
 8003ffe:	6879      	ldr	r1, [r7, #4]
 8004000:	fa01 f303 	lsl.w	r3, r1, r3
 8004004:	431a      	orrs	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	621a      	str	r2, [r3, #32]
}
 800400a:	bf00      	nop
 800400c:	371c      	adds	r7, #28
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
	...

08004018 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004028:	2b01      	cmp	r3, #1
 800402a:	d101      	bne.n	8004030 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800402c:	2302      	movs	r3, #2
 800402e:	e05a      	b.n	80040e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2201      	movs	r2, #1
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2202      	movs	r2, #2
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004056:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	4313      	orrs	r3, r2
 8004060:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68fa      	ldr	r2, [r7, #12]
 8004068:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a21      	ldr	r2, [pc, #132]	@ (80040f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d022      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800407c:	d01d      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1d      	ldr	r2, [pc, #116]	@ (80040f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d018      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1b      	ldr	r2, [pc, #108]	@ (80040fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d013      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1a      	ldr	r2, [pc, #104]	@ (8004100 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00e      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a18      	ldr	r2, [pc, #96]	@ (8004104 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d009      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a17      	ldr	r2, [pc, #92]	@ (8004108 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d004      	beq.n	80040ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a15      	ldr	r2, [pc, #84]	@ (800410c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d10c      	bne.n	80040d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40010400 	.word	0x40010400
 8004108:	40014000 	.word	0x40014000
 800410c:	40001800 	.word	0x40001800

08004110 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800411a:	2300      	movs	r3, #0
 800411c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004128:	2302      	movs	r3, #2
 800412a:	e03d      	b.n	80041a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	68db      	ldr	r3, [r3, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	4313      	orrs	r3, r2
 800414e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4313      	orrs	r3, r2
 800416a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004172:	683b      	ldr	r3, [r7, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80041a6:	2300      	movs	r3, #0
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3714      	adds	r7, #20
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b082      	sub	sp, #8
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d101      	bne.n	80041c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e042      	b.n	800424c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041cc:	b2db      	uxtb	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d106      	bne.n	80041e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f7fd f8e0 	bl	80013a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2224      	movs	r2, #36	@ 0x24
 80041e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 f82b 	bl	8004254 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800420c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	695a      	ldr	r2, [r3, #20]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800421c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800422c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2220      	movs	r2, #32
 8004240:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2200      	movs	r2, #0
 8004248:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800424a:	2300      	movs	r3, #0
}
 800424c:	4618      	mov	r0, r3
 800424e:	3708      	adds	r7, #8
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004254:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004258:	b0c0      	sub	sp, #256	@ 0x100
 800425a:	af00      	add	r7, sp, #0
 800425c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	691b      	ldr	r3, [r3, #16]
 8004268:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800426c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004270:	68d9      	ldr	r1, [r3, #12]
 8004272:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	ea40 0301 	orr.w	r3, r0, r1
 800427c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	689a      	ldr	r2, [r3, #8]
 8004284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	431a      	orrs	r2, r3
 800428c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	431a      	orrs	r2, r3
 8004294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004298:	69db      	ldr	r3, [r3, #28]
 800429a:	4313      	orrs	r3, r2
 800429c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80042a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80042ac:	f021 010c 	bic.w	r1, r1, #12
 80042b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80042ba:	430b      	orrs	r3, r1
 80042bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80042be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	695b      	ldr	r3, [r3, #20]
 80042c6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80042ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ce:	6999      	ldr	r1, [r3, #24]
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	ea40 0301 	orr.w	r3, r0, r1
 80042da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80042dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b8f      	ldr	r3, [pc, #572]	@ (8004520 <UART_SetConfig+0x2cc>)
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d005      	beq.n	80042f4 <UART_SetConfig+0xa0>
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	4b8d      	ldr	r3, [pc, #564]	@ (8004524 <UART_SetConfig+0x2d0>)
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d104      	bne.n	80042fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80042f4:	f7fe fb98 	bl	8002a28 <HAL_RCC_GetPCLK2Freq>
 80042f8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80042fc:	e003      	b.n	8004306 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80042fe:	f7fe fb7f 	bl	8002a00 <HAL_RCC_GetPCLK1Freq>
 8004302:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004310:	f040 810c 	bne.w	800452c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004314:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004318:	2200      	movs	r2, #0
 800431a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800431e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004322:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004326:	4622      	mov	r2, r4
 8004328:	462b      	mov	r3, r5
 800432a:	1891      	adds	r1, r2, r2
 800432c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800432e:	415b      	adcs	r3, r3
 8004330:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004332:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004336:	4621      	mov	r1, r4
 8004338:	eb12 0801 	adds.w	r8, r2, r1
 800433c:	4629      	mov	r1, r5
 800433e:	eb43 0901 	adc.w	r9, r3, r1
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004356:	4690      	mov	r8, r2
 8004358:	4699      	mov	r9, r3
 800435a:	4623      	mov	r3, r4
 800435c:	eb18 0303 	adds.w	r3, r8, r3
 8004360:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004364:	462b      	mov	r3, r5
 8004366:	eb49 0303 	adc.w	r3, r9, r3
 800436a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800436e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800437a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800437e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004382:	460b      	mov	r3, r1
 8004384:	18db      	adds	r3, r3, r3
 8004386:	653b      	str	r3, [r7, #80]	@ 0x50
 8004388:	4613      	mov	r3, r2
 800438a:	eb42 0303 	adc.w	r3, r2, r3
 800438e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004390:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004394:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004398:	f7fb ff34 	bl	8000204 <__aeabi_uldivmod>
 800439c:	4602      	mov	r2, r0
 800439e:	460b      	mov	r3, r1
 80043a0:	4b61      	ldr	r3, [pc, #388]	@ (8004528 <UART_SetConfig+0x2d4>)
 80043a2:	fba3 2302 	umull	r2, r3, r3, r2
 80043a6:	095b      	lsrs	r3, r3, #5
 80043a8:	011c      	lsls	r4, r3, #4
 80043aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043ae:	2200      	movs	r2, #0
 80043b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043b4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80043b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	1891      	adds	r1, r2, r2
 80043c2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80043c4:	415b      	adcs	r3, r3
 80043c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80043cc:	4641      	mov	r1, r8
 80043ce:	eb12 0a01 	adds.w	sl, r2, r1
 80043d2:	4649      	mov	r1, r9
 80043d4:	eb43 0b01 	adc.w	fp, r3, r1
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	f04f 0300 	mov.w	r3, #0
 80043e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80043e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80043e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80043ec:	4692      	mov	sl, r2
 80043ee:	469b      	mov	fp, r3
 80043f0:	4643      	mov	r3, r8
 80043f2:	eb1a 0303 	adds.w	r3, sl, r3
 80043f6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80043fa:	464b      	mov	r3, r9
 80043fc:	eb4b 0303 	adc.w	r3, fp, r3
 8004400:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004404:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004410:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004414:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004418:	460b      	mov	r3, r1
 800441a:	18db      	adds	r3, r3, r3
 800441c:	643b      	str	r3, [r7, #64]	@ 0x40
 800441e:	4613      	mov	r3, r2
 8004420:	eb42 0303 	adc.w	r3, r2, r3
 8004424:	647b      	str	r3, [r7, #68]	@ 0x44
 8004426:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800442a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800442e:	f7fb fee9 	bl	8000204 <__aeabi_uldivmod>
 8004432:	4602      	mov	r2, r0
 8004434:	460b      	mov	r3, r1
 8004436:	4611      	mov	r1, r2
 8004438:	4b3b      	ldr	r3, [pc, #236]	@ (8004528 <UART_SetConfig+0x2d4>)
 800443a:	fba3 2301 	umull	r2, r3, r3, r1
 800443e:	095b      	lsrs	r3, r3, #5
 8004440:	2264      	movs	r2, #100	@ 0x64
 8004442:	fb02 f303 	mul.w	r3, r2, r3
 8004446:	1acb      	subs	r3, r1, r3
 8004448:	00db      	lsls	r3, r3, #3
 800444a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800444e:	4b36      	ldr	r3, [pc, #216]	@ (8004528 <UART_SetConfig+0x2d4>)
 8004450:	fba3 2302 	umull	r2, r3, r3, r2
 8004454:	095b      	lsrs	r3, r3, #5
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800445c:	441c      	add	r4, r3
 800445e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004462:	2200      	movs	r2, #0
 8004464:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004468:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800446c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004470:	4642      	mov	r2, r8
 8004472:	464b      	mov	r3, r9
 8004474:	1891      	adds	r1, r2, r2
 8004476:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004478:	415b      	adcs	r3, r3
 800447a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800447c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004480:	4641      	mov	r1, r8
 8004482:	1851      	adds	r1, r2, r1
 8004484:	6339      	str	r1, [r7, #48]	@ 0x30
 8004486:	4649      	mov	r1, r9
 8004488:	414b      	adcs	r3, r1
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004498:	4659      	mov	r1, fp
 800449a:	00cb      	lsls	r3, r1, #3
 800449c:	4651      	mov	r1, sl
 800449e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044a2:	4651      	mov	r1, sl
 80044a4:	00ca      	lsls	r2, r1, #3
 80044a6:	4610      	mov	r0, r2
 80044a8:	4619      	mov	r1, r3
 80044aa:	4603      	mov	r3, r0
 80044ac:	4642      	mov	r2, r8
 80044ae:	189b      	adds	r3, r3, r2
 80044b0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80044b4:	464b      	mov	r3, r9
 80044b6:	460a      	mov	r2, r1
 80044b8:	eb42 0303 	adc.w	r3, r2, r3
 80044bc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80044c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044c4:	685b      	ldr	r3, [r3, #4]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80044cc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80044d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80044d4:	460b      	mov	r3, r1
 80044d6:	18db      	adds	r3, r3, r3
 80044d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80044da:	4613      	mov	r3, r2
 80044dc:	eb42 0303 	adc.w	r3, r2, r3
 80044e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80044e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80044e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80044ea:	f7fb fe8b 	bl	8000204 <__aeabi_uldivmod>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004528 <UART_SetConfig+0x2d4>)
 80044f4:	fba3 1302 	umull	r1, r3, r3, r2
 80044f8:	095b      	lsrs	r3, r3, #5
 80044fa:	2164      	movs	r1, #100	@ 0x64
 80044fc:	fb01 f303 	mul.w	r3, r1, r3
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	00db      	lsls	r3, r3, #3
 8004504:	3332      	adds	r3, #50	@ 0x32
 8004506:	4a08      	ldr	r2, [pc, #32]	@ (8004528 <UART_SetConfig+0x2d4>)
 8004508:	fba2 2303 	umull	r2, r3, r2, r3
 800450c:	095b      	lsrs	r3, r3, #5
 800450e:	f003 0207 	and.w	r2, r3, #7
 8004512:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4422      	add	r2, r4
 800451a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800451c:	e106      	b.n	800472c <UART_SetConfig+0x4d8>
 800451e:	bf00      	nop
 8004520:	40011000 	.word	0x40011000
 8004524:	40011400 	.word	0x40011400
 8004528:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800452c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004530:	2200      	movs	r2, #0
 8004532:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004536:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800453a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800453e:	4642      	mov	r2, r8
 8004540:	464b      	mov	r3, r9
 8004542:	1891      	adds	r1, r2, r2
 8004544:	6239      	str	r1, [r7, #32]
 8004546:	415b      	adcs	r3, r3
 8004548:	627b      	str	r3, [r7, #36]	@ 0x24
 800454a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800454e:	4641      	mov	r1, r8
 8004550:	1854      	adds	r4, r2, r1
 8004552:	4649      	mov	r1, r9
 8004554:	eb43 0501 	adc.w	r5, r3, r1
 8004558:	f04f 0200 	mov.w	r2, #0
 800455c:	f04f 0300 	mov.w	r3, #0
 8004560:	00eb      	lsls	r3, r5, #3
 8004562:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004566:	00e2      	lsls	r2, r4, #3
 8004568:	4614      	mov	r4, r2
 800456a:	461d      	mov	r5, r3
 800456c:	4643      	mov	r3, r8
 800456e:	18e3      	adds	r3, r4, r3
 8004570:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004574:	464b      	mov	r3, r9
 8004576:	eb45 0303 	adc.w	r3, r5, r3
 800457a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800457e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800458a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800458e:	f04f 0200 	mov.w	r2, #0
 8004592:	f04f 0300 	mov.w	r3, #0
 8004596:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800459a:	4629      	mov	r1, r5
 800459c:	008b      	lsls	r3, r1, #2
 800459e:	4621      	mov	r1, r4
 80045a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045a4:	4621      	mov	r1, r4
 80045a6:	008a      	lsls	r2, r1, #2
 80045a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80045ac:	f7fb fe2a 	bl	8000204 <__aeabi_uldivmod>
 80045b0:	4602      	mov	r2, r0
 80045b2:	460b      	mov	r3, r1
 80045b4:	4b60      	ldr	r3, [pc, #384]	@ (8004738 <UART_SetConfig+0x4e4>)
 80045b6:	fba3 2302 	umull	r2, r3, r3, r2
 80045ba:	095b      	lsrs	r3, r3, #5
 80045bc:	011c      	lsls	r4, r3, #4
 80045be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045c2:	2200      	movs	r2, #0
 80045c4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80045c8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80045cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80045d0:	4642      	mov	r2, r8
 80045d2:	464b      	mov	r3, r9
 80045d4:	1891      	adds	r1, r2, r2
 80045d6:	61b9      	str	r1, [r7, #24]
 80045d8:	415b      	adcs	r3, r3
 80045da:	61fb      	str	r3, [r7, #28]
 80045dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045e0:	4641      	mov	r1, r8
 80045e2:	1851      	adds	r1, r2, r1
 80045e4:	6139      	str	r1, [r7, #16]
 80045e6:	4649      	mov	r1, r9
 80045e8:	414b      	adcs	r3, r1
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	f04f 0200 	mov.w	r2, #0
 80045f0:	f04f 0300 	mov.w	r3, #0
 80045f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80045f8:	4659      	mov	r1, fp
 80045fa:	00cb      	lsls	r3, r1, #3
 80045fc:	4651      	mov	r1, sl
 80045fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004602:	4651      	mov	r1, sl
 8004604:	00ca      	lsls	r2, r1, #3
 8004606:	4610      	mov	r0, r2
 8004608:	4619      	mov	r1, r3
 800460a:	4603      	mov	r3, r0
 800460c:	4642      	mov	r2, r8
 800460e:	189b      	adds	r3, r3, r2
 8004610:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004614:	464b      	mov	r3, r9
 8004616:	460a      	mov	r2, r1
 8004618:	eb42 0303 	adc.w	r3, r2, r3
 800461c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	67bb      	str	r3, [r7, #120]	@ 0x78
 800462a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004638:	4649      	mov	r1, r9
 800463a:	008b      	lsls	r3, r1, #2
 800463c:	4641      	mov	r1, r8
 800463e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004642:	4641      	mov	r1, r8
 8004644:	008a      	lsls	r2, r1, #2
 8004646:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800464a:	f7fb fddb 	bl	8000204 <__aeabi_uldivmod>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4611      	mov	r1, r2
 8004654:	4b38      	ldr	r3, [pc, #224]	@ (8004738 <UART_SetConfig+0x4e4>)
 8004656:	fba3 2301 	umull	r2, r3, r3, r1
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2264      	movs	r2, #100	@ 0x64
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	1acb      	subs	r3, r1, r3
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	3332      	adds	r3, #50	@ 0x32
 8004668:	4a33      	ldr	r2, [pc, #204]	@ (8004738 <UART_SetConfig+0x4e4>)
 800466a:	fba2 2303 	umull	r2, r3, r2, r3
 800466e:	095b      	lsrs	r3, r3, #5
 8004670:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004674:	441c      	add	r4, r3
 8004676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800467a:	2200      	movs	r2, #0
 800467c:	673b      	str	r3, [r7, #112]	@ 0x70
 800467e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004680:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004684:	4642      	mov	r2, r8
 8004686:	464b      	mov	r3, r9
 8004688:	1891      	adds	r1, r2, r2
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	415b      	adcs	r3, r3
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004694:	4641      	mov	r1, r8
 8004696:	1851      	adds	r1, r2, r1
 8004698:	6039      	str	r1, [r7, #0]
 800469a:	4649      	mov	r1, r9
 800469c:	414b      	adcs	r3, r1
 800469e:	607b      	str	r3, [r7, #4]
 80046a0:	f04f 0200 	mov.w	r2, #0
 80046a4:	f04f 0300 	mov.w	r3, #0
 80046a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046ac:	4659      	mov	r1, fp
 80046ae:	00cb      	lsls	r3, r1, #3
 80046b0:	4651      	mov	r1, sl
 80046b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046b6:	4651      	mov	r1, sl
 80046b8:	00ca      	lsls	r2, r1, #3
 80046ba:	4610      	mov	r0, r2
 80046bc:	4619      	mov	r1, r3
 80046be:	4603      	mov	r3, r0
 80046c0:	4642      	mov	r2, r8
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046c6:	464b      	mov	r3, r9
 80046c8:	460a      	mov	r2, r1
 80046ca:	eb42 0303 	adc.w	r3, r2, r3
 80046ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80046d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80046da:	667a      	str	r2, [r7, #100]	@ 0x64
 80046dc:	f04f 0200 	mov.w	r2, #0
 80046e0:	f04f 0300 	mov.w	r3, #0
 80046e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80046e8:	4649      	mov	r1, r9
 80046ea:	008b      	lsls	r3, r1, #2
 80046ec:	4641      	mov	r1, r8
 80046ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80046f2:	4641      	mov	r1, r8
 80046f4:	008a      	lsls	r2, r1, #2
 80046f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80046fa:	f7fb fd83 	bl	8000204 <__aeabi_uldivmod>
 80046fe:	4602      	mov	r2, r0
 8004700:	460b      	mov	r3, r1
 8004702:	4b0d      	ldr	r3, [pc, #52]	@ (8004738 <UART_SetConfig+0x4e4>)
 8004704:	fba3 1302 	umull	r1, r3, r3, r2
 8004708:	095b      	lsrs	r3, r3, #5
 800470a:	2164      	movs	r1, #100	@ 0x64
 800470c:	fb01 f303 	mul.w	r3, r1, r3
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	3332      	adds	r3, #50	@ 0x32
 8004716:	4a08      	ldr	r2, [pc, #32]	@ (8004738 <UART_SetConfig+0x4e4>)
 8004718:	fba2 2303 	umull	r2, r3, r2, r3
 800471c:	095b      	lsrs	r3, r3, #5
 800471e:	f003 020f 	and.w	r2, r3, #15
 8004722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4422      	add	r2, r4
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004732:	46bd      	mov	sp, r7
 8004734:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004738:	51eb851f 	.word	0x51eb851f

0800473c <memset>:
 800473c:	4402      	add	r2, r0
 800473e:	4603      	mov	r3, r0
 8004740:	4293      	cmp	r3, r2
 8004742:	d100      	bne.n	8004746 <memset+0xa>
 8004744:	4770      	bx	lr
 8004746:	f803 1b01 	strb.w	r1, [r3], #1
 800474a:	e7f9      	b.n	8004740 <memset+0x4>

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4d0d      	ldr	r5, [pc, #52]	@ (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	@ (8004788 <__libc_init_array+0x3c>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2600      	movs	r6, #0
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4d0b      	ldr	r5, [pc, #44]	@ (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	@ (8004790 <__libc_init_array+0x44>)
 8004760:	f000 f818 	bl	8004794 <_init>
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2600      	movs	r6, #0
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	080047cc 	.word	0x080047cc
 8004788:	080047cc 	.word	0x080047cc
 800478c:	080047cc 	.word	0x080047cc
 8004790:	080047d0 	.word	0x080047d0

08004794 <_init>:
 8004794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004796:	bf00      	nop
 8004798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800479a:	bc08      	pop	{r3}
 800479c:	469e      	mov	lr, r3
 800479e:	4770      	bx	lr

080047a0 <_fini>:
 80047a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a2:	bf00      	nop
 80047a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047a6:	bc08      	pop	{r3}
 80047a8:	469e      	mov	lr, r3
 80047aa:	4770      	bx	lr
