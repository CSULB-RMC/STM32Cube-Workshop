
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004560  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004724  08004724  00005724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800473c  0800473c  0000600c  2**0
                  CONTENTS
  4 .ARM          00000008  0800473c  0800473c  0000573c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004744  08004744  0000600c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004744  08004744  00005744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004748  08004748  00005748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800474c  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000000c  08004758  0000600c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c0  08004758  000061c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000600c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e768  00000000  00000000  0000603c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9a  00000000  00000000  000147a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00016640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a8e  00000000  00000000  000173b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000215ce  00000000  00000000  00017e3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f40f  00000000  00000000  0003940c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf9d2  00000000  00000000  0004881b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001181ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000396c  00000000  00000000  00118230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  0011bb9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	0800470c 	.word	0x0800470c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	0800470c 	.word	0x0800470c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000218:	f000 b96a 	b.w	80004f0 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	460c      	mov	r4, r1
 800023c:	2b00      	cmp	r3, #0
 800023e:	d14e      	bne.n	80002de <__udivmoddi4+0xaa>
 8000240:	4694      	mov	ip, r2
 8000242:	458c      	cmp	ip, r1
 8000244:	4686      	mov	lr, r0
 8000246:	fab2 f282 	clz	r2, r2
 800024a:	d962      	bls.n	8000312 <__udivmoddi4+0xde>
 800024c:	b14a      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 800024e:	f1c2 0320 	rsb	r3, r2, #32
 8000252:	4091      	lsls	r1, r2
 8000254:	fa20 f303 	lsr.w	r3, r0, r3
 8000258:	fa0c fc02 	lsl.w	ip, ip, r2
 800025c:	4319      	orrs	r1, r3
 800025e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000262:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000266:	fa1f f68c 	uxth.w	r6, ip
 800026a:	fbb1 f4f7 	udiv	r4, r1, r7
 800026e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000272:	fb07 1114 	mls	r1, r7, r4, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb04 f106 	mul.w	r1, r4, r6
 800027e:	4299      	cmp	r1, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x64>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800028a:	f080 8112 	bcs.w	80004b2 <__udivmoddi4+0x27e>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 810f 	bls.w	80004b2 <__udivmoddi4+0x27e>
 8000294:	3c02      	subs	r4, #2
 8000296:	4463      	add	r3, ip
 8000298:	1a59      	subs	r1, r3, r1
 800029a:	fa1f f38e 	uxth.w	r3, lr
 800029e:	fbb1 f0f7 	udiv	r0, r1, r7
 80002a2:	fb07 1110 	mls	r1, r7, r0, r1
 80002a6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002aa:	fb00 f606 	mul.w	r6, r0, r6
 80002ae:	429e      	cmp	r6, r3
 80002b0:	d90a      	bls.n	80002c8 <__udivmoddi4+0x94>
 80002b2:	eb1c 0303 	adds.w	r3, ip, r3
 80002b6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 80002ba:	f080 80fc 	bcs.w	80004b6 <__udivmoddi4+0x282>
 80002be:	429e      	cmp	r6, r3
 80002c0:	f240 80f9 	bls.w	80004b6 <__udivmoddi4+0x282>
 80002c4:	4463      	add	r3, ip
 80002c6:	3802      	subs	r0, #2
 80002c8:	1b9b      	subs	r3, r3, r6
 80002ca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002ce:	2100      	movs	r1, #0
 80002d0:	b11d      	cbz	r5, 80002da <__udivmoddi4+0xa6>
 80002d2:	40d3      	lsrs	r3, r2
 80002d4:	2200      	movs	r2, #0
 80002d6:	e9c5 3200 	strd	r3, r2, [r5]
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	428b      	cmp	r3, r1
 80002e0:	d905      	bls.n	80002ee <__udivmoddi4+0xba>
 80002e2:	b10d      	cbz	r5, 80002e8 <__udivmoddi4+0xb4>
 80002e4:	e9c5 0100 	strd	r0, r1, [r5]
 80002e8:	2100      	movs	r1, #0
 80002ea:	4608      	mov	r0, r1
 80002ec:	e7f5      	b.n	80002da <__udivmoddi4+0xa6>
 80002ee:	fab3 f183 	clz	r1, r3
 80002f2:	2900      	cmp	r1, #0
 80002f4:	d146      	bne.n	8000384 <__udivmoddi4+0x150>
 80002f6:	42a3      	cmp	r3, r4
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xcc>
 80002fa:	4290      	cmp	r0, r2
 80002fc:	f0c0 80f0 	bcc.w	80004e0 <__udivmoddi4+0x2ac>
 8000300:	1a86      	subs	r6, r0, r2
 8000302:	eb64 0303 	sbc.w	r3, r4, r3
 8000306:	2001      	movs	r0, #1
 8000308:	2d00      	cmp	r5, #0
 800030a:	d0e6      	beq.n	80002da <__udivmoddi4+0xa6>
 800030c:	e9c5 6300 	strd	r6, r3, [r5]
 8000310:	e7e3      	b.n	80002da <__udivmoddi4+0xa6>
 8000312:	2a00      	cmp	r2, #0
 8000314:	f040 8090 	bne.w	8000438 <__udivmoddi4+0x204>
 8000318:	eba1 040c 	sub.w	r4, r1, ip
 800031c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000320:	fa1f f78c 	uxth.w	r7, ip
 8000324:	2101      	movs	r1, #1
 8000326:	fbb4 f6f8 	udiv	r6, r4, r8
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb08 4416 	mls	r4, r8, r6, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb07 f006 	mul.w	r0, r7, r6
 800033a:	4298      	cmp	r0, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x11c>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x11a>
 8000348:	4298      	cmp	r0, r3
 800034a:	f200 80cd 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 800034e:	4626      	mov	r6, r4
 8000350:	1a1c      	subs	r4, r3, r0
 8000352:	fa1f f38e 	uxth.w	r3, lr
 8000356:	fbb4 f0f8 	udiv	r0, r4, r8
 800035a:	fb08 4410 	mls	r4, r8, r0, r4
 800035e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000362:	fb00 f707 	mul.w	r7, r0, r7
 8000366:	429f      	cmp	r7, r3
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x148>
 800036a:	eb1c 0303 	adds.w	r3, ip, r3
 800036e:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x146>
 8000374:	429f      	cmp	r7, r3
 8000376:	f200 80b0 	bhi.w	80004da <__udivmoddi4+0x2a6>
 800037a:	4620      	mov	r0, r4
 800037c:	1bdb      	subs	r3, r3, r7
 800037e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000382:	e7a5      	b.n	80002d0 <__udivmoddi4+0x9c>
 8000384:	f1c1 0620 	rsb	r6, r1, #32
 8000388:	408b      	lsls	r3, r1
 800038a:	fa22 f706 	lsr.w	r7, r2, r6
 800038e:	431f      	orrs	r7, r3
 8000390:	fa20 fc06 	lsr.w	ip, r0, r6
 8000394:	fa04 f301 	lsl.w	r3, r4, r1
 8000398:	ea43 030c 	orr.w	r3, r3, ip
 800039c:	40f4      	lsrs	r4, r6
 800039e:	fa00 f801 	lsl.w	r8, r0, r1
 80003a2:	0c38      	lsrs	r0, r7, #16
 80003a4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003a8:	fbb4 fef0 	udiv	lr, r4, r0
 80003ac:	fa1f fc87 	uxth.w	ip, r7
 80003b0:	fb00 441e 	mls	r4, r0, lr, r4
 80003b4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b8:	fb0e f90c 	mul.w	r9, lr, ip
 80003bc:	45a1      	cmp	r9, r4
 80003be:	fa02 f201 	lsl.w	r2, r2, r1
 80003c2:	d90a      	bls.n	80003da <__udivmoddi4+0x1a6>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 80003ca:	f080 8084 	bcs.w	80004d6 <__udivmoddi4+0x2a2>
 80003ce:	45a1      	cmp	r9, r4
 80003d0:	f240 8081 	bls.w	80004d6 <__udivmoddi4+0x2a2>
 80003d4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003d8:	443c      	add	r4, r7
 80003da:	eba4 0409 	sub.w	r4, r4, r9
 80003de:	fa1f f983 	uxth.w	r9, r3
 80003e2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003e6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ee:	fb03 fc0c 	mul.w	ip, r3, ip
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d907      	bls.n	8000406 <__udivmoddi4+0x1d2>
 80003f6:	193c      	adds	r4, r7, r4
 80003f8:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003fc:	d267      	bcs.n	80004ce <__udivmoddi4+0x29a>
 80003fe:	45a4      	cmp	ip, r4
 8000400:	d965      	bls.n	80004ce <__udivmoddi4+0x29a>
 8000402:	3b02      	subs	r3, #2
 8000404:	443c      	add	r4, r7
 8000406:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800040a:	fba0 9302 	umull	r9, r3, r0, r2
 800040e:	eba4 040c 	sub.w	r4, r4, ip
 8000412:	429c      	cmp	r4, r3
 8000414:	46ce      	mov	lr, r9
 8000416:	469c      	mov	ip, r3
 8000418:	d351      	bcc.n	80004be <__udivmoddi4+0x28a>
 800041a:	d04e      	beq.n	80004ba <__udivmoddi4+0x286>
 800041c:	b155      	cbz	r5, 8000434 <__udivmoddi4+0x200>
 800041e:	ebb8 030e 	subs.w	r3, r8, lr
 8000422:	eb64 040c 	sbc.w	r4, r4, ip
 8000426:	fa04 f606 	lsl.w	r6, r4, r6
 800042a:	40cb      	lsrs	r3, r1
 800042c:	431e      	orrs	r6, r3
 800042e:	40cc      	lsrs	r4, r1
 8000430:	e9c5 6400 	strd	r6, r4, [r5]
 8000434:	2100      	movs	r1, #0
 8000436:	e750      	b.n	80002da <__udivmoddi4+0xa6>
 8000438:	f1c2 0320 	rsb	r3, r2, #32
 800043c:	fa20 f103 	lsr.w	r1, r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa24 f303 	lsr.w	r3, r4, r3
 8000448:	4094      	lsls	r4, r2
 800044a:	430c      	orrs	r4, r1
 800044c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000450:	fa00 fe02 	lsl.w	lr, r0, r2
 8000454:	fa1f f78c 	uxth.w	r7, ip
 8000458:	fbb3 f0f8 	udiv	r0, r3, r8
 800045c:	fb08 3110 	mls	r1, r8, r0, r3
 8000460:	0c23      	lsrs	r3, r4, #16
 8000462:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000466:	fb00 f107 	mul.w	r1, r0, r7
 800046a:	4299      	cmp	r1, r3
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x24c>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000476:	d22c      	bcs.n	80004d2 <__udivmoddi4+0x29e>
 8000478:	4299      	cmp	r1, r3
 800047a:	d92a      	bls.n	80004d2 <__udivmoddi4+0x29e>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1a5b      	subs	r3, r3, r1
 8000482:	b2a4      	uxth	r4, r4
 8000484:	fbb3 f1f8 	udiv	r1, r3, r8
 8000488:	fb08 3311 	mls	r3, r8, r1, r3
 800048c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000490:	fb01 f307 	mul.w	r3, r1, r7
 8000494:	42a3      	cmp	r3, r4
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x276>
 8000498:	eb1c 0404 	adds.w	r4, ip, r4
 800049c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 80004a0:	d213      	bcs.n	80004ca <__udivmoddi4+0x296>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d911      	bls.n	80004ca <__udivmoddi4+0x296>
 80004a6:	3902      	subs	r1, #2
 80004a8:	4464      	add	r4, ip
 80004aa:	1ae4      	subs	r4, r4, r3
 80004ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004b0:	e739      	b.n	8000326 <__udivmoddi4+0xf2>
 80004b2:	4604      	mov	r4, r0
 80004b4:	e6f0      	b.n	8000298 <__udivmoddi4+0x64>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e706      	b.n	80002c8 <__udivmoddi4+0x94>
 80004ba:	45c8      	cmp	r8, r9
 80004bc:	d2ae      	bcs.n	800041c <__udivmoddi4+0x1e8>
 80004be:	ebb9 0e02 	subs.w	lr, r9, r2
 80004c2:	eb63 0c07 	sbc.w	ip, r3, r7
 80004c6:	3801      	subs	r0, #1
 80004c8:	e7a8      	b.n	800041c <__udivmoddi4+0x1e8>
 80004ca:	4631      	mov	r1, r6
 80004cc:	e7ed      	b.n	80004aa <__udivmoddi4+0x276>
 80004ce:	4603      	mov	r3, r0
 80004d0:	e799      	b.n	8000406 <__udivmoddi4+0x1d2>
 80004d2:	4630      	mov	r0, r6
 80004d4:	e7d4      	b.n	8000480 <__udivmoddi4+0x24c>
 80004d6:	46d6      	mov	lr, sl
 80004d8:	e77f      	b.n	80003da <__udivmoddi4+0x1a6>
 80004da:	4463      	add	r3, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e74d      	b.n	800037c <__udivmoddi4+0x148>
 80004e0:	4606      	mov	r6, r0
 80004e2:	4623      	mov	r3, r4
 80004e4:	4608      	mov	r0, r1
 80004e6:	e70f      	b.n	8000308 <__udivmoddi4+0xd4>
 80004e8:	3e02      	subs	r6, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	e730      	b.n	8000350 <__udivmoddi4+0x11c>
 80004ee:	bf00      	nop

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <exponent>:
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
int exponent(int i){
 80004f4:	b480      	push	{r7}
 80004f6:	b085      	sub	sp, #20
 80004f8:	af00      	add	r7, sp, #0
 80004fa:	6078      	str	r0, [r7, #4]
	int d = 1;
 80004fc:	2301      	movs	r3, #1
 80004fe:	60fb      	str	r3, [r7, #12]
	for(int j = 3; j >= (i-5) * 2; j--){
 8000500:	2303      	movs	r3, #3
 8000502:	60bb      	str	r3, [r7, #8]
 8000504:	e005      	b.n	8000512 <exponent+0x1e>
		d *= 16;
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	60fb      	str	r3, [r7, #12]
	for(int j = 3; j >= (i-5) * 2; j--){
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	3b01      	subs	r3, #1
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3b05      	subs	r3, #5
 8000516:	005b      	lsls	r3, r3, #1
 8000518:	68ba      	ldr	r2, [r7, #8]
 800051a:	429a      	cmp	r2, r3
 800051c:	daf3      	bge.n	8000506 <exponent+0x12>
	}
	return d;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <CAN_MESSAGE_CONVERSION>:
int CAN_MESSAGE_CONVERSION(uint8_t RxData[8]){
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
	 int d;
	 int x = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	617b      	str	r3, [r7, #20]
	 for(int i = 7; i >= 5; i--){
 8000538:	2307      	movs	r3, #7
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	e011      	b.n	8000562 <CAN_MESSAGE_CONVERSION+0x36>
		 d = exponent(i);
 800053e:	6938      	ldr	r0, [r7, #16]
 8000540:	f7ff ffd8 	bl	80004f4 <exponent>
 8000544:	60f8      	str	r0, [r7, #12]
		 x += RxData[i] * d;
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	461a      	mov	r2, r3
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	fb02 f303 	mul.w	r3, r2, r3
 8000556:	697a      	ldr	r2, [r7, #20]
 8000558:	4413      	add	r3, r2
 800055a:	617b      	str	r3, [r7, #20]
	 for(int i = 7; i >= 5; i--){
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	3b01      	subs	r3, #1
 8000560:	613b      	str	r3, [r7, #16]
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	2b04      	cmp	r3, #4
 8000566:	dcea      	bgt.n	800053e <CAN_MESSAGE_CONVERSION+0x12>
	  }
	 return x;
 8000568:	697b      	ldr	r3, [r7, #20]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3718      	adds	r7, #24
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <HAL_CAN_RxFifo0MsgPendingCallback>:
		HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
	}
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]
	HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData);
 800057c:	4b06      	ldr	r3, [pc, #24]	@ (8000598 <HAL_CAN_RxFifo0MsgPendingCallback+0x24>)
 800057e:	4a07      	ldr	r2, [pc, #28]	@ (800059c <HAL_CAN_RxFifo0MsgPendingCallback+0x28>)
 8000580:	2100      	movs	r1, #0
 8000582:	6878      	ldr	r0, [r7, #4]
 8000584:	f001 face 	bl	8001b24 <HAL_CAN_GetRxMessage>
//	if(RxHeader.ExtId == 23){
//		datacheck = 1;
//	}
	datacheck = 1;
 8000588:	4b05      	ldr	r3, [pc, #20]	@ (80005a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c>)
 800058a:	2201      	movs	r2, #1
 800058c:	601a      	str	r2, [r3, #0]
}
 800058e:	bf00      	nop
 8000590:	3708      	adds	r7, #8
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	200001ac 	.word	0x200001ac
 800059c:	20000188 	.word	0x20000188
 80005a0:	200001b8 	.word	0x200001b8

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b084      	sub	sp, #16
 80005a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	  MX_GPIO_Init();
 80005aa:	f000 fcbd 	bl	8000f28 <MX_GPIO_Init>
	  MX_USART2_UART_Init();
 80005ae:	f000 fc91 	bl	8000ed4 <MX_USART2_UART_Init>
	  MX_CAN1_Init();
 80005b2:	f000 fa83 	bl	8000abc <MX_CAN1_Init>
	  MX_TIM2_Init();
 80005b6:	f000 fb8b 	bl	8000cd0 <MX_TIM2_Init>
	  MX_TIM1_Init();
 80005ba:	f000 fad1 	bl	8000b60 <MX_TIM1_Init>
	  MX_TIM3_Init();
 80005be:	f000 fc07 	bl	8000dd0 <MX_TIM3_Init>
	//  pwmData[9] = 100;
	//
	//  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwmData, 10);

	  // can messages
	  HAL_CAN_Start(&hcan1);
 80005c2:	48aa      	ldr	r0, [pc, #680]	@ (800086c <main+0x2c8>)
 80005c4:	f001 f99a 	bl	80018fc <HAL_CAN_Start>

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80005c8:	2102      	movs	r1, #2
 80005ca:	48a8      	ldr	r0, [pc, #672]	@ (800086c <main+0x2c8>)
 80005cc:	f001 fbcc 	bl	8001d68 <HAL_CAN_ActivateNotification>

	  TxHeader.DLC = 8;
 80005d0:	4ba7      	ldr	r3, [pc, #668]	@ (8000870 <main+0x2cc>)
 80005d2:	2208      	movs	r2, #8
 80005d4:	611a      	str	r2, [r3, #16]
	  TxHeader.IDE = CAN_ID_EXT;
 80005d6:	4ba6      	ldr	r3, [pc, #664]	@ (8000870 <main+0x2cc>)
 80005d8:	2204      	movs	r2, #4
 80005da:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 80005dc:	4ba4      	ldr	r3, [pc, #656]	@ (8000870 <main+0x2cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	60da      	str	r2, [r3, #12]
	  TxHeader.ExtId = 17;
 80005e2:	4ba3      	ldr	r3, [pc, #652]	@ (8000870 <main+0x2cc>)
 80005e4:	2211      	movs	r2, #17
 80005e6:	605a      	str	r2, [r3, #4]

	  TIM3->ARR = 2000;
 80005e8:	4ba2      	ldr	r3, [pc, #648]	@ (8000874 <main+0x2d0>)
 80005ea:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80005ee:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM1->CCR1 = 0;
 80005f0:	4ba1      	ldr	r3, [pc, #644]	@ (8000878 <main+0x2d4>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 0;
 80005f6:	4ba0      	ldr	r3, [pc, #640]	@ (8000878 <main+0x2d4>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM2->CCR1 = 0;
 80005fc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000600:	2200      	movs	r2, #0
 8000602:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM2->CCR3 = 0;
 8000604:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000608:	2200      	movs	r2, #0
 800060a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM3->CCR1 = 1500;
 800060c:	4b99      	ldr	r3, [pc, #612]	@ (8000874 <main+0x2d0>)
 800060e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000612:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 0;
 8000614:	4b97      	ldr	r3, [pc, #604]	@ (8000874 <main+0x2d0>)
 8000616:	2200      	movs	r2, #0
 8000618:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800061a:	2100      	movs	r1, #0
 800061c:	4897      	ldr	r0, [pc, #604]	@ (800087c <main+0x2d8>)
 800061e:	f002 ff49 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000622:	2104      	movs	r1, #4
 8000624:	4895      	ldr	r0, [pc, #596]	@ (800087c <main+0x2d8>)
 8000626:	f002 ff45 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800062a:	2100      	movs	r1, #0
 800062c:	4894      	ldr	r0, [pc, #592]	@ (8000880 <main+0x2dc>)
 800062e:	f002 ff41 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000632:	2108      	movs	r1, #8
 8000634:	4892      	ldr	r0, [pc, #584]	@ (8000880 <main+0x2dc>)
 8000636:	f002 ff3d 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800063a:	2100      	movs	r1, #0
 800063c:	4891      	ldr	r0, [pc, #580]	@ (8000884 <main+0x2e0>)
 800063e:	f002 ff39 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000642:	2104      	movs	r1, #4
 8000644:	488f      	ldr	r0, [pc, #572]	@ (8000884 <main+0x2e0>)
 8000646:	f002 ff35 	bl	80034b4 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 ff09 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f9c9 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 fc69 	bl	8000f28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000656:	f000 fc3d 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800065a:	f000 fa81 	bl	8000b60 <MX_TIM1_Init>
  MX_CAN1_Init();
 800065e:	f000 fa2d 	bl	8000abc <MX_CAN1_Init>
  MX_TIM2_Init();
 8000662:	f000 fb35 	bl	8000cd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000666:	f000 fbb3 	bl	8000dd0 <MX_TIM3_Init>
	//  pwmData[9] = 100;
	//
	//  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwmData, 10);

	  // can messages
	  HAL_CAN_Start(&hcan1);
 800066a:	4880      	ldr	r0, [pc, #512]	@ (800086c <main+0x2c8>)
 800066c:	f001 f946 	bl	80018fc <HAL_CAN_Start>

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000670:	2102      	movs	r1, #2
 8000672:	487e      	ldr	r0, [pc, #504]	@ (800086c <main+0x2c8>)
 8000674:	f001 fb78 	bl	8001d68 <HAL_CAN_ActivateNotification>

	  TxHeader.DLC = 8;
 8000678:	4b7d      	ldr	r3, [pc, #500]	@ (8000870 <main+0x2cc>)
 800067a:	2208      	movs	r2, #8
 800067c:	611a      	str	r2, [r3, #16]
	  TxHeader.IDE = CAN_ID_EXT;
 800067e:	4b7c      	ldr	r3, [pc, #496]	@ (8000870 <main+0x2cc>)
 8000680:	2204      	movs	r2, #4
 8000682:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 8000684:	4b7a      	ldr	r3, [pc, #488]	@ (8000870 <main+0x2cc>)
 8000686:	2200      	movs	r2, #0
 8000688:	60da      	str	r2, [r3, #12]
	  TxHeader.ExtId = 17;
 800068a:	4b79      	ldr	r3, [pc, #484]	@ (8000870 <main+0x2cc>)
 800068c:	2211      	movs	r2, #17
 800068e:	605a      	str	r2, [r3, #4]

	  TIM3->ARR = 2000;
 8000690:	4b78      	ldr	r3, [pc, #480]	@ (8000874 <main+0x2d0>)
 8000692:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM1->CCR1 = 0;
 8000698:	4b77      	ldr	r3, [pc, #476]	@ (8000878 <main+0x2d4>)
 800069a:	2200      	movs	r2, #0
 800069c:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 0;
 800069e:	4b76      	ldr	r3, [pc, #472]	@ (8000878 <main+0x2d4>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM2->CCR1 = 0;
 80006a4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006a8:	2200      	movs	r2, #0
 80006aa:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM2->CCR3 = 0;
 80006ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80006b0:	2200      	movs	r2, #0
 80006b2:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM3->CCR1 = 1500;
 80006b4:	4b6f      	ldr	r3, [pc, #444]	@ (8000874 <main+0x2d0>)
 80006b6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80006ba:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 0;
 80006bc:	4b6d      	ldr	r3, [pc, #436]	@ (8000874 <main+0x2d0>)
 80006be:	2200      	movs	r2, #0
 80006c0:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80006c2:	2100      	movs	r1, #0
 80006c4:	486d      	ldr	r0, [pc, #436]	@ (800087c <main+0x2d8>)
 80006c6:	f002 fef5 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80006ca:	2104      	movs	r1, #4
 80006cc:	486b      	ldr	r0, [pc, #428]	@ (800087c <main+0x2d8>)
 80006ce:	f002 fef1 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80006d2:	2100      	movs	r1, #0
 80006d4:	486a      	ldr	r0, [pc, #424]	@ (8000880 <main+0x2dc>)
 80006d6:	f002 feed 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80006da:	2108      	movs	r1, #8
 80006dc:	4868      	ldr	r0, [pc, #416]	@ (8000880 <main+0x2dc>)
 80006de:	f002 fee9 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80006e2:	2100      	movs	r1, #0
 80006e4:	4867      	ldr	r0, [pc, #412]	@ (8000884 <main+0x2e0>)
 80006e6:	f002 fee5 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80006ea:	2104      	movs	r1, #4
 80006ec:	4865      	ldr	r0, [pc, #404]	@ (8000884 <main+0x2e0>)
 80006ee:	f002 fee1 	bl	80034b4 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f2:	f000 feb5 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f6:	f000 f975 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006fa:	f000 fc15 	bl	8000f28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006fe:	f000 fbe9 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000702:	f000 fa2d 	bl	8000b60 <MX_TIM1_Init>
  MX_CAN1_Init();
 8000706:	f000 f9d9 	bl	8000abc <MX_CAN1_Init>
  MX_TIM2_Init();
 800070a:	f000 fae1 	bl	8000cd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 800070e:	f000 fb5f 	bl	8000dd0 <MX_TIM3_Init>
	//  pwmData[9] = 100;
	//
	//  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, pwmData, 10);

	  // can messages
	  HAL_CAN_Start(&hcan1);
 8000712:	4856      	ldr	r0, [pc, #344]	@ (800086c <main+0x2c8>)
 8000714:	f001 f8f2 	bl	80018fc <HAL_CAN_Start>

	  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000718:	2102      	movs	r1, #2
 800071a:	4854      	ldr	r0, [pc, #336]	@ (800086c <main+0x2c8>)
 800071c:	f001 fb24 	bl	8001d68 <HAL_CAN_ActivateNotification>

	  TxHeader.DLC = 8;
 8000720:	4b53      	ldr	r3, [pc, #332]	@ (8000870 <main+0x2cc>)
 8000722:	2208      	movs	r2, #8
 8000724:	611a      	str	r2, [r3, #16]
	  TxHeader.IDE = CAN_ID_EXT;
 8000726:	4b52      	ldr	r3, [pc, #328]	@ (8000870 <main+0x2cc>)
 8000728:	2204      	movs	r2, #4
 800072a:	609a      	str	r2, [r3, #8]
	  TxHeader.RTR = CAN_RTR_DATA;
 800072c:	4b50      	ldr	r3, [pc, #320]	@ (8000870 <main+0x2cc>)
 800072e:	2200      	movs	r2, #0
 8000730:	60da      	str	r2, [r3, #12]
	  TxHeader.ExtId = 17;
 8000732:	4b4f      	ldr	r3, [pc, #316]	@ (8000870 <main+0x2cc>)
 8000734:	2211      	movs	r2, #17
 8000736:	605a      	str	r2, [r3, #4]

	  TIM3->ARR = 2000;
 8000738:	4b4e      	ldr	r3, [pc, #312]	@ (8000874 <main+0x2d0>)
 800073a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
	  TIM1->CCR1 = 0;
 8000740:	4b4d      	ldr	r3, [pc, #308]	@ (8000878 <main+0x2d4>)
 8000742:	2200      	movs	r2, #0
 8000744:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM1->CCR2 = 0;
 8000746:	4b4c      	ldr	r3, [pc, #304]	@ (8000878 <main+0x2d4>)
 8000748:	2200      	movs	r2, #0
 800074a:	639a      	str	r2, [r3, #56]	@ 0x38
	  TIM2->CCR1 = 0;
 800074c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000750:	2200      	movs	r2, #0
 8000752:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM2->CCR3 = 0;
 8000754:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000758:	2200      	movs	r2, #0
 800075a:	63da      	str	r2, [r3, #60]	@ 0x3c
	  TIM3->CCR1 = 1500;
 800075c:	4b45      	ldr	r3, [pc, #276]	@ (8000874 <main+0x2d0>)
 800075e:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000762:	635a      	str	r2, [r3, #52]	@ 0x34
	  TIM3->CCR2 = 0;
 8000764:	4b43      	ldr	r3, [pc, #268]	@ (8000874 <main+0x2d0>)
 8000766:	2200      	movs	r2, #0
 8000768:	639a      	str	r2, [r3, #56]	@ 0x38
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800076a:	2100      	movs	r1, #0
 800076c:	4843      	ldr	r0, [pc, #268]	@ (800087c <main+0x2d8>)
 800076e:	f002 fea1 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000772:	2104      	movs	r1, #4
 8000774:	4841      	ldr	r0, [pc, #260]	@ (800087c <main+0x2d8>)
 8000776:	f002 fe9d 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800077a:	2100      	movs	r1, #0
 800077c:	4840      	ldr	r0, [pc, #256]	@ (8000880 <main+0x2dc>)
 800077e:	f002 fe99 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000782:	2108      	movs	r1, #8
 8000784:	483e      	ldr	r0, [pc, #248]	@ (8000880 <main+0x2dc>)
 8000786:	f002 fe95 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800078a:	2100      	movs	r1, #0
 800078c:	483d      	ldr	r0, [pc, #244]	@ (8000884 <main+0x2e0>)
 800078e:	f002 fe91 	bl	80034b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000792:	2104      	movs	r1, #4
 8000794:	483b      	ldr	r0, [pc, #236]	@ (8000884 <main+0x2e0>)
 8000796:	f002 fe8d 	bl	80034b4 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800079a:	f000 fe61 	bl	8001460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800079e:	f000 f921 	bl	80009e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a2:	f000 fbc1 	bl	8000f28 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007a6:	f000 fb95 	bl	8000ed4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80007aa:	f000 f9d9 	bl	8000b60 <MX_TIM1_Init>
  MX_CAN1_Init();
 80007ae:	f000 f985 	bl	8000abc <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  TIM1->ARR = 1000;
 80007b2:	4b31      	ldr	r3, [pc, #196]	@ (8000878 <main+0x2d4>)
 80007b4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  TIM1->CCR1 = 600;
 80007ba:	4b2f      	ldr	r3, [pc, #188]	@ (8000878 <main+0x2d4>)
 80007bc:	f44f 7216 	mov.w	r2, #600	@ 0x258
 80007c0:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2 = 1000;
 80007c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000878 <main+0x2d4>)
 80007c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80007c8:	639a      	str	r2, [r3, #56]	@ 0x38
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80007ca:	2100      	movs	r1, #0
 80007cc:	482b      	ldr	r0, [pc, #172]	@ (800087c <main+0x2d8>)
 80007ce:	f002 fe71 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80007d2:	2104      	movs	r1, #4
 80007d4:	4829      	ldr	r0, [pc, #164]	@ (800087c <main+0x2d8>)
 80007d6:	f002 fe6d 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80007da:	2108      	movs	r1, #8
 80007dc:	4827      	ldr	r0, [pc, #156]	@ (800087c <main+0x2d8>)
 80007de:	f002 fe69 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80007e2:	2100      	movs	r1, #0
 80007e4:	4826      	ldr	r0, [pc, #152]	@ (8000880 <main+0x2dc>)
 80007e6:	f002 fe65 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007ea:	2108      	movs	r1, #8
 80007ec:	4824      	ldr	r0, [pc, #144]	@ (8000880 <main+0x2dc>)
 80007ee:	f002 fe61 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80007f2:	2100      	movs	r1, #0
 80007f4:	4823      	ldr	r0, [pc, #140]	@ (8000884 <main+0x2e0>)
 80007f6:	f002 fe5d 	bl	80034b4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80007fa:	2104      	movs	r1, #4
 80007fc:	4821      	ldr	r0, [pc, #132]	@ (8000884 <main+0x2e0>)
 80007fe:	f002 fe59 	bl	80034b4 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  int x = 0;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
	  if (datacheck){
 8000806:	4b20      	ldr	r3, [pc, #128]	@ (8000888 <main+0x2e4>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d0f9      	beq.n	8000802 <main+0x25e>
		  if(RxHeader.ExtId == 115 || RxHeader.ExtId == 116)
 800080e:	4b1f      	ldr	r3, [pc, #124]	@ (800088c <main+0x2e8>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	2b73      	cmp	r3, #115	@ 0x73
 8000814:	d003      	beq.n	800081e <main+0x27a>
 8000816:	4b1d      	ldr	r3, [pc, #116]	@ (800088c <main+0x2e8>)
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b74      	cmp	r3, #116	@ 0x74
 800081c:	d156      	bne.n	80008cc <main+0x328>
		  {
			  for(int i = 0; i < 8; i++){
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	e00b      	b.n	800083c <main+0x298>
				  TxData[i] = RxData[i];
 8000824:	4a1a      	ldr	r2, [pc, #104]	@ (8000890 <main+0x2ec>)
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	7819      	ldrb	r1, [r3, #0]
 800082c:	4a19      	ldr	r2, [pc, #100]	@ (8000894 <main+0x2f0>)
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	4413      	add	r3, r2
 8000832:	460a      	mov	r2, r1
 8000834:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 8; i++){
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	3301      	adds	r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	2b07      	cmp	r3, #7
 8000840:	ddf0      	ble.n	8000824 <main+0x280>
			  }
			  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000842:	4b15      	ldr	r3, [pc, #84]	@ (8000898 <main+0x2f4>)
 8000844:	4a13      	ldr	r2, [pc, #76]	@ (8000894 <main+0x2f0>)
 8000846:	490a      	ldr	r1, [pc, #40]	@ (8000870 <main+0x2cc>)
 8000848:	4808      	ldr	r0, [pc, #32]	@ (800086c <main+0x2c8>)
 800084a:	f001 f89b 	bl	8001984 <HAL_CAN_AddTxMessage>


			  x = CAN_MESSAGE_CONVERSION(RxData);
 800084e:	4810      	ldr	r0, [pc, #64]	@ (8000890 <main+0x2ec>)
 8000850:	f7ff fe6c 	bl	800052c <CAN_MESSAGE_CONVERSION>
 8000854:	6038      	str	r0, [r7, #0]

			  if(x == 1000)
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800085c:	d11e      	bne.n	800089c <main+0x2f8>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 800085e:	4b07      	ldr	r3, [pc, #28]	@ (800087c <main+0x2d8>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000866:	635a      	str	r2, [r3, #52]	@ 0x34
 8000868:	e01c      	b.n	80008a4 <main+0x300>
 800086a:	bf00      	nop
 800086c:	20000028 	.word	0x20000028
 8000870:	20000170 	.word	0x20000170
 8000874:	40000400 	.word	0x40000400
 8000878:	40010000 	.word	0x40010000
 800087c:	20000050 	.word	0x20000050
 8000880:	20000098 	.word	0x20000098
 8000884:	200000e0 	.word	0x200000e0
 8000888:	200001b8 	.word	0x200001b8
 800088c:	20000188 	.word	0x20000188
 8000890:	200001ac 	.word	0x200001ac
 8000894:	200001a4 	.word	0x200001a4
 8000898:	200001b4 	.word	0x200001b4
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800089c:	4b45      	ldr	r3, [pc, #276]	@ (80009b4 <main+0x410>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2200      	movs	r2, #0
 80008a2:	635a      	str	r2, [r3, #52]	@ 0x34
			  }

			  TIM3->ARR = 2000;
 80008a4:	4b44      	ldr	r3, [pc, #272]	@ (80009b8 <main+0x414>)
 80008a6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80008aa:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->ARR = 1000;
 80008ac:	4b43      	ldr	r3, [pc, #268]	@ (80009bc <main+0x418>)
 80008ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008b2:	62da      	str	r2, [r3, #44]	@ 0x2c
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, x);
 80008b4:	4b42      	ldr	r3, [pc, #264]	@ (80009c0 <main+0x41c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	683a      	ldr	r2, [r7, #0]
 80008ba:	639a      	str	r2, [r3, #56]	@ 0x38
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x);
 80008bc:	4b40      	ldr	r3, [pc, #256]	@ (80009c0 <main+0x41c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	635a      	str	r2, [r3, #52]	@ 0x34
 //			  TIM3->CCR2 = x;
 //			  TIM3->CCR1 = x;
			  datacheck = 0;
 80008c4:	4b3f      	ldr	r3, [pc, #252]	@ (80009c4 <main+0x420>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	601a      	str	r2, [r3, #0]
 80008ca:	e072      	b.n	80009b2 <main+0x40e>
		  }
		  else if(RxHeader.ExtId == 117 || RxHeader.ExtId == 118)
 80008cc:	4b3e      	ldr	r3, [pc, #248]	@ (80009c8 <main+0x424>)
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b75      	cmp	r3, #117	@ 0x75
 80008d2:	d003      	beq.n	80008dc <main+0x338>
 80008d4:	4b3c      	ldr	r3, [pc, #240]	@ (80009c8 <main+0x424>)
 80008d6:	685b      	ldr	r3, [r3, #4]
 80008d8:	2b76      	cmp	r3, #118	@ 0x76
 80008da:	d13e      	bne.n	800095a <main+0x3b6>
		  {
			  for(int i = 0; i < 8; i++){
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	e00b      	b.n	80008fa <main+0x356>
				  TxData[i] = RxData[i];
 80008e2:	4a3a      	ldr	r2, [pc, #232]	@ (80009cc <main+0x428>)
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4413      	add	r3, r2
 80008e8:	7819      	ldrb	r1, [r3, #0]
 80008ea:	4a39      	ldr	r2, [pc, #228]	@ (80009d0 <main+0x42c>)
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	4413      	add	r3, r2
 80008f0:	460a      	mov	r2, r1
 80008f2:	701a      	strb	r2, [r3, #0]
			  for(int i = 0; i < 8; i++){
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	3301      	adds	r3, #1
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
 80008fc:	2b07      	cmp	r3, #7
 80008fe:	ddf0      	ble.n	80008e2 <main+0x33e>
			  }
			  HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000900:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <main+0x430>)
 8000902:	4a33      	ldr	r2, [pc, #204]	@ (80009d0 <main+0x42c>)
 8000904:	4934      	ldr	r1, [pc, #208]	@ (80009d8 <main+0x434>)
 8000906:	4835      	ldr	r0, [pc, #212]	@ (80009dc <main+0x438>)
 8000908:	f001 f83c 	bl	8001984 <HAL_CAN_AddTxMessage>


			  x = CAN_MESSAGE_CONVERSION(RxData);
 800090c:	482f      	ldr	r0, [pc, #188]	@ (80009cc <main+0x428>)
 800090e:	f7ff fe0d 	bl	800052c <CAN_MESSAGE_CONVERSION>
 8000912:	6038      	str	r0, [r7, #0]

			  TIM2->ARR = 32000;
 8000914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000918:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800091c:	62da      	str	r2, [r3, #44]	@ 0x2c
			  TIM1->ARR = 1000;
 800091e:	4b27      	ldr	r3, [pc, #156]	@ (80009bc <main+0x418>)
 8000920:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000924:	62da      	str	r2, [r3, #44]	@ 0x2c
			  if(x == 1000)
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800092c:	d105      	bne.n	800093a <main+0x396>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 1000);
 800092e:	4b21      	ldr	r3, [pc, #132]	@ (80009b4 <main+0x410>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000936:	635a      	str	r2, [r3, #52]	@ 0x34
 8000938:	e003      	b.n	8000942 <main+0x39e>
			  }
			  else{
				  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800093a:	4b1e      	ldr	r3, [pc, #120]	@ (80009b4 <main+0x410>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	2200      	movs	r2, #0
 8000940:	635a      	str	r2, [r3, #52]	@ 0x34
			  }

			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, x);
 8000942:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <main+0x43c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	683a      	ldr	r2, [r7, #0]
 8000948:	635a      	str	r2, [r3, #52]	@ 0x34
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, x);
 800094a:	4b25      	ldr	r3, [pc, #148]	@ (80009e0 <main+0x43c>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	63da      	str	r2, [r3, #60]	@ 0x3c
 //			  TIM2->CCR1 = x;
 //			  TIM2->CCR3 = x;
			  datacheck = 0;
 8000952:	4b1c      	ldr	r3, [pc, #112]	@ (80009c4 <main+0x420>)
 8000954:	2200      	movs	r2, #0
 8000956:	601a      	str	r2, [r3, #0]
 8000958:	e02b      	b.n	80009b2 <main+0x40e>
		  }
		  else if(RxHeader.ExtId == 120)
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <main+0x424>)
 800095c:	685b      	ldr	r3, [r3, #4]
 800095e:	2b78      	cmp	r3, #120	@ 0x78
 8000960:	f47f af4f 	bne.w	8000802 <main+0x25e>
		  {
			 for(int i = 0; i < 8; i++){
 8000964:	2300      	movs	r3, #0
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	e00b      	b.n	8000982 <main+0x3de>
				 TxData[i] = RxData[i];
 800096a:	4a18      	ldr	r2, [pc, #96]	@ (80009cc <main+0x428>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	4413      	add	r3, r2
 8000970:	7819      	ldrb	r1, [r3, #0]
 8000972:	4a17      	ldr	r2, [pc, #92]	@ (80009d0 <main+0x42c>)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4413      	add	r3, r2
 8000978:	460a      	mov	r2, r1
 800097a:	701a      	strb	r2, [r3, #0]
			 for(int i = 0; i < 8; i++){
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	3301      	adds	r3, #1
 8000980:	607b      	str	r3, [r7, #4]
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b07      	cmp	r3, #7
 8000986:	ddf0      	ble.n	800096a <main+0x3c6>
			 }
			 HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 8000988:	4b12      	ldr	r3, [pc, #72]	@ (80009d4 <main+0x430>)
 800098a:	4a11      	ldr	r2, [pc, #68]	@ (80009d0 <main+0x42c>)
 800098c:	4912      	ldr	r1, [pc, #72]	@ (80009d8 <main+0x434>)
 800098e:	4813      	ldr	r0, [pc, #76]	@ (80009dc <main+0x438>)
 8000990:	f000 fff8 	bl	8001984 <HAL_CAN_AddTxMessage>
			 TIM1->ARR = 2000;
 8000994:	4b09      	ldr	r3, [pc, #36]	@ (80009bc <main+0x418>)
 8000996:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800099a:	62da      	str	r2, [r3, #44]	@ 0x2c
			 x = CAN_MESSAGE_CONVERSION(RxData);
 800099c:	480b      	ldr	r0, [pc, #44]	@ (80009cc <main+0x428>)
 800099e:	f7ff fdc5 	bl	800052c <CAN_MESSAGE_CONVERSION>
 80009a2:	6038      	str	r0, [r7, #0]
			 __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, x);
 80009a4:	4b03      	ldr	r3, [pc, #12]	@ (80009b4 <main+0x410>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	635a      	str	r2, [r3, #52]	@ 0x34
			 datacheck = 0;
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <main+0x420>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
  {
 80009b2:	e726      	b.n	8000802 <main+0x25e>
 80009b4:	20000050 	.word	0x20000050
 80009b8:	40000400 	.word	0x40000400
 80009bc:	40010000 	.word	0x40010000
 80009c0:	200000e0 	.word	0x200000e0
 80009c4:	200001b8 	.word	0x200001b8
 80009c8:	20000188 	.word	0x20000188
 80009cc:	200001ac 	.word	0x200001ac
 80009d0:	200001a4 	.word	0x200001a4
 80009d4:	200001b4 	.word	0x200001b4
 80009d8:	20000170 	.word	0x20000170
 80009dc:	20000028 	.word	0x20000028
 80009e0:	20000098 	.word	0x20000098

080009e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b094      	sub	sp, #80	@ 0x50
 80009e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	2234      	movs	r2, #52	@ 0x34
 80009f0:	2100      	movs	r1, #0
 80009f2:	4618      	mov	r0, r3
 80009f4:	f003 fe5e 	bl	80046b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
 8000a00:	605a      	str	r2, [r3, #4]
 8000a02:	609a      	str	r2, [r3, #8]
 8000a04:	60da      	str	r2, [r3, #12]
 8000a06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	2300      	movs	r3, #0
 8000a0a:	607b      	str	r3, [r7, #4]
 8000a0c:	4b29      	ldr	r3, [pc, #164]	@ (8000ab4 <SystemClock_Config+0xd0>)
 8000a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a10:	4a28      	ldr	r2, [pc, #160]	@ (8000ab4 <SystemClock_Config+0xd0>)
 8000a12:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a16:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a18:	4b26      	ldr	r3, [pc, #152]	@ (8000ab4 <SystemClock_Config+0xd0>)
 8000a1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a20:	607b      	str	r3, [r7, #4]
 8000a22:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a24:	2300      	movs	r3, #0
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	4b23      	ldr	r3, [pc, #140]	@ (8000ab8 <SystemClock_Config+0xd4>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000a30:	4a21      	ldr	r2, [pc, #132]	@ (8000ab8 <SystemClock_Config+0xd4>)
 8000a32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a36:	6013      	str	r3, [r2, #0]
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <SystemClock_Config+0xd4>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a40:	603b      	str	r3, [r7, #0]
 8000a42:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a48:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a4c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a52:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a56:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a58:	2304      	movs	r3, #4
 8000a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a5c:	2348      	movs	r3, #72	@ 0x48
 8000a5e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a60:	2302      	movs	r3, #2
 8000a62:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a64:	2302      	movs	r3, #2
 8000a66:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a68:	2302      	movs	r3, #2
 8000a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a6c:	f107 031c 	add.w	r3, r7, #28
 8000a70:	4618      	mov	r0, r3
 8000a72:	f002 f9d9 	bl	8002e28 <HAL_RCC_OscConfig>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a7c:	f000 fac2 	bl	8001004 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a80:	230f      	movs	r3, #15
 8000a82:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a84:	2302      	movs	r3, #2
 8000a86:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2102      	movs	r1, #2
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 fe79 	bl	8002794 <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8000aa8:	f000 faac 	bl	8001004 <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3750      	adds	r7, #80	@ 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08a      	sub	sp, #40	@ 0x28
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000ac4:	4a25      	ldr	r2, [pc, #148]	@ (8000b5c <MX_CAN1_Init+0xa0>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 18;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000aca:	2212      	movs	r2, #18
 8000acc:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000ace:	4b22      	ldr	r3, [pc, #136]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad4:	4b20      	ldr	r3, [pc, #128]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000ada:	4b1f      	ldr	r3, [pc, #124]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000adc:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000ae0:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000ae2:	4b1d      	ldr	r3, [pc, #116]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000aee:	4b1a      	ldr	r3, [pc, #104]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000af4:	4b18      	ldr	r3, [pc, #96]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000afa:	4b17      	ldr	r3, [pc, #92]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b00:	4b15      	ldr	r3, [pc, #84]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b06:	4b14      	ldr	r3, [pc, #80]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b0c:	4812      	ldr	r0, [pc, #72]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000b0e:	f000 fd19 	bl	8001544 <HAL_CAN_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f000 fa74 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  CAN_FilterTypeDef canfilterconfig;

	canfilterconfig.FilterActivation = CAN_FILTER_ENABLE;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	623b      	str	r3, [r7, #32]
	canfilterconfig.FilterBank = 0;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
	canfilterconfig.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	613b      	str	r3, [r7, #16]
	canfilterconfig.FilterIdHigh = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	603b      	str	r3, [r7, #0]
	canfilterconfig.FilterIdLow = 0;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
	canfilterconfig.FilterMaskIdHigh = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60bb      	str	r3, [r7, #8]
	canfilterconfig.FilterMaskIdLow = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	60fb      	str	r3, [r7, #12]
	canfilterconfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	61bb      	str	r3, [r7, #24]
	canfilterconfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000b3c:	2301      	movs	r3, #1
 8000b3e:	61fb      	str	r3, [r7, #28]
	canfilterconfig.SlaveStartFilterBank = 40;
 8000b40:	2328      	movs	r3, #40	@ 0x28
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24

	HAL_CAN_ConfigFilter(&hcan1, &canfilterconfig);
 8000b44:	463b      	mov	r3, r7
 8000b46:	4619      	mov	r1, r3
 8000b48:	4803      	ldr	r0, [pc, #12]	@ (8000b58 <MX_CAN1_Init+0x9c>)
 8000b4a:	f000 fdf7 	bl	800173c <HAL_CAN_ConfigFilter>
  /* USER CODE END CAN1_Init 2 */

}
 8000b4e:	bf00      	nop
 8000b50:	3728      	adds	r7, #40	@ 0x28
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000028 	.word	0x20000028
 8000b5c:	40006400 	.word	0x40006400

08000b60 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b096      	sub	sp, #88	@ 0x58
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b74:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b82:	2200      	movs	r2, #0
 8000b84:	601a      	str	r2, [r3, #0]
 8000b86:	605a      	str	r2, [r3, #4]
 8000b88:	609a      	str	r2, [r3, #8]
 8000b8a:	60da      	str	r2, [r3, #12]
 8000b8c:	611a      	str	r2, [r3, #16]
 8000b8e:	615a      	str	r2, [r3, #20]
 8000b90:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b92:	1d3b      	adds	r3, r7, #4
 8000b94:	2220      	movs	r2, #32
 8000b96:	2100      	movs	r1, #0
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f003 fd8b 	bl	80046b4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b9e:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000ba0:	4a4a      	ldr	r2, [pc, #296]	@ (8000ccc <MX_TIM1_Init+0x16c>)
 8000ba2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 8000ba4:	4b48      	ldr	r3, [pc, #288]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000ba6:	2247      	movs	r2, #71	@ 0x47
 8000ba8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000baa:	4b47      	ldr	r3, [pc, #284]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2500-1;
 8000bb0:	4b45      	ldr	r3, [pc, #276]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bb2:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000bb6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bb8:	4b43      	ldr	r3, [pc, #268]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bbe:	4b42      	ldr	r3, [pc, #264]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bc4:	4b40      	ldr	r3, [pc, #256]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bca:	483f      	ldr	r0, [pc, #252]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bcc:	f002 fbca 	bl	8003364 <HAL_TIM_Base_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000bd6:	f000 fa15 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bde:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000be0:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000be4:	4619      	mov	r1, r3
 8000be6:	4838      	ldr	r0, [pc, #224]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000be8:	f002 fdee 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bf2:	f000 fa07 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bf6:	4834      	ldr	r0, [pc, #208]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000bf8:	f002 fc03 	bl	8003402 <HAL_TIM_PWM_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000c02:	f000 f9ff 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c06:	2300      	movs	r3, #0
 8000c08:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c0e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c12:	4619      	mov	r1, r3
 8000c14:	482c      	ldr	r0, [pc, #176]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000c16:	f003 f9bb 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000c20:	f000 f9f0 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c24:	2360      	movs	r3, #96	@ 0x60
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c30:	2300      	movs	r3, #0
 8000c32:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c44:	2200      	movs	r2, #0
 8000c46:	4619      	mov	r1, r3
 8000c48:	481f      	ldr	r0, [pc, #124]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000c4a:	f002 fcfb 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c54:	f000 f9d6 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000c58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c5c:	2204      	movs	r2, #4
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4819      	ldr	r0, [pc, #100]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000c62:	f002 fcef 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8000c6c:	f000 f9ca 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c70:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c74:	2208      	movs	r2, #8
 8000c76:	4619      	mov	r1, r3
 8000c78:	4813      	ldr	r0, [pc, #76]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000c7a:	f002 fce3 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000c7e:	4603      	mov	r3, r0
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 8000c84:	f000 f9be 	bl	8001004 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ca0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4807      	ldr	r0, [pc, #28]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000cac:	f003 f9ec 	bl	8004088 <HAL_TIMEx_ConfigBreakDeadTime>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 8000cb6:	f000 f9a5 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cba:	4803      	ldr	r0, [pc, #12]	@ (8000cc8 <MX_TIM1_Init+0x168>)
 8000cbc:	f000 fa6c 	bl	8001198 <HAL_TIM_MspPostInit>

}
 8000cc0:	bf00      	nop
 8000cc2:	3758      	adds	r7, #88	@ 0x58
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	20000050 	.word	0x20000050
 8000ccc:	40010000 	.word	0x40010000

08000cd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08e      	sub	sp, #56	@ 0x38
 8000cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cee:	1d3b      	adds	r3, r7, #4
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
 8000cfa:	611a      	str	r2, [r3, #16]
 8000cfc:	615a      	str	r2, [r3, #20]
 8000cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d00:	4b32      	ldr	r3, [pc, #200]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d02:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d06:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000d08:	4b30      	ldr	r3, [pc, #192]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d0a:	2247      	movs	r2, #71	@ 0x47
 8000d0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b2f      	ldr	r3, [pc, #188]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2500-1;
 8000d14:	4b2d      	ldr	r3, [pc, #180]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d16:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000d1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d28:	4828      	ldr	r0, [pc, #160]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d2a:	f002 fb1b 	bl	8003364 <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d34:	f000 f966 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d42:	4619      	mov	r1, r3
 8000d44:	4821      	ldr	r0, [pc, #132]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d46:	f002 fd3f 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d50:	f000 f958 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d54:	481d      	ldr	r0, [pc, #116]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d56:	f002 fb54 	bl	8003402 <HAL_TIM_PWM_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d60:	f000 f950 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d64:	2300      	movs	r3, #0
 8000d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	4619      	mov	r1, r3
 8000d72:	4816      	ldr	r0, [pc, #88]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d74:	f003 f90c 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d7e:	f000 f941 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d82:	2360      	movs	r3, #96	@ 0x60
 8000d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	2200      	movs	r2, #0
 8000d96:	4619      	mov	r1, r3
 8000d98:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000d9a:	f002 fc53 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000da4:	f000 f92e 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	1d3b      	adds	r3, r7, #4
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000db0:	f002 fc48 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000dba:	f000 f923 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000dbe:	4803      	ldr	r0, [pc, #12]	@ (8000dcc <MX_TIM2_Init+0xfc>)
 8000dc0:	f000 f9ea 	bl	8001198 <HAL_TIM_MspPostInit>

}
 8000dc4:	bf00      	nop
 8000dc6:	3738      	adds	r7, #56	@ 0x38
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000098 	.word	0x20000098

08000dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	@ 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e00:	4b32      	ldr	r3, [pc, #200]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e02:	4a33      	ldr	r2, [pc, #204]	@ (8000ed0 <MX_TIM3_Init+0x100>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 72-1;
 8000e06:	4b31      	ldr	r3, [pc, #196]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e08:	2247      	movs	r2, #71	@ 0x47
 8000e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2500-1;
 8000e12:	4b2e      	ldr	r3, [pc, #184]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e14:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 8000e18:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e20:	4b2a      	ldr	r3, [pc, #168]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e26:	4829      	ldr	r0, [pc, #164]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e28:	f002 fa9c 	bl	8003364 <HAL_TIM_Base_Init>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d001      	beq.n	8000e36 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000e32:	f000 f8e7 	bl	8001004 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e40:	4619      	mov	r1, r3
 8000e42:	4822      	ldr	r0, [pc, #136]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e44:	f002 fcc0 	bl	80037c8 <HAL_TIM_ConfigClockSource>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000e4e:	f000 f8d9 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e52:	481e      	ldr	r0, [pc, #120]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e54:	f002 fad5 	bl	8003402 <HAL_TIM_PWM_Init>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d001      	beq.n	8000e62 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000e5e:	f000 f8d1 	bl	8001004 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e6a:	f107 0320 	add.w	r3, r7, #32
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4816      	ldr	r0, [pc, #88]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e72:	f003 f88d 	bl	8003f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000e7c:	f000 f8c2 	bl	8001004 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e80:	2360      	movs	r3, #96	@ 0x60
 8000e82:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	4619      	mov	r1, r3
 8000e96:	480d      	ldr	r0, [pc, #52]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000e98:	f002 fbd4 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000ea2:	f000 f8af 	bl	8001004 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2204      	movs	r2, #4
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4807      	ldr	r0, [pc, #28]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000eae:	f002 fbc9 	bl	8003644 <HAL_TIM_PWM_ConfigChannel>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d001      	beq.n	8000ebc <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000eb8:	f000 f8a4 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ebc:	4803      	ldr	r0, [pc, #12]	@ (8000ecc <MX_TIM3_Init+0xfc>)
 8000ebe:	f000 f96b 	bl	8001198 <HAL_TIM_MspPostInit>

}
 8000ec2:	bf00      	nop
 8000ec4:	3738      	adds	r7, #56	@ 0x38
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	200000e0 	.word	0x200000e0
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed8:	4b11      	ldr	r3, [pc, #68]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eda:	4a12      	ldr	r2, [pc, #72]	@ (8000f24 <MX_USART2_UART_Init+0x50>)
 8000edc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ede:	4b10      	ldr	r3, [pc, #64]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eec:	4b0c      	ldr	r3, [pc, #48]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef8:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000efa:	220c      	movs	r2, #12
 8000efc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efe:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f04:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f0a:	4805      	ldr	r0, [pc, #20]	@ (8000f20 <MX_USART2_UART_Init+0x4c>)
 8000f0c:	f003 f90e 	bl	800412c <HAL_UART_Init>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f16:	f000 f875 	bl	8001004 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	20000128 	.word	0x20000128
 8000f24:	40004400 	.word	0x40004400

08000f28 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b08a      	sub	sp, #40	@ 0x28
 8000f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2e:	f107 0314 	add.w	r3, r7, #20
 8000f32:	2200      	movs	r2, #0
 8000f34:	601a      	str	r2, [r3, #0]
 8000f36:	605a      	str	r2, [r3, #4]
 8000f38:	609a      	str	r2, [r3, #8]
 8000f3a:	60da      	str	r2, [r3, #12]
 8000f3c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f3e:	2300      	movs	r3, #0
 8000f40:	613b      	str	r3, [r7, #16]
 8000f42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f46:	4a2c      	ldr	r2, [pc, #176]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f48:	f043 0304 	orr.w	r3, r3, #4
 8000f4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f52:	f003 0304 	and.w	r3, r3, #4
 8000f56:	613b      	str	r3, [r7, #16]
 8000f58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	60fb      	str	r3, [r7, #12]
 8000f5e:	4b26      	ldr	r3, [pc, #152]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f62:	4a25      	ldr	r2, [pc, #148]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f64:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6a:	4b23      	ldr	r3, [pc, #140]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f72:	60fb      	str	r3, [r7, #12]
 8000f74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	60bb      	str	r3, [r7, #8]
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7e:	4a1e      	ldr	r2, [pc, #120]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	607b      	str	r3, [r7, #4]
 8000f96:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a17      	ldr	r2, [pc, #92]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <MX_GPIO_Init+0xd0>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2120      	movs	r1, #32
 8000fb2:	4812      	ldr	r0, [pc, #72]	@ (8000ffc <MX_GPIO_Init+0xd4>)
 8000fb4:	f001 fbd4 	bl	8002760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000fbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fbe:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480c      	ldr	r0, [pc, #48]	@ (8001000 <MX_GPIO_Init+0xd8>)
 8000fd0:	f001 fa32 	bl	8002438 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000fd4:	2320      	movs	r3, #32
 8000fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4804      	ldr	r0, [pc, #16]	@ (8000ffc <MX_GPIO_Init+0xd4>)
 8000fec:	f001 fa24 	bl	8002438 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ff0:	bf00      	nop
 8000ff2:	3728      	adds	r7, #40	@ 0x28
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020800 	.word	0x40020800

08001004 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001008:	b672      	cpsid	i
}
 800100a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <Error_Handler+0x8>

08001010 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	607b      	str	r3, [r7, #4]
 800101a:	4b10      	ldr	r3, [pc, #64]	@ (800105c <HAL_MspInit+0x4c>)
 800101c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800101e:	4a0f      	ldr	r2, [pc, #60]	@ (800105c <HAL_MspInit+0x4c>)
 8001020:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001024:	6453      	str	r3, [r2, #68]	@ 0x44
 8001026:	4b0d      	ldr	r3, [pc, #52]	@ (800105c <HAL_MspInit+0x4c>)
 8001028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800102a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800102e:	607b      	str	r3, [r7, #4]
 8001030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	603b      	str	r3, [r7, #0]
 8001036:	4b09      	ldr	r3, [pc, #36]	@ (800105c <HAL_MspInit+0x4c>)
 8001038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103a:	4a08      	ldr	r2, [pc, #32]	@ (800105c <HAL_MspInit+0x4c>)
 800103c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001040:	6413      	str	r3, [r2, #64]	@ 0x40
 8001042:	4b06      	ldr	r3, [pc, #24]	@ (800105c <HAL_MspInit+0x4c>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800104a:	603b      	str	r3, [r7, #0]
 800104c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800104e:	2007      	movs	r0, #7
 8001050:	f001 f9b0 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40023800 	.word	0x40023800

08001060 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b08a      	sub	sp, #40	@ 0x28
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a1d      	ldr	r2, [pc, #116]	@ (80010f4 <HAL_CAN_MspInit+0x94>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d134      	bne.n	80010ec <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
 8001086:	4b1c      	ldr	r3, [pc, #112]	@ (80010f8 <HAL_CAN_MspInit+0x98>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800108a:	4a1b      	ldr	r2, [pc, #108]	@ (80010f8 <HAL_CAN_MspInit+0x98>)
 800108c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001090:	6413      	str	r3, [r2, #64]	@ 0x40
 8001092:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <HAL_CAN_MspInit+0x98>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001096:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <HAL_CAN_MspInit+0x98>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	4a14      	ldr	r2, [pc, #80]	@ (80010f8 <HAL_CAN_MspInit+0x98>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ae:	4b12      	ldr	r3, [pc, #72]	@ (80010f8 <HAL_CAN_MspInit+0x98>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80010ba:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80010be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010c0:	2302      	movs	r3, #2
 80010c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c4:	2300      	movs	r3, #0
 80010c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010c8:	2303      	movs	r3, #3
 80010ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80010cc:	2309      	movs	r3, #9
 80010ce:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	4619      	mov	r1, r3
 80010d6:	4809      	ldr	r0, [pc, #36]	@ (80010fc <HAL_CAN_MspInit+0x9c>)
 80010d8:	f001 f9ae 	bl	8002438 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80010dc:	2200      	movs	r2, #0
 80010de:	2100      	movs	r1, #0
 80010e0:	2014      	movs	r0, #20
 80010e2:	f001 f972 	bl	80023ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80010e6:	2014      	movs	r0, #20
 80010e8:	f001 f98b 	bl	8002402 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80010ec:	bf00      	nop
 80010ee:	3728      	adds	r7, #40	@ 0x28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd80      	pop	{r7, pc}
 80010f4:	40006400 	.word	0x40006400
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001100:	b480      	push	{r7}
 8001102:	b087      	sub	sp, #28
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a1f      	ldr	r2, [pc, #124]	@ (800118c <HAL_TIM_Base_MspInit+0x8c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10e      	bne.n	8001130 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
 8001116:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800111a:	4a1d      	ldr	r2, [pc, #116]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6453      	str	r3, [r2, #68]	@ 0x44
 8001122:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	617b      	str	r3, [r7, #20]
 800112c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800112e:	e026      	b.n	800117e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001138:	d10e      	bne.n	8001158 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b14      	ldr	r3, [pc, #80]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	4a13      	ldr	r2, [pc, #76]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6413      	str	r3, [r2, #64]	@ 0x40
 800114a:	4b11      	ldr	r3, [pc, #68]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
}
 8001156:	e012      	b.n	800117e <HAL_TIM_Base_MspInit+0x7e>
  else if(htim_base->Instance==TIM3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <HAL_TIM_Base_MspInit+0x94>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10d      	bne.n	800117e <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b0a      	ldr	r3, [pc, #40]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 8001168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800116a:	4a09      	ldr	r2, [pc, #36]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	6413      	str	r3, [r2, #64]	@ 0x40
 8001172:	4b07      	ldr	r3, [pc, #28]	@ (8001190 <HAL_TIM_Base_MspInit+0x90>)
 8001174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]
}
 800117e:	bf00      	nop
 8001180:	371c      	adds	r7, #28
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	40010000 	.word	0x40010000
 8001190:	40023800 	.word	0x40023800
 8001194:	40000400 	.word	0x40000400

08001198 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	@ 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 031c 	add.w	r3, r7, #28
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a46      	ldr	r2, [pc, #280]	@ (80012d0 <HAL_TIM_MspPostInit+0x138>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d11f      	bne.n	80011fa <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	61bb      	str	r3, [r7, #24]
 80011be:	4b45      	ldr	r3, [pc, #276]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a44      	ldr	r2, [pc, #272]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b42      	ldr	r3, [pc, #264]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	61bb      	str	r3, [r7, #24]
 80011d4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80011d6:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 80011da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011dc:	2302      	movs	r3, #2
 80011de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e4:	2300      	movs	r3, #0
 80011e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ec:	f107 031c 	add.w	r3, r7, #28
 80011f0:	4619      	mov	r1, r3
 80011f2:	4839      	ldr	r0, [pc, #228]	@ (80012d8 <HAL_TIM_MspPostInit+0x140>)
 80011f4:	f001 f920 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80011f8:	e065      	b.n	80012c6 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM2)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001202:	d13d      	bne.n	8001280 <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]
 8001208:	4b32      	ldr	r3, [pc, #200]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 800120a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120c:	4a31      	ldr	r2, [pc, #196]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 800120e:	f043 0301 	orr.w	r3, r3, #1
 8001212:	6313      	str	r3, [r2, #48]	@ 0x30
 8001214:	4b2f      	ldr	r3, [pc, #188]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 8001216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001218:	f003 0301 	and.w	r3, r3, #1
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001228:	4a2a      	ldr	r2, [pc, #168]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 800122a:	f043 0302 	orr.w	r3, r3, #2
 800122e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001230:	4b28      	ldr	r3, [pc, #160]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 8001232:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001234:	f003 0302 	and.w	r3, r3, #2
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800123c:	2301      	movs	r3, #1
 800123e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800124c:	2301      	movs	r3, #1
 800124e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	4820      	ldr	r0, [pc, #128]	@ (80012d8 <HAL_TIM_MspPostInit+0x140>)
 8001258:	f001 f8ee 	bl	8002438 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800125c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001260:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001262:	2302      	movs	r3, #2
 8001264:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800126e:	2301      	movs	r3, #1
 8001270:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	4619      	mov	r1, r3
 8001278:	4818      	ldr	r0, [pc, #96]	@ (80012dc <HAL_TIM_MspPostInit+0x144>)
 800127a:	f001 f8dd 	bl	8002438 <HAL_GPIO_Init>
}
 800127e:	e022      	b.n	80012c6 <HAL_TIM_MspPostInit+0x12e>
  else if(htim->Instance==TIM3)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4a16      	ldr	r2, [pc, #88]	@ (80012e0 <HAL_TIM_MspPostInit+0x148>)
 8001286:	4293      	cmp	r3, r2
 8001288:	d11d      	bne.n	80012c6 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128a:	2300      	movs	r3, #0
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 8001290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001292:	4a10      	ldr	r2, [pc, #64]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	6313      	str	r3, [r2, #48]	@ 0x30
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <HAL_TIM_MspPostInit+0x13c>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	f003 0302 	and.w	r3, r3, #2
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80012a6:	2330      	movs	r3, #48	@ 0x30
 80012a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012aa:	2302      	movs	r3, #2
 80012ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	2300      	movs	r3, #0
 80012b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b2:	2300      	movs	r3, #0
 80012b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012ba:	f107 031c 	add.w	r3, r7, #28
 80012be:	4619      	mov	r1, r3
 80012c0:	4806      	ldr	r0, [pc, #24]	@ (80012dc <HAL_TIM_MspPostInit+0x144>)
 80012c2:	f001 f8b9 	bl	8002438 <HAL_GPIO_Init>
}
 80012c6:	bf00      	nop
 80012c8:	3730      	adds	r7, #48	@ 0x30
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40010000 	.word	0x40010000
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020000 	.word	0x40020000
 80012dc:	40020400 	.word	0x40020400
 80012e0:	40000400 	.word	0x40000400

080012e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08a      	sub	sp, #40	@ 0x28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]
 80012f8:	60da      	str	r2, [r3, #12]
 80012fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a19      	ldr	r2, [pc, #100]	@ (8001368 <HAL_UART_MspInit+0x84>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d12b      	bne.n	800135e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	613b      	str	r3, [r7, #16]
 800130a:	4b18      	ldr	r3, [pc, #96]	@ (800136c <HAL_UART_MspInit+0x88>)
 800130c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130e:	4a17      	ldr	r2, [pc, #92]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001310:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001314:	6413      	str	r3, [r2, #64]	@ 0x40
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800131a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800131e:	613b      	str	r3, [r7, #16]
 8001320:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <HAL_UART_MspInit+0x88>)
 800132c:	f043 0301 	orr.w	r3, r3, #1
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_UART_MspInit+0x88>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800133e:	230c      	movs	r3, #12
 8001340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800134a:	2303      	movs	r3, #3
 800134c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800134e:	2307      	movs	r3, #7
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <HAL_UART_MspInit+0x8c>)
 800135a:	f001 f86d 	bl	8002438 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3728      	adds	r7, #40	@ 0x28
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40004400 	.word	0x40004400
 800136c:	40023800 	.word	0x40023800
 8001370:	40020000 	.word	0x40020000

08001374 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <NMI_Handler+0x4>

0800137c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <HardFault_Handler+0x4>

08001384 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001388:	bf00      	nop
 800138a:	e7fd      	b.n	8001388 <MemManage_Handler+0x4>

0800138c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800138c:	b480      	push	{r7}
 800138e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001390:	bf00      	nop
 8001392:	e7fd      	b.n	8001390 <BusFault_Handler+0x4>

08001394 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001398:	bf00      	nop
 800139a:	e7fd      	b.n	8001398 <UsageFault_Handler+0x4>

0800139c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013a0:	bf00      	nop
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013aa:	b480      	push	{r7}
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ae:	bf00      	nop
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013b8:	b480      	push	{r7}
 80013ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr

080013c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013ca:	f000 f89b 	bl	8001504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
	...

080013d4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <CAN1_RX0_IRQHandler+0x10>)
 80013da:	f000 fceb 	bl	8001db4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000028 	.word	0x20000028

080013e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013ec:	4b06      	ldr	r3, [pc, #24]	@ (8001408 <SystemInit+0x20>)
 80013ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013f2:	4a05      	ldr	r2, [pc, #20]	@ (8001408 <SystemInit+0x20>)
 80013f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013fc:	bf00      	nop
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800140c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001444 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001410:	f7ff ffea 	bl	80013e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001414:	480c      	ldr	r0, [pc, #48]	@ (8001448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001416:	490d      	ldr	r1, [pc, #52]	@ (800144c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001418:	4a0d      	ldr	r2, [pc, #52]	@ (8001450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800141a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800141c:	e002      	b.n	8001424 <LoopCopyDataInit>

0800141e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800141e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001422:	3304      	adds	r3, #4

08001424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001428:	d3f9      	bcc.n	800141e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800142a:	4a0a      	ldr	r2, [pc, #40]	@ (8001454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800142c:	4c0a      	ldr	r4, [pc, #40]	@ (8001458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001430:	e001      	b.n	8001436 <LoopFillZerobss>

08001432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001434:	3204      	adds	r2, #4

08001436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001438:	d3fb      	bcc.n	8001432 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800143a:	f003 f943 	bl	80046c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800143e:	f7ff f8b1 	bl	80005a4 <main>
  bx  lr    
 8001442:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001444:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800144c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001450:	0800474c 	.word	0x0800474c
  ldr r2, =_sbss
 8001454:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001458:	200001c0 	.word	0x200001c0

0800145c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800145c:	e7fe      	b.n	800145c <ADC_IRQHandler>
	...

08001460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001464:	4b0e      	ldr	r3, [pc, #56]	@ (80014a0 <HAL_Init+0x40>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0d      	ldr	r2, [pc, #52]	@ (80014a0 <HAL_Init+0x40>)
 800146a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800146e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001470:	4b0b      	ldr	r3, [pc, #44]	@ (80014a0 <HAL_Init+0x40>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a0a      	ldr	r2, [pc, #40]	@ (80014a0 <HAL_Init+0x40>)
 8001476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800147a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147c:	4b08      	ldr	r3, [pc, #32]	@ (80014a0 <HAL_Init+0x40>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a07      	ldr	r2, [pc, #28]	@ (80014a0 <HAL_Init+0x40>)
 8001482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001488:	2003      	movs	r0, #3
 800148a:	f000 ff93 	bl	80023b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 f808 	bl	80014a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001494:	f7ff fdbc 	bl	8001010 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014ac:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_InitTick+0x54>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <HAL_InitTick+0x58>)
 80014b2:	781b      	ldrb	r3, [r3, #0]
 80014b4:	4619      	mov	r1, r3
 80014b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80014be:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c2:	4618      	mov	r0, r3
 80014c4:	f000 ffab 	bl	800241e <HAL_SYSTICK_Config>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e00e      	b.n	80014f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b0f      	cmp	r3, #15
 80014d6:	d80a      	bhi.n	80014ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014d8:	2200      	movs	r2, #0
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014e0:	f000 ff73 	bl	80023ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014e4:	4a06      	ldr	r2, [pc, #24]	@ (8001500 <HAL_InitTick+0x5c>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
 80014ec:	e000      	b.n	80014f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000000 	.word	0x20000000
 80014fc:	20000008 	.word	0x20000008
 8001500:	20000004 	.word	0x20000004

08001504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001508:	4b06      	ldr	r3, [pc, #24]	@ (8001524 <HAL_IncTick+0x20>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	461a      	mov	r2, r3
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_IncTick+0x24>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4413      	add	r3, r2
 8001514:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <HAL_IncTick+0x24>)
 8001516:	6013      	str	r3, [r2, #0]
}
 8001518:	bf00      	nop
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	20000008 	.word	0x20000008
 8001528:	200001bc 	.word	0x200001bc

0800152c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return uwTick;
 8001530:	4b03      	ldr	r3, [pc, #12]	@ (8001540 <HAL_GetTick+0x14>)
 8001532:	681b      	ldr	r3, [r3, #0]
}
 8001534:	4618      	mov	r0, r3
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	200001bc 	.word	0x200001bc

08001544 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b084      	sub	sp, #16
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d101      	bne.n	8001556 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e0ed      	b.n	8001732 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f893 3020 	ldrb.w	r3, [r3, #32]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	2b00      	cmp	r3, #0
 8001560:	d102      	bne.n	8001568 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001562:	6878      	ldr	r0, [r7, #4]
 8001564:	f7ff fd7c 	bl	8001060 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f042 0201 	orr.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001578:	f7ff ffd8 	bl	800152c <HAL_GetTick>
 800157c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800157e:	e012      	b.n	80015a6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001580:	f7ff ffd4 	bl	800152c <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	2b0a      	cmp	r3, #10
 800158c:	d90b      	bls.n	80015a6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001592:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	2205      	movs	r2, #5
 800159e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e0c5      	b.n	8001732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0301 	and.w	r3, r3, #1
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d0e5      	beq.n	8001580 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 0202 	bic.w	r2, r2, #2
 80015c2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015c4:	f7ff ffb2 	bl	800152c <HAL_GetTick>
 80015c8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015ca:	e012      	b.n	80015f2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015cc:	f7ff ffae 	bl	800152c <HAL_GetTick>
 80015d0:	4602      	mov	r2, r0
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b0a      	cmp	r3, #10
 80015d8:	d90b      	bls.n	80015f2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015de:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2205      	movs	r2, #5
 80015ea:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e09f      	b.n	8001732 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 0302 	and.w	r3, r3, #2
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d1e5      	bne.n	80015cc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	7e1b      	ldrb	r3, [r3, #24]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d108      	bne.n	800161a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	e007      	b.n	800162a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001628:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	7e5b      	ldrb	r3, [r3, #25]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d108      	bne.n	8001644 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	e007      	b.n	8001654 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001652:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	7e9b      	ldrb	r3, [r3, #26]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d108      	bne.n	800166e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f042 0220 	orr.w	r2, r2, #32
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	e007      	b.n	800167e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f022 0220 	bic.w	r2, r2, #32
 800167c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7edb      	ldrb	r3, [r3, #27]
 8001682:	2b01      	cmp	r3, #1
 8001684:	d108      	bne.n	8001698 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f022 0210 	bic.w	r2, r2, #16
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	e007      	b.n	80016a8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f042 0210 	orr.w	r2, r2, #16
 80016a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	7f1b      	ldrb	r3, [r3, #28]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d108      	bne.n	80016c2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f042 0208 	orr.w	r2, r2, #8
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	e007      	b.n	80016d2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0208 	bic.w	r2, r2, #8
 80016d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7f5b      	ldrb	r3, [r3, #29]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d108      	bne.n	80016ec <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0204 	orr.w	r2, r2, #4
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e007      	b.n	80016fc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0204 	bic.w	r2, r2, #4
 80016fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689a      	ldr	r2, [r3, #8]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	431a      	orrs	r2, r3
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	695b      	ldr	r3, [r3, #20]
 8001710:	ea42 0103 	orr.w	r1, r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	1e5a      	subs	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	430a      	orrs	r2, r1
 8001720:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2201      	movs	r2, #1
 800172c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3710      	adds	r7, #16
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
	...

0800173c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800173c:	b480      	push	{r7}
 800173e:	b087      	sub	sp, #28
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001752:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001754:	7cfb      	ldrb	r3, [r7, #19]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d003      	beq.n	8001762 <HAL_CAN_ConfigFilter+0x26>
 800175a:	7cfb      	ldrb	r3, [r7, #19]
 800175c:	2b02      	cmp	r3, #2
 800175e:	f040 80be 	bne.w	80018de <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001762:	4b65      	ldr	r3, [pc, #404]	@ (80018f8 <HAL_CAN_ConfigFilter+0x1bc>)
 8001764:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800176c:	f043 0201 	orr.w	r2, r3, #1
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800177c:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001790:	021b      	lsls	r3, r3, #8
 8001792:	431a      	orrs	r2, r3
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	2201      	movs	r2, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	43db      	mvns	r3, r3
 80017b4:	401a      	ands	r2, r3
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d123      	bne.n	800180c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	43db      	mvns	r3, r3
 80017ce:	401a      	ands	r2, r3
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	68db      	ldr	r3, [r3, #12]
 80017da:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80017e6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	3248      	adds	r2, #72	@ 0x48
 80017ec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001800:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001802:	6979      	ldr	r1, [r7, #20]
 8001804:	3348      	adds	r3, #72	@ 0x48
 8001806:	00db      	lsls	r3, r3, #3
 8001808:	440b      	add	r3, r1
 800180a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	69db      	ldr	r3, [r3, #28]
 8001810:	2b01      	cmp	r3, #1
 8001812:	d122      	bne.n	800185a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	431a      	orrs	r2, r3
 800181e:	697b      	ldr	r3, [r7, #20]
 8001820:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001834:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	3248      	adds	r2, #72	@ 0x48
 800183a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800184e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001850:	6979      	ldr	r1, [r7, #20]
 8001852:	3348      	adds	r3, #72	@ 0x48
 8001854:	00db      	lsls	r3, r3, #3
 8001856:	440b      	add	r3, r1
 8001858:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2b00      	cmp	r3, #0
 8001860:	d109      	bne.n	8001876 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	43db      	mvns	r3, r3
 800186c:	401a      	ands	r2, r3
 800186e:	697b      	ldr	r3, [r7, #20]
 8001870:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001874:	e007      	b.n	8001886 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	431a      	orrs	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d109      	bne.n	80018a2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	401a      	ands	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 80018a0:	e007      	b.n	80018b2 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	6a1b      	ldr	r3, [r3, #32]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d107      	bne.n	80018ca <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	431a      	orrs	r2, r3
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80018d0:	f023 0201 	bic.w	r2, r3, #1
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e006      	b.n	80018ec <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	371c      	adds	r7, #28
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	40006400 	.word	0x40006400

080018fc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f893 3020 	ldrb.w	r3, [r3, #32]
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d12e      	bne.n	800196e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f022 0201 	bic.w	r2, r2, #1
 8001926:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001928:	f7ff fe00 	bl	800152c <HAL_GetTick>
 800192c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800192e:	e012      	b.n	8001956 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001930:	f7ff fdfc 	bl	800152c <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	1ad3      	subs	r3, r2, r3
 800193a:	2b0a      	cmp	r3, #10
 800193c:	d90b      	bls.n	8001956 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001942:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2205      	movs	r2, #5
 800194e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e012      	b.n	800197c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f003 0301 	and.w	r3, r3, #1
 8001960:	2b00      	cmp	r3, #0
 8001962:	d1e5      	bne.n	8001930 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2200      	movs	r2, #0
 8001968:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800196a:	2300      	movs	r3, #0
 800196c:	e006      	b.n	800197c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001972:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
  }
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001984:	b480      	push	{r7}
 8001986:	b089      	sub	sp, #36	@ 0x24
 8001988:	af00      	add	r7, sp, #0
 800198a:	60f8      	str	r0, [r7, #12]
 800198c:	60b9      	str	r1, [r7, #8]
 800198e:	607a      	str	r2, [r7, #4]
 8001990:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001998:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80019a2:	7ffb      	ldrb	r3, [r7, #31]
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d003      	beq.n	80019b0 <HAL_CAN_AddTxMessage+0x2c>
 80019a8:	7ffb      	ldrb	r3, [r7, #31]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	f040 80ad 	bne.w	8001b0a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d10a      	bne.n	80019d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8095 	beq.w	8001afa <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	0e1b      	lsrs	r3, r3, #24
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80019da:	2201      	movs	r2, #1
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	409a      	lsls	r2, r3
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10d      	bne.n	8001a08 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80019f2:	68bb      	ldr	r3, [r7, #8]
 80019f4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80019f6:	68f9      	ldr	r1, [r7, #12]
 80019f8:	6809      	ldr	r1, [r1, #0]
 80019fa:	431a      	orrs	r2, r3
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3318      	adds	r3, #24
 8001a00:	011b      	lsls	r3, r3, #4
 8001a02:	440b      	add	r3, r1
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	e00f      	b.n	8001a28 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a12:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a18:	68f9      	ldr	r1, [r7, #12]
 8001a1a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001a1c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	3318      	adds	r3, #24
 8001a22:	011b      	lsls	r3, r3, #4
 8001a24:	440b      	add	r3, r1
 8001a26:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	6819      	ldr	r1, [r3, #0]
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	3318      	adds	r3, #24
 8001a34:	011b      	lsls	r3, r3, #4
 8001a36:	440b      	add	r3, r1
 8001a38:	3304      	adds	r3, #4
 8001a3a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	7d1b      	ldrb	r3, [r3, #20]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d111      	bne.n	8001a68 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	3318      	adds	r3, #24
 8001a4c:	011b      	lsls	r3, r3, #4
 8001a4e:	4413      	add	r3, r2
 8001a50:	3304      	adds	r3, #4
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	6811      	ldr	r1, [r2, #0]
 8001a58:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3318      	adds	r3, #24
 8001a60:	011b      	lsls	r3, r3, #4
 8001a62:	440b      	add	r3, r1
 8001a64:	3304      	adds	r3, #4
 8001a66:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3307      	adds	r3, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	061a      	lsls	r2, r3, #24
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	3306      	adds	r3, #6
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	041b      	lsls	r3, r3, #16
 8001a78:	431a      	orrs	r2, r3
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	3305      	adds	r3, #5
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	4313      	orrs	r3, r2
 8001a84:	687a      	ldr	r2, [r7, #4]
 8001a86:	3204      	adds	r2, #4
 8001a88:	7812      	ldrb	r2, [r2, #0]
 8001a8a:	4610      	mov	r0, r2
 8001a8c:	68fa      	ldr	r2, [r7, #12]
 8001a8e:	6811      	ldr	r1, [r2, #0]
 8001a90:	ea43 0200 	orr.w	r2, r3, r0
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	011b      	lsls	r3, r3, #4
 8001a98:	440b      	add	r3, r1
 8001a9a:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001a9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	3303      	adds	r3, #3
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	061a      	lsls	r2, r3, #24
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3302      	adds	r3, #2
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	041b      	lsls	r3, r3, #16
 8001ab0:	431a      	orrs	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	021b      	lsls	r3, r3, #8
 8001aba:	4313      	orrs	r3, r2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	7812      	ldrb	r2, [r2, #0]
 8001ac0:	4610      	mov	r0, r2
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	6811      	ldr	r1, [r2, #0]
 8001ac6:	ea43 0200 	orr.w	r2, r3, r0
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	011b      	lsls	r3, r3, #4
 8001ace:	440b      	add	r3, r1
 8001ad0:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001ad4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3318      	adds	r3, #24
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	68fa      	ldr	r2, [r7, #12]
 8001ae6:	6811      	ldr	r1, [r2, #0]
 8001ae8:	f043 0201 	orr.w	r2, r3, #1
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	3318      	adds	r3, #24
 8001af0:	011b      	lsls	r3, r3, #4
 8001af2:	440b      	add	r3, r1
 8001af4:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001af6:	2300      	movs	r3, #0
 8001af8:	e00e      	b.n	8001b18 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001afe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e006      	b.n	8001b18 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b0e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
  }
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3724      	adds	r7, #36	@ 0x24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
 8001b30:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b38:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001b3a:	7dfb      	ldrb	r3, [r7, #23]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d003      	beq.n	8001b48 <HAL_CAN_GetRxMessage+0x24>
 8001b40:	7dfb      	ldrb	r3, [r7, #23]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	f040 8103 	bne.w	8001d4e <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d10e      	bne.n	8001b6c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f003 0303 	and.w	r3, r3, #3
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d116      	bne.n	8001b8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b60:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e0f7      	b.n	8001d5c <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	691b      	ldr	r3, [r3, #16]
 8001b72:	f003 0303 	and.w	r3, r3, #3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b7e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e0e8      	b.n	8001d5c <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	331b      	adds	r3, #27
 8001b92:	011b      	lsls	r3, r3, #4
 8001b94:	4413      	add	r3, r2
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0204 	and.w	r2, r3, #4
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d10c      	bne.n	8001bc2 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	331b      	adds	r3, #27
 8001bb0:	011b      	lsls	r3, r3, #4
 8001bb2:	4413      	add	r3, r2
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	0d5b      	lsrs	r3, r3, #21
 8001bb8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	e00b      	b.n	8001bda <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	68bb      	ldr	r3, [r7, #8]
 8001bc8:	331b      	adds	r3, #27
 8001bca:	011b      	lsls	r3, r3, #4
 8001bcc:	4413      	add	r3, r2
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	08db      	lsrs	r3, r3, #3
 8001bd2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	331b      	adds	r3, #27
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	4413      	add	r3, r2
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f003 0202 	and.w	r2, r3, #2
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	331b      	adds	r3, #27
 8001bf8:	011b      	lsls	r3, r3, #4
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0308 	and.w	r3, r3, #8
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	611a      	str	r2, [r3, #16]
 8001c0e:	e00b      	b.n	8001c28 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681a      	ldr	r2, [r3, #0]
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	331b      	adds	r3, #27
 8001c18:	011b      	lsls	r3, r3, #4
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3304      	adds	r3, #4
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 020f 	and.w	r2, r3, #15
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	331b      	adds	r3, #27
 8001c30:	011b      	lsls	r3, r3, #4
 8001c32:	4413      	add	r3, r2
 8001c34:	3304      	adds	r3, #4
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	0a1b      	lsrs	r3, r3, #8
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	331b      	adds	r3, #27
 8001c48:	011b      	lsls	r3, r3, #4
 8001c4a:	4413      	add	r3, r2
 8001c4c:	3304      	adds	r3, #4
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	0c1b      	lsrs	r3, r3, #16
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	681a      	ldr	r2, [r3, #0]
 8001c5c:	68bb      	ldr	r3, [r7, #8]
 8001c5e:	011b      	lsls	r3, r3, #4
 8001c60:	4413      	add	r3, r2
 8001c62:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	011b      	lsls	r3, r3, #4
 8001c76:	4413      	add	r3, r2
 8001c78:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	0a1a      	lsrs	r2, r3, #8
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2d2      	uxtb	r2, r2
 8001c86:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	011b      	lsls	r3, r3, #4
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	0c1a      	lsrs	r2, r3, #16
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	b2d2      	uxtb	r2, r2
 8001ca0:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	0e1a      	lsrs	r2, r3, #24
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	3303      	adds	r3, #3
 8001cb8:	b2d2      	uxtb	r2, r2
 8001cba:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3304      	adds	r3, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	0a1a      	lsrs	r2, r3, #8
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	3305      	adds	r3, #5
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	4413      	add	r3, r2
 8001cf8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	0c1a      	lsrs	r2, r3, #16
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	3306      	adds	r3, #6
 8001d04:	b2d2      	uxtb	r2, r2
 8001d06:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	4413      	add	r3, r2
 8001d12:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	0e1a      	lsrs	r2, r3, #24
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	3307      	adds	r3, #7
 8001d1e:	b2d2      	uxtb	r2, r2
 8001d20:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d108      	bne.n	8001d3a <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0220 	orr.w	r2, r2, #32
 8001d36:	60da      	str	r2, [r3, #12]
 8001d38:	e007      	b.n	8001d4a <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	691a      	ldr	r2, [r3, #16]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0220 	orr.w	r2, r2, #32
 8001d48:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	e006      	b.n	8001d5c <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d52:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
  }
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	371c      	adds	r7, #28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
 8001d70:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d78:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001d7a:	7bfb      	ldrb	r3, [r7, #15]
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d002      	beq.n	8001d86 <HAL_CAN_ActivateNotification+0x1e>
 8001d80:	7bfb      	ldrb	r3, [r7, #15]
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d109      	bne.n	8001d9a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6959      	ldr	r1, [r3, #20]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001d96:	2300      	movs	r3, #0
 8001d98:	e006      	b.n	8001da8 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001d9e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
  }
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr

08001db4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b08a      	sub	sp, #40	@ 0x28
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68db      	ldr	r3, [r3, #12]
 8001dde:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	691b      	ldr	r3, [r3, #16]
 8001de6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001df0:	6a3b      	ldr	r3, [r7, #32]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d07c      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d023      	beq.n	8001e4c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	f003 0302 	and.w	r3, r3, #2
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001e16:	6878      	ldr	r0, [r7, #4]
 8001e18:	f000 f983 	bl	8002122 <HAL_CAN_TxMailbox0CompleteCallback>
 8001e1c:	e016      	b.n	8001e4c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001e1e:	69bb      	ldr	r3, [r7, #24]
 8001e20:	f003 0304 	and.w	r3, r3, #4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d004      	beq.n	8001e32 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e30:	e00c      	b.n	8001e4c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	f003 0308 	and.w	r3, r3, #8
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d004      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e44:	e002      	b.n	8001e4c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f989 	bl	800215e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001e4c:	69bb      	ldr	r3, [r7, #24]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d024      	beq.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001e5e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	f000 f963 	bl	8002136 <HAL_CAN_TxMailbox1CompleteCallback>
 8001e70:	e016      	b.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e84:	e00c      	b.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d004      	beq.n	8001e9a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001e90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e96:	627b      	str	r3, [r7, #36]	@ 0x24
 8001e98:	e002      	b.n	8001ea0 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f969 	bl	8002172 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ea0:	69bb      	ldr	r3, [r7, #24]
 8001ea2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d024      	beq.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001eb2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f943 	bl	800214a <HAL_CAN_TxMailbox2CompleteCallback>
 8001ec4:	e016      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ed2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ed6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ed8:	e00c      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d004      	beq.n	8001eee <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eea:	627b      	str	r3, [r7, #36]	@ 0x24
 8001eec:	e002      	b.n	8001ef4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f949 	bl	8002186 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ef4:	6a3b      	ldr	r3, [r7, #32]
 8001ef6:	f003 0308 	and.w	r3, r3, #8
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00c      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d007      	beq.n	8001f18 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f0e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2210      	movs	r2, #16
 8001f16:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001f18:	6a3b      	ldr	r3, [r7, #32]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0308 	and.w	r3, r3, #8
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d006      	beq.n	8001f3a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2208      	movs	r2, #8
 8001f32:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f930 	bl	800219a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001f3a:	6a3b      	ldr	r3, [r7, #32]
 8001f3c:	f003 0302 	and.w	r3, r3, #2
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d009      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f003 0303 	and.w	r3, r3, #3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d002      	beq.n	8001f58 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f7fe fb0e 	bl	8000574 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001f58:	6a3b      	ldr	r3, [r7, #32]
 8001f5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00c      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d007      	beq.n	8001f7c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001f72:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	f003 0320 	and.w	r3, r3, #32
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00b      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d006      	beq.n	8001f9e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2208      	movs	r2, #8
 8001f96:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f912 	bl	80021c2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d009      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0303 	and.w	r3, r3, #3
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8f9 	bl	80021ae <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001fbc:	6a3b      	ldr	r3, [r7, #32]
 8001fbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00b      	beq.n	8001fde <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	f003 0310 	and.w	r3, r3, #16
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d006      	beq.n	8001fde <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2210      	movs	r2, #16
 8001fd6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 f8fc 	bl	80021d6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001fde:	6a3b      	ldr	r3, [r7, #32]
 8001fe0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d006      	beq.n	8002000 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2208      	movs	r2, #8
 8001ff8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f000 f8f5 	bl	80021ea <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002000:	6a3b      	ldr	r3, [r7, #32]
 8002002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d07b      	beq.n	8002102 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f003 0304 	and.w	r3, r3, #4
 8002010:	2b00      	cmp	r3, #0
 8002012:	d072      	beq.n	80020fa <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002014:	6a3b      	ldr	r3, [r7, #32]
 8002016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800201a:	2b00      	cmp	r3, #0
 800201c:	d008      	beq.n	8002030 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	f043 0301 	orr.w	r3, r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002030:	6a3b      	ldr	r3, [r7, #32]
 8002032:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002046:	f043 0302 	orr.w	r3, r3, #2
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002052:	2b00      	cmp	r3, #0
 8002054:	d008      	beq.n	8002068 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800205c:	2b00      	cmp	r3, #0
 800205e:	d003      	beq.n	8002068 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002062:	f043 0304 	orr.w	r3, r3, #4
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002068:	6a3b      	ldr	r3, [r7, #32]
 800206a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800206e:	2b00      	cmp	r3, #0
 8002070:	d043      	beq.n	80020fa <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002078:	2b00      	cmp	r3, #0
 800207a:	d03e      	beq.n	80020fa <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002082:	2b60      	cmp	r3, #96	@ 0x60
 8002084:	d02b      	beq.n	80020de <HAL_CAN_IRQHandler+0x32a>
 8002086:	2b60      	cmp	r3, #96	@ 0x60
 8002088:	d82e      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 800208a:	2b50      	cmp	r3, #80	@ 0x50
 800208c:	d022      	beq.n	80020d4 <HAL_CAN_IRQHandler+0x320>
 800208e:	2b50      	cmp	r3, #80	@ 0x50
 8002090:	d82a      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 8002092:	2b40      	cmp	r3, #64	@ 0x40
 8002094:	d019      	beq.n	80020ca <HAL_CAN_IRQHandler+0x316>
 8002096:	2b40      	cmp	r3, #64	@ 0x40
 8002098:	d826      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 800209a:	2b30      	cmp	r3, #48	@ 0x30
 800209c:	d010      	beq.n	80020c0 <HAL_CAN_IRQHandler+0x30c>
 800209e:	2b30      	cmp	r3, #48	@ 0x30
 80020a0:	d822      	bhi.n	80020e8 <HAL_CAN_IRQHandler+0x334>
 80020a2:	2b10      	cmp	r3, #16
 80020a4:	d002      	beq.n	80020ac <HAL_CAN_IRQHandler+0x2f8>
 80020a6:	2b20      	cmp	r3, #32
 80020a8:	d005      	beq.n	80020b6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80020aa:	e01d      	b.n	80020e8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	f043 0308 	orr.w	r3, r3, #8
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020b4:	e019      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80020b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b8:	f043 0310 	orr.w	r3, r3, #16
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020be:	e014      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80020c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c2:	f043 0320 	orr.w	r3, r3, #32
 80020c6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020c8:	e00f      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80020ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80020d0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020d2:	e00a      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80020d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020dc:	e005      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80020e6:	e000      	b.n	80020ea <HAL_CAN_IRQHandler+0x336>
            break;
 80020e8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	699a      	ldr	r2, [r3, #24]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80020f8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2204      	movs	r2, #4
 8002100:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002104:	2b00      	cmp	r3, #0
 8002106:	d008      	beq.n	800211a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800210c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 f872 	bl	80021fe <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800211a:	bf00      	nop
 800211c:	3728      	adds	r7, #40	@ 0x28
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}

08002122 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002122:	b480      	push	{r7}
 8002124:	b083      	sub	sp, #12
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800212a:	bf00      	nop
 800212c:	370c      	adds	r7, #12
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr

08002136 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002136:	b480      	push	{r7}
 8002138:	b083      	sub	sp, #12
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800214a:	b480      	push	{r7}
 800214c:	b083      	sub	sp, #12
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002152:	bf00      	nop
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80021b6:	bf00      	nop
 80021b8:	370c      	adds	r7, #12
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr

080021c2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80021c2:	b480      	push	{r7}
 80021c4:	b083      	sub	sp, #12
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80021d6:	b480      	push	{r7}
 80021d8:	b083      	sub	sp, #12
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80021ea:	b480      	push	{r7}
 80021ec:	b083      	sub	sp, #12
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80021f2:	bf00      	nop
 80021f4:	370c      	adds	r7, #12
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002206:	bf00      	nop
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002210:	4770      	bx	lr
	...

08002214 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	f003 0307 	and.w	r3, r3, #7
 8002222:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002224:	4b0c      	ldr	r3, [pc, #48]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002230:	4013      	ands	r3, r2
 8002232:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800223c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002240:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002244:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002246:	4a04      	ldr	r2, [pc, #16]	@ (8002258 <__NVIC_SetPriorityGrouping+0x44>)
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	60d3      	str	r3, [r2, #12]
}
 800224c:	bf00      	nop
 800224e:	3714      	adds	r7, #20
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002260:	4b04      	ldr	r3, [pc, #16]	@ (8002274 <__NVIC_GetPriorityGrouping+0x18>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	0a1b      	lsrs	r3, r3, #8
 8002266:	f003 0307 	and.w	r3, r3, #7
}
 800226a:	4618      	mov	r0, r3
 800226c:	46bd      	mov	sp, r7
 800226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002272:	4770      	bx	lr
 8002274:	e000ed00 	.word	0xe000ed00

08002278 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002278:	b480      	push	{r7}
 800227a:	b083      	sub	sp, #12
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002286:	2b00      	cmp	r3, #0
 8002288:	db0b      	blt.n	80022a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800228a:	79fb      	ldrb	r3, [r7, #7]
 800228c:	f003 021f 	and.w	r2, r3, #31
 8002290:	4907      	ldr	r1, [pc, #28]	@ (80022b0 <__NVIC_EnableIRQ+0x38>)
 8002292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002296:	095b      	lsrs	r3, r3, #5
 8002298:	2001      	movs	r0, #1
 800229a:	fa00 f202 	lsl.w	r2, r0, r2
 800229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	e000e100 	.word	0xe000e100

080022b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	4603      	mov	r3, r0
 80022bc:	6039      	str	r1, [r7, #0]
 80022be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	db0a      	blt.n	80022de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	b2da      	uxtb	r2, r3
 80022cc:	490c      	ldr	r1, [pc, #48]	@ (8002300 <__NVIC_SetPriority+0x4c>)
 80022ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022d2:	0112      	lsls	r2, r2, #4
 80022d4:	b2d2      	uxtb	r2, r2
 80022d6:	440b      	add	r3, r1
 80022d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022dc:	e00a      	b.n	80022f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	b2da      	uxtb	r2, r3
 80022e2:	4908      	ldr	r1, [pc, #32]	@ (8002304 <__NVIC_SetPriority+0x50>)
 80022e4:	79fb      	ldrb	r3, [r7, #7]
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	3b04      	subs	r3, #4
 80022ec:	0112      	lsls	r2, r2, #4
 80022ee:	b2d2      	uxtb	r2, r2
 80022f0:	440b      	add	r3, r1
 80022f2:	761a      	strb	r2, [r3, #24]
}
 80022f4:	bf00      	nop
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr
 8002300:	e000e100 	.word	0xe000e100
 8002304:	e000ed00 	.word	0xe000ed00

08002308 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002308:	b480      	push	{r7}
 800230a:	b089      	sub	sp, #36	@ 0x24
 800230c:	af00      	add	r7, sp, #0
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	60b9      	str	r1, [r7, #8]
 8002312:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f003 0307 	and.w	r3, r3, #7
 800231a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f1c3 0307 	rsb	r3, r3, #7
 8002322:	2b04      	cmp	r3, #4
 8002324:	bf28      	it	cs
 8002326:	2304      	movcs	r3, #4
 8002328:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3304      	adds	r3, #4
 800232e:	2b06      	cmp	r3, #6
 8002330:	d902      	bls.n	8002338 <NVIC_EncodePriority+0x30>
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	3b03      	subs	r3, #3
 8002336:	e000      	b.n	800233a <NVIC_EncodePriority+0x32>
 8002338:	2300      	movs	r3, #0
 800233a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800233c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	fa02 f303 	lsl.w	r3, r2, r3
 8002346:	43da      	mvns	r2, r3
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	401a      	ands	r2, r3
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002350:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	fa01 f303 	lsl.w	r3, r1, r3
 800235a:	43d9      	mvns	r1, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	4313      	orrs	r3, r2
         );
}
 8002362:	4618      	mov	r0, r3
 8002364:	3724      	adds	r7, #36	@ 0x24
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
	...

08002370 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3b01      	subs	r3, #1
 800237c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002380:	d301      	bcc.n	8002386 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002382:	2301      	movs	r3, #1
 8002384:	e00f      	b.n	80023a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002386:	4a0a      	ldr	r2, [pc, #40]	@ (80023b0 <SysTick_Config+0x40>)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3b01      	subs	r3, #1
 800238c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238e:	210f      	movs	r1, #15
 8002390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002394:	f7ff ff8e 	bl	80022b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002398:	4b05      	ldr	r3, [pc, #20]	@ (80023b0 <SysTick_Config+0x40>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239e:	4b04      	ldr	r3, [pc, #16]	@ (80023b0 <SysTick_Config+0x40>)
 80023a0:	2207      	movs	r2, #7
 80023a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	e000e010 	.word	0xe000e010

080023b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023bc:	6878      	ldr	r0, [r7, #4]
 80023be:	f7ff ff29 	bl	8002214 <__NVIC_SetPriorityGrouping>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}

080023ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b086      	sub	sp, #24
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	4603      	mov	r3, r0
 80023d2:	60b9      	str	r1, [r7, #8]
 80023d4:	607a      	str	r2, [r7, #4]
 80023d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d8:	2300      	movs	r3, #0
 80023da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023dc:	f7ff ff3e 	bl	800225c <__NVIC_GetPriorityGrouping>
 80023e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	68b9      	ldr	r1, [r7, #8]
 80023e6:	6978      	ldr	r0, [r7, #20]
 80023e8:	f7ff ff8e 	bl	8002308 <NVIC_EncodePriority>
 80023ec:	4602      	mov	r2, r0
 80023ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff ff5d 	bl	80022b4 <__NVIC_SetPriority>
}
 80023fa:	bf00      	nop
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}

08002402 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	4603      	mov	r3, r0
 800240a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff ff31 	bl	8002278 <__NVIC_EnableIRQ>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b082      	sub	sp, #8
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff ffa2 	bl	8002370 <SysTick_Config>
 800242c:	4603      	mov	r3, r0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002438:	b480      	push	{r7}
 800243a:	b089      	sub	sp, #36	@ 0x24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
 8002440:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800244a:	2300      	movs	r3, #0
 800244c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
 8002452:	e165      	b.n	8002720 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002454:	2201      	movs	r2, #1
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	4013      	ands	r3, r2
 8002466:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002468:	693a      	ldr	r2, [r7, #16]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	429a      	cmp	r2, r3
 800246e:	f040 8154 	bne.w	800271a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	2b01      	cmp	r3, #1
 800247c:	d005      	beq.n	800248a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002486:	2b02      	cmp	r3, #2
 8002488:	d130      	bne.n	80024ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002490:	69fb      	ldr	r3, [r7, #28]
 8002492:	005b      	lsls	r3, r3, #1
 8002494:	2203      	movs	r2, #3
 8002496:	fa02 f303 	lsl.w	r3, r2, r3
 800249a:	43db      	mvns	r3, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4013      	ands	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	fa02 f303 	lsl.w	r3, r2, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4313      	orrs	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	69ba      	ldr	r2, [r7, #24]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024c0:	2201      	movs	r2, #1
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	43db      	mvns	r3, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4013      	ands	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	f003 0201 	and.w	r2, r3, #1
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	fa02 f303 	lsl.w	r3, r2, r3
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	4313      	orrs	r3, r2
 80024e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d017      	beq.n	8002528 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	005b      	lsls	r3, r3, #1
 8002502:	2203      	movs	r2, #3
 8002504:	fa02 f303 	lsl.w	r3, r2, r3
 8002508:	43db      	mvns	r3, r3
 800250a:	69ba      	ldr	r2, [r7, #24]
 800250c:	4013      	ands	r3, r2
 800250e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	fa02 f303 	lsl.w	r3, r2, r3
 800251c:	69ba      	ldr	r2, [r7, #24]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d123      	bne.n	800257c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002534:	69fb      	ldr	r3, [r7, #28]
 8002536:	08da      	lsrs	r2, r3, #3
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3208      	adds	r2, #8
 800253c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002540:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f003 0307 	and.w	r3, r3, #7
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	220f      	movs	r2, #15
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	691a      	ldr	r2, [r3, #16]
 800255c:	69fb      	ldr	r3, [r7, #28]
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	08da      	lsrs	r2, r3, #3
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3208      	adds	r2, #8
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	005b      	lsls	r3, r3, #1
 8002586:	2203      	movs	r2, #3
 8002588:	fa02 f303 	lsl.w	r3, r2, r3
 800258c:	43db      	mvns	r3, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4013      	ands	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f003 0203 	and.w	r2, r3, #3
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80ae 	beq.w	800271a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60fb      	str	r3, [r7, #12]
 80025c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002738 <HAL_GPIO_Init+0x300>)
 80025c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c6:	4a5c      	ldr	r2, [pc, #368]	@ (8002738 <HAL_GPIO_Init+0x300>)
 80025c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ce:	4b5a      	ldr	r3, [pc, #360]	@ (8002738 <HAL_GPIO_Init+0x300>)
 80025d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025da:	4a58      	ldr	r2, [pc, #352]	@ (800273c <HAL_GPIO_Init+0x304>)
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	089b      	lsrs	r3, r3, #2
 80025e0:	3302      	adds	r3, #2
 80025e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e8:	69fb      	ldr	r3, [r7, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	220f      	movs	r2, #15
 80025f2:	fa02 f303 	lsl.w	r3, r2, r3
 80025f6:	43db      	mvns	r3, r3
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	4013      	ands	r3, r2
 80025fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a4f      	ldr	r2, [pc, #316]	@ (8002740 <HAL_GPIO_Init+0x308>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d025      	beq.n	8002652 <HAL_GPIO_Init+0x21a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a4e      	ldr	r2, [pc, #312]	@ (8002744 <HAL_GPIO_Init+0x30c>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d01f      	beq.n	800264e <HAL_GPIO_Init+0x216>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4d      	ldr	r2, [pc, #308]	@ (8002748 <HAL_GPIO_Init+0x310>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d019      	beq.n	800264a <HAL_GPIO_Init+0x212>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a4c      	ldr	r2, [pc, #304]	@ (800274c <HAL_GPIO_Init+0x314>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d013      	beq.n	8002646 <HAL_GPIO_Init+0x20e>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a4b      	ldr	r2, [pc, #300]	@ (8002750 <HAL_GPIO_Init+0x318>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d00d      	beq.n	8002642 <HAL_GPIO_Init+0x20a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a4a      	ldr	r2, [pc, #296]	@ (8002754 <HAL_GPIO_Init+0x31c>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d007      	beq.n	800263e <HAL_GPIO_Init+0x206>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a49      	ldr	r2, [pc, #292]	@ (8002758 <HAL_GPIO_Init+0x320>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d101      	bne.n	800263a <HAL_GPIO_Init+0x202>
 8002636:	2306      	movs	r3, #6
 8002638:	e00c      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800263a:	2307      	movs	r3, #7
 800263c:	e00a      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800263e:	2305      	movs	r3, #5
 8002640:	e008      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 8002642:	2304      	movs	r3, #4
 8002644:	e006      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 8002646:	2303      	movs	r3, #3
 8002648:	e004      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800264a:	2302      	movs	r3, #2
 800264c:	e002      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 800264e:	2301      	movs	r3, #1
 8002650:	e000      	b.n	8002654 <HAL_GPIO_Init+0x21c>
 8002652:	2300      	movs	r3, #0
 8002654:	69fa      	ldr	r2, [r7, #28]
 8002656:	f002 0203 	and.w	r2, r2, #3
 800265a:	0092      	lsls	r2, r2, #2
 800265c:	4093      	lsls	r3, r2
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	4313      	orrs	r3, r2
 8002662:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002664:	4935      	ldr	r1, [pc, #212]	@ (800273c <HAL_GPIO_Init+0x304>)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	089b      	lsrs	r3, r3, #2
 800266a:	3302      	adds	r3, #2
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002672:	4b3a      	ldr	r3, [pc, #232]	@ (800275c <HAL_GPIO_Init+0x324>)
 8002674:	689b      	ldr	r3, [r3, #8]
 8002676:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002678:	693b      	ldr	r3, [r7, #16]
 800267a:	43db      	mvns	r3, r3
 800267c:	69ba      	ldr	r2, [r7, #24]
 800267e:	4013      	ands	r3, r2
 8002680:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d003      	beq.n	8002696 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4313      	orrs	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002696:	4a31      	ldr	r2, [pc, #196]	@ (800275c <HAL_GPIO_Init+0x324>)
 8002698:	69bb      	ldr	r3, [r7, #24]
 800269a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800269c:	4b2f      	ldr	r3, [pc, #188]	@ (800275c <HAL_GPIO_Init+0x324>)
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d003      	beq.n	80026c0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	4313      	orrs	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026c0:	4a26      	ldr	r2, [pc, #152]	@ (800275c <HAL_GPIO_Init+0x324>)
 80026c2:	69bb      	ldr	r3, [r7, #24]
 80026c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026c6:	4b25      	ldr	r3, [pc, #148]	@ (800275c <HAL_GPIO_Init+0x324>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	43db      	mvns	r3, r3
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	4013      	ands	r3, r2
 80026d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d003      	beq.n	80026ea <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80026e2:	69ba      	ldr	r2, [r7, #24]
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ea:	4a1c      	ldr	r2, [pc, #112]	@ (800275c <HAL_GPIO_Init+0x324>)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	@ (800275c <HAL_GPIO_Init+0x324>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	43db      	mvns	r3, r3
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	4013      	ands	r3, r2
 80026fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d003      	beq.n	8002714 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	693b      	ldr	r3, [r7, #16]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002714:	4a11      	ldr	r2, [pc, #68]	@ (800275c <HAL_GPIO_Init+0x324>)
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	3301      	adds	r3, #1
 800271e:	61fb      	str	r3, [r7, #28]
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b0f      	cmp	r3, #15
 8002724:	f67f ae96 	bls.w	8002454 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	3724      	adds	r7, #36	@ 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40023800 	.word	0x40023800
 800273c:	40013800 	.word	0x40013800
 8002740:	40020000 	.word	0x40020000
 8002744:	40020400 	.word	0x40020400
 8002748:	40020800 	.word	0x40020800
 800274c:	40020c00 	.word	0x40020c00
 8002750:	40021000 	.word	0x40021000
 8002754:	40021400 	.word	0x40021400
 8002758:	40021800 	.word	0x40021800
 800275c:	40013c00 	.word	0x40013c00

08002760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	807b      	strh	r3, [r7, #2]
 800276c:	4613      	mov	r3, r2
 800276e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002770:	787b      	ldrb	r3, [r7, #1]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002776:	887a      	ldrh	r2, [r7, #2]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800277c:	e003      	b.n	8002786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800277e:	887b      	ldrh	r3, [r7, #2]
 8002780:	041a      	lsls	r2, r3, #16
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
	...

08002794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d101      	bne.n	80027a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e0cc      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027a8:	4b68      	ldr	r3, [pc, #416]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d90c      	bls.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027b6:	4b65      	ldr	r3, [pc, #404]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	b2d2      	uxtb	r2, r2
 80027bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80027be:	4b63      	ldr	r3, [pc, #396]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	683a      	ldr	r2, [r7, #0]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d001      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0b8      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f003 0302 	and.w	r3, r3, #2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d020      	beq.n	800281e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0304 	and.w	r3, r3, #4
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d005      	beq.n	80027f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027e8:	4b59      	ldr	r3, [pc, #356]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	4a58      	ldr	r2, [pc, #352]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80027ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80027f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d005      	beq.n	800280c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002800:	4b53      	ldr	r3, [pc, #332]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	4a52      	ldr	r2, [pc, #328]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002806:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800280a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800280c:	4b50      	ldr	r3, [pc, #320]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	494d      	ldr	r1, [pc, #308]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 800281a:	4313      	orrs	r3, r2
 800281c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d044      	beq.n	80028b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2b01      	cmp	r3, #1
 8002830:	d107      	bne.n	8002842 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002832:	4b47      	ldr	r3, [pc, #284]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d119      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	e07f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	2b02      	cmp	r3, #2
 8002848:	d003      	beq.n	8002852 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800284e:	2b03      	cmp	r3, #3
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002852:	4b3f      	ldr	r3, [pc, #252]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e06f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002862:	4b3b      	ldr	r3, [pc, #236]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0302 	and.w	r3, r3, #2
 800286a:	2b00      	cmp	r3, #0
 800286c:	d101      	bne.n	8002872 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	e067      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002872:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	f023 0203 	bic.w	r2, r3, #3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	4934      	ldr	r1, [pc, #208]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002880:	4313      	orrs	r3, r2
 8002882:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002884:	f7fe fe52 	bl	800152c <HAL_GetTick>
 8002888:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800288a:	e00a      	b.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800288c:	f7fe fe4e 	bl	800152c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800289a:	4293      	cmp	r3, r2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e04f      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	4b2b      	ldr	r3, [pc, #172]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f003 020c 	and.w	r2, r3, #12
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	009b      	lsls	r3, r3, #2
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d1eb      	bne.n	800288c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028b4:	4b25      	ldr	r3, [pc, #148]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 030f 	and.w	r3, r3, #15
 80028bc:	683a      	ldr	r2, [r7, #0]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d20c      	bcs.n	80028dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c2:	4b22      	ldr	r3, [pc, #136]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	4b20      	ldr	r3, [pc, #128]	@ (800294c <HAL_RCC_ClockConfig+0x1b8>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e032      	b.n	8002942 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d008      	beq.n	80028fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028e8:	4b19      	ldr	r3, [pc, #100]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	4916      	ldr	r1, [pc, #88]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 80028f6:	4313      	orrs	r3, r2
 80028f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0308 	and.w	r3, r3, #8
 8002902:	2b00      	cmp	r3, #0
 8002904:	d009      	beq.n	800291a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002906:	4b12      	ldr	r3, [pc, #72]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	691b      	ldr	r3, [r3, #16]
 8002912:	00db      	lsls	r3, r3, #3
 8002914:	490e      	ldr	r1, [pc, #56]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800291a:	f000 f855 	bl	80029c8 <HAL_RCC_GetSysClockFreq>
 800291e:	4602      	mov	r2, r0
 8002920:	4b0b      	ldr	r3, [pc, #44]	@ (8002950 <HAL_RCC_ClockConfig+0x1bc>)
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	091b      	lsrs	r3, r3, #4
 8002926:	f003 030f 	and.w	r3, r3, #15
 800292a:	490a      	ldr	r1, [pc, #40]	@ (8002954 <HAL_RCC_ClockConfig+0x1c0>)
 800292c:	5ccb      	ldrb	r3, [r1, r3]
 800292e:	fa22 f303 	lsr.w	r3, r2, r3
 8002932:	4a09      	ldr	r2, [pc, #36]	@ (8002958 <HAL_RCC_ClockConfig+0x1c4>)
 8002934:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_RCC_ClockConfig+0x1c8>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fe fdb2 	bl	80014a4 <HAL_InitTick>

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3710      	adds	r7, #16
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40023c00 	.word	0x40023c00
 8002950:	40023800 	.word	0x40023800
 8002954:	08004724 	.word	0x08004724
 8002958:	20000000 	.word	0x20000000
 800295c:	20000004 	.word	0x20000004

08002960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002964:	4b03      	ldr	r3, [pc, #12]	@ (8002974 <HAL_RCC_GetHCLKFreq+0x14>)
 8002966:	681b      	ldr	r3, [r3, #0]
}
 8002968:	4618      	mov	r0, r3
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr
 8002972:	bf00      	nop
 8002974:	20000000 	.word	0x20000000

08002978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002978:	b580      	push	{r7, lr}
 800297a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800297c:	f7ff fff0 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 8002980:	4602      	mov	r2, r0
 8002982:	4b05      	ldr	r3, [pc, #20]	@ (8002998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	0a9b      	lsrs	r3, r3, #10
 8002988:	f003 0307 	and.w	r3, r3, #7
 800298c:	4903      	ldr	r1, [pc, #12]	@ (800299c <HAL_RCC_GetPCLK1Freq+0x24>)
 800298e:	5ccb      	ldrb	r3, [r1, r3]
 8002990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002994:	4618      	mov	r0, r3
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40023800 	.word	0x40023800
 800299c:	08004734 	.word	0x08004734

080029a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80029a4:	f7ff ffdc 	bl	8002960 <HAL_RCC_GetHCLKFreq>
 80029a8:	4602      	mov	r2, r0
 80029aa:	4b05      	ldr	r3, [pc, #20]	@ (80029c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	0b5b      	lsrs	r3, r3, #13
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	4903      	ldr	r1, [pc, #12]	@ (80029c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029bc:	4618      	mov	r0, r3
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40023800 	.word	0x40023800
 80029c4:	08004734 	.word	0x08004734

080029c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029cc:	b0ae      	sub	sp, #184	@ 0xb8
 80029ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80029d6:	2300      	movs	r3, #0
 80029d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80029dc:	2300      	movs	r3, #0
 80029de:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80029e2:	2300      	movs	r3, #0
 80029e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029ee:	4bcb      	ldr	r3, [pc, #812]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b0c      	cmp	r3, #12
 80029f8:	f200 8206 	bhi.w	8002e08 <HAL_RCC_GetSysClockFreq+0x440>
 80029fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002a04 <HAL_RCC_GetSysClockFreq+0x3c>)
 80029fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a02:	bf00      	nop
 8002a04:	08002a39 	.word	0x08002a39
 8002a08:	08002e09 	.word	0x08002e09
 8002a0c:	08002e09 	.word	0x08002e09
 8002a10:	08002e09 	.word	0x08002e09
 8002a14:	08002a41 	.word	0x08002a41
 8002a18:	08002e09 	.word	0x08002e09
 8002a1c:	08002e09 	.word	0x08002e09
 8002a20:	08002e09 	.word	0x08002e09
 8002a24:	08002a49 	.word	0x08002a49
 8002a28:	08002e09 	.word	0x08002e09
 8002a2c:	08002e09 	.word	0x08002e09
 8002a30:	08002e09 	.word	0x08002e09
 8002a34:	08002c39 	.word	0x08002c39
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a38:	4bb9      	ldr	r3, [pc, #740]	@ (8002d20 <HAL_RCC_GetSysClockFreq+0x358>)
 8002a3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 8002a3e:	e1e7      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a40:	4bb8      	ldr	r3, [pc, #736]	@ (8002d24 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002a42:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002a46:	e1e3      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a48:	4bb4      	ldr	r3, [pc, #720]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a50:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a54:	4bb1      	ldr	r3, [pc, #708]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d071      	beq.n	8002b44 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a60:	4bae      	ldr	r3, [pc, #696]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	099b      	lsrs	r3, r3, #6
 8002a66:	2200      	movs	r2, #0
 8002a68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002a6c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002a70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a78:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002a82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002a86:	4622      	mov	r2, r4
 8002a88:	462b      	mov	r3, r5
 8002a8a:	f04f 0000 	mov.w	r0, #0
 8002a8e:	f04f 0100 	mov.w	r1, #0
 8002a92:	0159      	lsls	r1, r3, #5
 8002a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a98:	0150      	lsls	r0, r2, #5
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	1a51      	subs	r1, r2, r1
 8002aa2:	6439      	str	r1, [r7, #64]	@ 0x40
 8002aa4:	4629      	mov	r1, r5
 8002aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aaa:	647b      	str	r3, [r7, #68]	@ 0x44
 8002aac:	f04f 0200 	mov.w	r2, #0
 8002ab0:	f04f 0300 	mov.w	r3, #0
 8002ab4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002ab8:	4649      	mov	r1, r9
 8002aba:	018b      	lsls	r3, r1, #6
 8002abc:	4641      	mov	r1, r8
 8002abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ac2:	4641      	mov	r1, r8
 8002ac4:	018a      	lsls	r2, r1, #6
 8002ac6:	4641      	mov	r1, r8
 8002ac8:	1a51      	subs	r1, r2, r1
 8002aca:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002acc:	4649      	mov	r1, r9
 8002ace:	eb63 0301 	sbc.w	r3, r3, r1
 8002ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002ae0:	4649      	mov	r1, r9
 8002ae2:	00cb      	lsls	r3, r1, #3
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002aea:	4641      	mov	r1, r8
 8002aec:	00ca      	lsls	r2, r1, #3
 8002aee:	4610      	mov	r0, r2
 8002af0:	4619      	mov	r1, r3
 8002af2:	4603      	mov	r3, r0
 8002af4:	4622      	mov	r2, r4
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002afa:	462b      	mov	r3, r5
 8002afc:	460a      	mov	r2, r1
 8002afe:	eb42 0303 	adc.w	r3, r2, r3
 8002b02:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b04:	f04f 0200 	mov.w	r2, #0
 8002b08:	f04f 0300 	mov.w	r3, #0
 8002b0c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b10:	4629      	mov	r1, r5
 8002b12:	024b      	lsls	r3, r1, #9
 8002b14:	4621      	mov	r1, r4
 8002b16:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b1a:	4621      	mov	r1, r4
 8002b1c:	024a      	lsls	r2, r1, #9
 8002b1e:	4610      	mov	r0, r2
 8002b20:	4619      	mov	r1, r3
 8002b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002b26:	2200      	movs	r2, #0
 8002b28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002b2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002b30:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002b34:	f7fd fb66 	bl	8000204 <__aeabi_uldivmod>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b42:	e067      	b.n	8002c14 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b44:	4b75      	ldr	r3, [pc, #468]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	099b      	lsrs	r3, r3, #6
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002b50:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002b54:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002b58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b5c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002b5e:	2300      	movs	r3, #0
 8002b60:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002b62:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002b66:	4622      	mov	r2, r4
 8002b68:	462b      	mov	r3, r5
 8002b6a:	f04f 0000 	mov.w	r0, #0
 8002b6e:	f04f 0100 	mov.w	r1, #0
 8002b72:	0159      	lsls	r1, r3, #5
 8002b74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b78:	0150      	lsls	r0, r2, #5
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	4621      	mov	r1, r4
 8002b80:	1a51      	subs	r1, r2, r1
 8002b82:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002b84:	4629      	mov	r1, r5
 8002b86:	eb63 0301 	sbc.w	r3, r3, r1
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	f04f 0300 	mov.w	r3, #0
 8002b94:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002b98:	4649      	mov	r1, r9
 8002b9a:	018b      	lsls	r3, r1, #6
 8002b9c:	4641      	mov	r1, r8
 8002b9e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ba2:	4641      	mov	r1, r8
 8002ba4:	018a      	lsls	r2, r1, #6
 8002ba6:	4641      	mov	r1, r8
 8002ba8:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bac:	4649      	mov	r1, r9
 8002bae:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002bbe:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002bc2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bc6:	4692      	mov	sl, r2
 8002bc8:	469b      	mov	fp, r3
 8002bca:	4623      	mov	r3, r4
 8002bcc:	eb1a 0303 	adds.w	r3, sl, r3
 8002bd0:	623b      	str	r3, [r7, #32]
 8002bd2:	462b      	mov	r3, r5
 8002bd4:	eb4b 0303 	adc.w	r3, fp, r3
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bda:	f04f 0200 	mov.w	r2, #0
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002be6:	4629      	mov	r1, r5
 8002be8:	028b      	lsls	r3, r1, #10
 8002bea:	4621      	mov	r1, r4
 8002bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002bf0:	4621      	mov	r1, r4
 8002bf2:	028a      	lsls	r2, r1, #10
 8002bf4:	4610      	mov	r0, r2
 8002bf6:	4619      	mov	r1, r3
 8002bf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c00:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c02:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002c06:	f7fd fafd 	bl	8000204 <__aeabi_uldivmod>
 8002c0a:	4602      	mov	r2, r0
 8002c0c:	460b      	mov	r3, r1
 8002c0e:	4613      	mov	r3, r2
 8002c10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c14:	4b41      	ldr	r3, [pc, #260]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	0c1b      	lsrs	r3, r3, #16
 8002c1a:	f003 0303 	and.w	r3, r3, #3
 8002c1e:	3301      	adds	r3, #1
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8002c26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c2a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c32:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002c36:	e0eb      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c38:	4b38      	ldr	r3, [pc, #224]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c40:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c44:	4b35      	ldr	r3, [pc, #212]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d06b      	beq.n	8002d28 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c50:	4b32      	ldr	r3, [pc, #200]	@ (8002d1c <HAL_RCC_GetSysClockFreq+0x354>)
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	099b      	lsrs	r3, r3, #6
 8002c56:	2200      	movs	r2, #0
 8002c58:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002c5a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002c5c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c62:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c64:	2300      	movs	r3, #0
 8002c66:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c68:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002c6c:	4622      	mov	r2, r4
 8002c6e:	462b      	mov	r3, r5
 8002c70:	f04f 0000 	mov.w	r0, #0
 8002c74:	f04f 0100 	mov.w	r1, #0
 8002c78:	0159      	lsls	r1, r3, #5
 8002c7a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7e:	0150      	lsls	r0, r2, #5
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4621      	mov	r1, r4
 8002c86:	1a51      	subs	r1, r2, r1
 8002c88:	61b9      	str	r1, [r7, #24]
 8002c8a:	4629      	mov	r1, r5
 8002c8c:	eb63 0301 	sbc.w	r3, r3, r1
 8002c90:	61fb      	str	r3, [r7, #28]
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002c9e:	4659      	mov	r1, fp
 8002ca0:	018b      	lsls	r3, r1, #6
 8002ca2:	4651      	mov	r1, sl
 8002ca4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002ca8:	4651      	mov	r1, sl
 8002caa:	018a      	lsls	r2, r1, #6
 8002cac:	4651      	mov	r1, sl
 8002cae:	ebb2 0801 	subs.w	r8, r2, r1
 8002cb2:	4659      	mov	r1, fp
 8002cb4:	eb63 0901 	sbc.w	r9, r3, r1
 8002cb8:	f04f 0200 	mov.w	r2, #0
 8002cbc:	f04f 0300 	mov.w	r3, #0
 8002cc0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002cc4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002cc8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002ccc:	4690      	mov	r8, r2
 8002cce:	4699      	mov	r9, r3
 8002cd0:	4623      	mov	r3, r4
 8002cd2:	eb18 0303 	adds.w	r3, r8, r3
 8002cd6:	613b      	str	r3, [r7, #16]
 8002cd8:	462b      	mov	r3, r5
 8002cda:	eb49 0303 	adc.w	r3, r9, r3
 8002cde:	617b      	str	r3, [r7, #20]
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	f04f 0300 	mov.w	r3, #0
 8002ce8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002cec:	4629      	mov	r1, r5
 8002cee:	024b      	lsls	r3, r1, #9
 8002cf0:	4621      	mov	r1, r4
 8002cf2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002cf6:	4621      	mov	r1, r4
 8002cf8:	024a      	lsls	r2, r1, #9
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002d02:	2200      	movs	r2, #0
 8002d04:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002d06:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002d08:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d0c:	f7fd fa7a 	bl	8000204 <__aeabi_uldivmod>
 8002d10:	4602      	mov	r2, r0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4613      	mov	r3, r2
 8002d16:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002d1a:	e065      	b.n	8002de8 <HAL_RCC_GetSysClockFreq+0x420>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	00f42400 	.word	0x00f42400
 8002d24:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d28:	4b3d      	ldr	r3, [pc, #244]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	099b      	lsrs	r3, r3, #6
 8002d2e:	2200      	movs	r2, #0
 8002d30:	4618      	mov	r0, r3
 8002d32:	4611      	mov	r1, r2
 8002d34:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d38:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d3e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002d42:	4642      	mov	r2, r8
 8002d44:	464b      	mov	r3, r9
 8002d46:	f04f 0000 	mov.w	r0, #0
 8002d4a:	f04f 0100 	mov.w	r1, #0
 8002d4e:	0159      	lsls	r1, r3, #5
 8002d50:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d54:	0150      	lsls	r0, r2, #5
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4641      	mov	r1, r8
 8002d5c:	1a51      	subs	r1, r2, r1
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	4649      	mov	r1, r9
 8002d62:	eb63 0301 	sbc.w	r3, r3, r1
 8002d66:	60fb      	str	r3, [r7, #12]
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002d74:	4659      	mov	r1, fp
 8002d76:	018b      	lsls	r3, r1, #6
 8002d78:	4651      	mov	r1, sl
 8002d7a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d7e:	4651      	mov	r1, sl
 8002d80:	018a      	lsls	r2, r1, #6
 8002d82:	4651      	mov	r1, sl
 8002d84:	1a54      	subs	r4, r2, r1
 8002d86:	4659      	mov	r1, fp
 8002d88:	eb63 0501 	sbc.w	r5, r3, r1
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	00eb      	lsls	r3, r5, #3
 8002d96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d9a:	00e2      	lsls	r2, r4, #3
 8002d9c:	4614      	mov	r4, r2
 8002d9e:	461d      	mov	r5, r3
 8002da0:	4643      	mov	r3, r8
 8002da2:	18e3      	adds	r3, r4, r3
 8002da4:	603b      	str	r3, [r7, #0]
 8002da6:	464b      	mov	r3, r9
 8002da8:	eb45 0303 	adc.w	r3, r5, r3
 8002dac:	607b      	str	r3, [r7, #4]
 8002dae:	f04f 0200 	mov.w	r2, #0
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dba:	4629      	mov	r1, r5
 8002dbc:	028b      	lsls	r3, r1, #10
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002dc4:	4621      	mov	r1, r4
 8002dc6:	028a      	lsls	r2, r1, #10
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4619      	mov	r1, r3
 8002dcc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002dd4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002dd6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dda:	f7fd fa13 	bl	8000204 <__aeabi_uldivmod>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4613      	mov	r3, r2
 8002de4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002de8:	4b0d      	ldr	r3, [pc, #52]	@ (8002e20 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	0f1b      	lsrs	r3, r3, #28
 8002dee:	f003 0307 	and.w	r3, r3, #7
 8002df2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8002df6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e02:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e06:	e003      	b.n	8002e10 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e08:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002e0a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002e0e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	37b8      	adds	r7, #184	@ 0xb8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e1e:	bf00      	nop
 8002e20:	40023800 	.word	0x40023800
 8002e24:	00f42400 	.word	0x00f42400

08002e28 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d101      	bne.n	8002e3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e28d      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	f000 8083 	beq.w	8002f4e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e48:	4b94      	ldr	r3, [pc, #592]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e4a:	689b      	ldr	r3, [r3, #8]
 8002e4c:	f003 030c 	and.w	r3, r3, #12
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d019      	beq.n	8002e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e54:	4b91      	ldr	r3, [pc, #580]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d106      	bne.n	8002e6e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e60:	4b8e      	ldr	r3, [pc, #568]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e68:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e6c:	d00c      	beq.n	8002e88 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e6e:	4b8b      	ldr	r3, [pc, #556]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002e76:	2b0c      	cmp	r3, #12
 8002e78:	d112      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e7a:	4b88      	ldr	r3, [pc, #544]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e86:	d10b      	bne.n	8002ea0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e88:	4b84      	ldr	r3, [pc, #528]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d05b      	beq.n	8002f4c <HAL_RCC_OscConfig+0x124>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d157      	bne.n	8002f4c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e25a      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ea8:	d106      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x90>
 8002eaa:	4b7c      	ldr	r3, [pc, #496]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a7b      	ldr	r2, [pc, #492]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e01d      	b.n	8002ef4 <HAL_RCC_OscConfig+0xcc>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0xb4>
 8002ec2:	4b76      	ldr	r3, [pc, #472]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a75      	ldr	r2, [pc, #468]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ec8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ecc:	6013      	str	r3, [r2, #0]
 8002ece:	4b73      	ldr	r3, [pc, #460]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a72      	ldr	r2, [pc, #456]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ed8:	6013      	str	r3, [r2, #0]
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0xcc>
 8002edc:	4b6f      	ldr	r3, [pc, #444]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a6e      	ldr	r2, [pc, #440]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ee2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ee6:	6013      	str	r3, [r2, #0]
 8002ee8:	4b6c      	ldr	r3, [pc, #432]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a6b      	ldr	r2, [pc, #428]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002eee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ef2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d013      	beq.n	8002f24 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fb16 	bl	800152c <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f04:	f7fe fb12 	bl	800152c <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b64      	cmp	r3, #100	@ 0x64
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e21f      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f16:	4b61      	ldr	r3, [pc, #388]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d0f0      	beq.n	8002f04 <HAL_RCC_OscConfig+0xdc>
 8002f22:	e014      	b.n	8002f4e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f24:	f7fe fb02 	bl	800152c <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f2c:	f7fe fafe 	bl	800152c <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b64      	cmp	r3, #100	@ 0x64
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e20b      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f3e:	4b57      	ldr	r3, [pc, #348]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x104>
 8002f4a:	e000      	b.n	8002f4e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0302 	and.w	r3, r3, #2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d06f      	beq.n	800303a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f5a:	4b50      	ldr	r3, [pc, #320]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 030c 	and.w	r3, r3, #12
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d017      	beq.n	8002f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f66:	4b4d      	ldr	r3, [pc, #308]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d105      	bne.n	8002f7e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f72:	4b4a      	ldr	r3, [pc, #296]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d00b      	beq.n	8002f96 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f7e:	4b47      	ldr	r3, [pc, #284]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002f86:	2b0c      	cmp	r3, #12
 8002f88:	d11c      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f8a:	4b44      	ldr	r3, [pc, #272]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d116      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	4b41      	ldr	r3, [pc, #260]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d005      	beq.n	8002fae <HAL_RCC_OscConfig+0x186>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d001      	beq.n	8002fae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e1d3      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fae:	4b3b      	ldr	r3, [pc, #236]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4937      	ldr	r1, [pc, #220]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fc2:	e03a      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fcc:	4b34      	ldr	r3, [pc, #208]	@ (80030a0 <HAL_RCC_OscConfig+0x278>)
 8002fce:	2201      	movs	r2, #1
 8002fd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd2:	f7fe faab 	bl	800152c <HAL_GetTick>
 8002fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd8:	e008      	b.n	8002fec <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fda:	f7fe faa7 	bl	800152c <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d901      	bls.n	8002fec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e1b4      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fec:	4b2b      	ldr	r3, [pc, #172]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0302 	and.w	r3, r3, #2
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff8:	4b28      	ldr	r3, [pc, #160]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	691b      	ldr	r3, [r3, #16]
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	4925      	ldr	r1, [pc, #148]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8003008:	4313      	orrs	r3, r2
 800300a:	600b      	str	r3, [r1, #0]
 800300c:	e015      	b.n	800303a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800300e:	4b24      	ldr	r3, [pc, #144]	@ (80030a0 <HAL_RCC_OscConfig+0x278>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7fe fa8a 	bl	800152c <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800301c:	f7fe fa86 	bl	800152c <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e193      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800302e:	4b1b      	ldr	r3, [pc, #108]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0302 	and.w	r3, r3, #2
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b00      	cmp	r3, #0
 8003044:	d036      	beq.n	80030b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	695b      	ldr	r3, [r3, #20]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d016      	beq.n	800307c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800304e:	4b15      	ldr	r3, [pc, #84]	@ (80030a4 <HAL_RCC_OscConfig+0x27c>)
 8003050:	2201      	movs	r2, #1
 8003052:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003054:	f7fe fa6a 	bl	800152c <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305c:	f7fe fa66 	bl	800152c <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e173      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800306e:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_RCC_OscConfig+0x274>)
 8003070:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d0f0      	beq.n	800305c <HAL_RCC_OscConfig+0x234>
 800307a:	e01b      	b.n	80030b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800307c:	4b09      	ldr	r3, [pc, #36]	@ (80030a4 <HAL_RCC_OscConfig+0x27c>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003082:	f7fe fa53 	bl	800152c <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003088:	e00e      	b.n	80030a8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800308a:	f7fe fa4f 	bl	800152c <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d907      	bls.n	80030a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e15c      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
 800309c:	40023800 	.word	0x40023800
 80030a0:	42470000 	.word	0x42470000
 80030a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	4b8a      	ldr	r3, [pc, #552]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d1ea      	bne.n	800308a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f000 8097 	beq.w	80031f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030c2:	2300      	movs	r3, #0
 80030c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030c6:	4b83      	ldr	r3, [pc, #524]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	4b7f      	ldr	r3, [pc, #508]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	4a7e      	ldr	r2, [pc, #504]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80030e2:	4b7c      	ldr	r3, [pc, #496]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80030e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ea:	60bb      	str	r3, [r7, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030ee:	2301      	movs	r3, #1
 80030f0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f2:	4b79      	ldr	r3, [pc, #484]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d118      	bne.n	8003130 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030fe:	4b76      	ldr	r3, [pc, #472]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a75      	ldr	r2, [pc, #468]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003108:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800310a:	f7fe fa0f 	bl	800152c <HAL_GetTick>
 800310e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003110:	e008      	b.n	8003124 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003112:	f7fe fa0b 	bl	800152c <HAL_GetTick>
 8003116:	4602      	mov	r2, r0
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	1ad3      	subs	r3, r2, r3
 800311c:	2b02      	cmp	r3, #2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e118      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003124:	4b6c      	ldr	r3, [pc, #432]	@ (80032d8 <HAL_RCC_OscConfig+0x4b0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	2b00      	cmp	r3, #0
 800312e:	d0f0      	beq.n	8003112 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d106      	bne.n	8003146 <HAL_RCC_OscConfig+0x31e>
 8003138:	4b66      	ldr	r3, [pc, #408]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a65      	ldr	r2, [pc, #404]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
 8003144:	e01c      	b.n	8003180 <HAL_RCC_OscConfig+0x358>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	2b05      	cmp	r3, #5
 800314c:	d10c      	bne.n	8003168 <HAL_RCC_OscConfig+0x340>
 800314e:	4b61      	ldr	r3, [pc, #388]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003150:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003152:	4a60      	ldr	r2, [pc, #384]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003154:	f043 0304 	orr.w	r3, r3, #4
 8003158:	6713      	str	r3, [r2, #112]	@ 0x70
 800315a:	4b5e      	ldr	r3, [pc, #376]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315e:	4a5d      	ldr	r2, [pc, #372]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003160:	f043 0301 	orr.w	r3, r3, #1
 8003164:	6713      	str	r3, [r2, #112]	@ 0x70
 8003166:	e00b      	b.n	8003180 <HAL_RCC_OscConfig+0x358>
 8003168:	4b5a      	ldr	r3, [pc, #360]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800316a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316c:	4a59      	ldr	r2, [pc, #356]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800316e:	f023 0301 	bic.w	r3, r3, #1
 8003172:	6713      	str	r3, [r2, #112]	@ 0x70
 8003174:	4b57      	ldr	r3, [pc, #348]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003178:	4a56      	ldr	r2, [pc, #344]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800317a:	f023 0304 	bic.w	r3, r3, #4
 800317e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d015      	beq.n	80031b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003188:	f7fe f9d0 	bl	800152c <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe f9cc 	bl	800152c <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0d7      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a6:	4b4b      	ldr	r3, [pc, #300]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d0ee      	beq.n	8003190 <HAL_RCC_OscConfig+0x368>
 80031b2:	e014      	b.n	80031de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b4:	f7fe f9ba 	bl	800152c <HAL_GetTick>
 80031b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031ba:	e00a      	b.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031bc:	f7fe f9b6 	bl	800152c <HAL_GetTick>
 80031c0:	4602      	mov	r2, r0
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	1ad3      	subs	r3, r2, r3
 80031c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d901      	bls.n	80031d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e0c1      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031d2:	4b40      	ldr	r3, [pc, #256]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d1ee      	bne.n	80031bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031de:	7dfb      	ldrb	r3, [r7, #23]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d105      	bne.n	80031f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031e4:	4b3b      	ldr	r3, [pc, #236]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	4a3a      	ldr	r2, [pc, #232]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	699b      	ldr	r3, [r3, #24]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80ad 	beq.w	8003354 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031fa:	4b36      	ldr	r3, [pc, #216]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 030c 	and.w	r3, r3, #12
 8003202:	2b08      	cmp	r3, #8
 8003204:	d060      	beq.n	80032c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b02      	cmp	r3, #2
 800320c:	d145      	bne.n	800329a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800320e:	4b33      	ldr	r3, [pc, #204]	@ (80032dc <HAL_RCC_OscConfig+0x4b4>)
 8003210:	2200      	movs	r2, #0
 8003212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003214:	f7fe f98a 	bl	800152c <HAL_GetTick>
 8003218:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321a:	e008      	b.n	800322e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800321c:	f7fe f986 	bl	800152c <HAL_GetTick>
 8003220:	4602      	mov	r2, r0
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d901      	bls.n	800322e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e093      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800322e:	4b29      	ldr	r3, [pc, #164]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d1f0      	bne.n	800321c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	69da      	ldr	r2, [r3, #28]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	019b      	lsls	r3, r3, #6
 800324a:	431a      	orrs	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003250:	085b      	lsrs	r3, r3, #1
 8003252:	3b01      	subs	r3, #1
 8003254:	041b      	lsls	r3, r3, #16
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325c:	061b      	lsls	r3, r3, #24
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003264:	071b      	lsls	r3, r3, #28
 8003266:	491b      	ldr	r1, [pc, #108]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 8003268:	4313      	orrs	r3, r2
 800326a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800326c:	4b1b      	ldr	r3, [pc, #108]	@ (80032dc <HAL_RCC_OscConfig+0x4b4>)
 800326e:	2201      	movs	r2, #1
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003272:	f7fe f95b 	bl	800152c <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800327a:	f7fe f957 	bl	800152c <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e064      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	4b11      	ldr	r3, [pc, #68]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d0f0      	beq.n	800327a <HAL_RCC_OscConfig+0x452>
 8003298:	e05c      	b.n	8003354 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800329a:	4b10      	ldr	r3, [pc, #64]	@ (80032dc <HAL_RCC_OscConfig+0x4b4>)
 800329c:	2200      	movs	r2, #0
 800329e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032a0:	f7fe f944 	bl	800152c <HAL_GetTick>
 80032a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032a6:	e008      	b.n	80032ba <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032a8:	f7fe f940 	bl	800152c <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d901      	bls.n	80032ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80032b6:	2303      	movs	r3, #3
 80032b8:	e04d      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ba:	4b06      	ldr	r3, [pc, #24]	@ (80032d4 <HAL_RCC_OscConfig+0x4ac>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1f0      	bne.n	80032a8 <HAL_RCC_OscConfig+0x480>
 80032c6:	e045      	b.n	8003354 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d107      	bne.n	80032e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e040      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
 80032d4:	40023800 	.word	0x40023800
 80032d8:	40007000 	.word	0x40007000
 80032dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032e0:	4b1f      	ldr	r3, [pc, #124]	@ (8003360 <HAL_RCC_OscConfig+0x538>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	699b      	ldr	r3, [r3, #24]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d030      	beq.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d129      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	429a      	cmp	r2, r3
 8003308:	d122      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800330a:	68fa      	ldr	r2, [r7, #12]
 800330c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003310:	4013      	ands	r3, r2
 8003312:	687a      	ldr	r2, [r7, #4]
 8003314:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003316:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003318:	4293      	cmp	r3, r2
 800331a:	d119      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003326:	085b      	lsrs	r3, r3, #1
 8003328:	3b01      	subs	r3, #1
 800332a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800332c:	429a      	cmp	r2, r3
 800332e:	d10f      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800333a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800333c:	429a      	cmp	r2, r3
 800333e:	d107      	bne.n	8003350 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800334a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800334c:	429a      	cmp	r2, r3
 800334e:	d001      	beq.n	8003354 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e000      	b.n	8003356 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	4618      	mov	r0, r3
 8003358:	3718      	adds	r7, #24
 800335a:	46bd      	mov	sp, r7
 800335c:	bd80      	pop	{r7, pc}
 800335e:	bf00      	nop
 8003360:	40023800 	.word	0x40023800

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e041      	b.n	80033fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd feb8 	bl	8001100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 fad8 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3708      	adds	r7, #8
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b082      	sub	sp, #8
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e041      	b.n	8003498 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b00      	cmp	r3, #0
 800341e:	d106      	bne.n	800342e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f839 	bl	80034a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2202      	movs	r2, #2
 8003432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	3304      	adds	r3, #4
 800343e:	4619      	mov	r1, r3
 8003440:	4610      	mov	r0, r2
 8003442:	f000 fa89 	bl	8003958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2201      	movs	r2, #1
 8003492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003496:	2300      	movs	r3, #0
}
 8003498:	4618      	mov	r0, r3
 800349a:	3708      	adds	r7, #8
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b083      	sub	sp, #12
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034a8:	bf00      	nop
 80034aa:	370c      	adds	r7, #12
 80034ac:	46bd      	mov	sp, r7
 80034ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b2:	4770      	bx	lr

080034b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d109      	bne.n	80034d8 <HAL_TIM_PWM_Start+0x24>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80034ca:	b2db      	uxtb	r3, r3
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	bf14      	ite	ne
 80034d0:	2301      	movne	r3, #1
 80034d2:	2300      	moveq	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e022      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	2b04      	cmp	r3, #4
 80034dc:	d109      	bne.n	80034f2 <HAL_TIM_PWM_Start+0x3e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	bf14      	ite	ne
 80034ea:	2301      	movne	r3, #1
 80034ec:	2300      	moveq	r3, #0
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	e015      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b08      	cmp	r3, #8
 80034f6:	d109      	bne.n	800350c <HAL_TIM_PWM_Start+0x58>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b01      	cmp	r3, #1
 8003502:	bf14      	ite	ne
 8003504:	2301      	movne	r3, #1
 8003506:	2300      	moveq	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	e008      	b.n	800351e <HAL_TIM_PWM_Start+0x6a>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	bf14      	ite	ne
 8003518:	2301      	movne	r3, #1
 800351a:	2300      	moveq	r3, #0
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e07c      	b.n	8003620 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <HAL_TIM_PWM_Start+0x82>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2202      	movs	r2, #2
 8003530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003534:	e013      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	2b04      	cmp	r3, #4
 800353a:	d104      	bne.n	8003546 <HAL_TIM_PWM_Start+0x92>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2202      	movs	r2, #2
 8003540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003544:	e00b      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b08      	cmp	r3, #8
 800354a:	d104      	bne.n	8003556 <HAL_TIM_PWM_Start+0xa2>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2202      	movs	r2, #2
 8003550:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003554:	e003      	b.n	800355e <HAL_TIM_PWM_Start+0xaa>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2202      	movs	r2, #2
 800355a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	2201      	movs	r2, #1
 8003564:	6839      	ldr	r1, [r7, #0]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fcec 	bl	8003f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a2d      	ldr	r2, [pc, #180]	@ (8003628 <HAL_TIM_PWM_Start+0x174>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <HAL_TIM_PWM_Start+0xcc>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a2c      	ldr	r2, [pc, #176]	@ (800362c <HAL_TIM_PWM_Start+0x178>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d101      	bne.n	8003584 <HAL_TIM_PWM_Start+0xd0>
 8003580:	2301      	movs	r3, #1
 8003582:	e000      	b.n	8003586 <HAL_TIM_PWM_Start+0xd2>
 8003584:	2300      	movs	r3, #0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d007      	beq.n	800359a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003598:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a22      	ldr	r2, [pc, #136]	@ (8003628 <HAL_TIM_PWM_Start+0x174>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d022      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ac:	d01d      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1f      	ldr	r2, [pc, #124]	@ (8003630 <HAL_TIM_PWM_Start+0x17c>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d018      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a1d      	ldr	r2, [pc, #116]	@ (8003634 <HAL_TIM_PWM_Start+0x180>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d013      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a1c      	ldr	r2, [pc, #112]	@ (8003638 <HAL_TIM_PWM_Start+0x184>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a16      	ldr	r2, [pc, #88]	@ (800362c <HAL_TIM_PWM_Start+0x178>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d009      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a18      	ldr	r2, [pc, #96]	@ (800363c <HAL_TIM_PWM_Start+0x188>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_TIM_PWM_Start+0x136>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a16      	ldr	r2, [pc, #88]	@ (8003640 <HAL_TIM_PWM_Start+0x18c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d111      	bne.n	800360e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2b06      	cmp	r3, #6
 80035fa:	d010      	beq.n	800361e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0201 	orr.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800360c:	e007      	b.n	800361e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0201 	orr.w	r2, r2, #1
 800361c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3710      	adds	r7, #16
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	40010000 	.word	0x40010000
 800362c:	40010400 	.word	0x40010400
 8003630:	40000400 	.word	0x40000400
 8003634:	40000800 	.word	0x40000800
 8003638:	40000c00 	.word	0x40000c00
 800363c:	40014000 	.word	0x40014000
 8003640:	40001800 	.word	0x40001800

08003644 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b086      	sub	sp, #24
 8003648:	af00      	add	r7, sp, #0
 800364a:	60f8      	str	r0, [r7, #12]
 800364c:	60b9      	str	r1, [r7, #8]
 800364e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800365a:	2b01      	cmp	r3, #1
 800365c:	d101      	bne.n	8003662 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800365e:	2302      	movs	r3, #2
 8003660:	e0ae      	b.n	80037c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2201      	movs	r2, #1
 8003666:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b0c      	cmp	r3, #12
 800366e:	f200 809f 	bhi.w	80037b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003672:	a201      	add	r2, pc, #4	@ (adr r2, 8003678 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003678:	080036ad 	.word	0x080036ad
 800367c:	080037b1 	.word	0x080037b1
 8003680:	080037b1 	.word	0x080037b1
 8003684:	080037b1 	.word	0x080037b1
 8003688:	080036ed 	.word	0x080036ed
 800368c:	080037b1 	.word	0x080037b1
 8003690:	080037b1 	.word	0x080037b1
 8003694:	080037b1 	.word	0x080037b1
 8003698:	0800372f 	.word	0x0800372f
 800369c:	080037b1 	.word	0x080037b1
 80036a0:	080037b1 	.word	0x080037b1
 80036a4:	080037b1 	.word	0x080037b1
 80036a8:	0800376f 	.word	0x0800376f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f000 f9fc 	bl	8003ab0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	699a      	ldr	r2, [r3, #24]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0204 	bic.w	r2, r2, #4
 80036d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	6999      	ldr	r1, [r3, #24]
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	691a      	ldr	r2, [r3, #16]
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	430a      	orrs	r2, r1
 80036e8:	619a      	str	r2, [r3, #24]
      break;
 80036ea:	e064      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 fa4c 	bl	8003b90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	699a      	ldr	r2, [r3, #24]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003706:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	699a      	ldr	r2, [r3, #24]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003716:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6999      	ldr	r1, [r3, #24]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	021a      	lsls	r2, r3, #8
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	430a      	orrs	r2, r1
 800372a:	619a      	str	r2, [r3, #24]
      break;
 800372c:	e043      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68b9      	ldr	r1, [r7, #8]
 8003734:	4618      	mov	r0, r3
 8003736:	f000 faa1 	bl	8003c7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	69da      	ldr	r2, [r3, #28]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f042 0208 	orr.w	r2, r2, #8
 8003748:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	69da      	ldr	r2, [r3, #28]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f022 0204 	bic.w	r2, r2, #4
 8003758:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	69d9      	ldr	r1, [r3, #28]
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	691a      	ldr	r2, [r3, #16]
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	61da      	str	r2, [r3, #28]
      break;
 800376c:	e023      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68b9      	ldr	r1, [r7, #8]
 8003774:	4618      	mov	r0, r3
 8003776:	f000 faf5 	bl	8003d64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	69da      	ldr	r2, [r3, #28]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003788:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	69da      	ldr	r2, [r3, #28]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003798:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	69d9      	ldr	r1, [r3, #28]
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	021a      	lsls	r2, r3, #8
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	61da      	str	r2, [r3, #28]
      break;
 80037ae:	e002      	b.n	80037b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037b0:	2301      	movs	r3, #1
 80037b2:	75fb      	strb	r3, [r7, #23]
      break;
 80037b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037be:	7dfb      	ldrb	r3, [r7, #23]
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3718      	adds	r7, #24
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037d2:	2300      	movs	r3, #0
 80037d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d101      	bne.n	80037e4 <HAL_TIM_ConfigClockSource+0x1c>
 80037e0:	2302      	movs	r3, #2
 80037e2:	e0b4      	b.n	800394e <HAL_TIM_ConfigClockSource+0x186>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003802:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800380a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68ba      	ldr	r2, [r7, #8]
 8003812:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	d03e      	beq.n	800389c <HAL_TIM_ConfigClockSource+0xd4>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	f200 8087 	bhi.w	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003826:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382a:	f000 8086 	beq.w	800393a <HAL_TIM_ConfigClockSource+0x172>
 800382e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003832:	d87f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003834:	2b70      	cmp	r3, #112	@ 0x70
 8003836:	d01a      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xa6>
 8003838:	2b70      	cmp	r3, #112	@ 0x70
 800383a:	d87b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800383c:	2b60      	cmp	r3, #96	@ 0x60
 800383e:	d050      	beq.n	80038e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003840:	2b60      	cmp	r3, #96	@ 0x60
 8003842:	d877      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003844:	2b50      	cmp	r3, #80	@ 0x50
 8003846:	d03c      	beq.n	80038c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003848:	2b50      	cmp	r3, #80	@ 0x50
 800384a:	d873      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800384c:	2b40      	cmp	r3, #64	@ 0x40
 800384e:	d058      	beq.n	8003902 <HAL_TIM_ConfigClockSource+0x13a>
 8003850:	2b40      	cmp	r3, #64	@ 0x40
 8003852:	d86f      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003854:	2b30      	cmp	r3, #48	@ 0x30
 8003856:	d064      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	2b30      	cmp	r3, #48	@ 0x30
 800385a:	d86b      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 800385c:	2b20      	cmp	r3, #32
 800385e:	d060      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003860:	2b20      	cmp	r3, #32
 8003862:	d867      	bhi.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
 8003864:	2b00      	cmp	r3, #0
 8003866:	d05c      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 8003868:	2b10      	cmp	r3, #16
 800386a:	d05a      	beq.n	8003922 <HAL_TIM_ConfigClockSource+0x15a>
 800386c:	e062      	b.n	8003934 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800387e:	f000 fb41 	bl	8003f04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003890:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	609a      	str	r2, [r3, #8]
      break;
 800389a:	e04f      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ac:	f000 fb2a 	bl	8003f04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689a      	ldr	r2, [r3, #8]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038be:	609a      	str	r2, [r3, #8]
      break;
 80038c0:	e03c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ce:	461a      	mov	r2, r3
 80038d0:	f000 fa9e 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	2150      	movs	r1, #80	@ 0x50
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 faf7 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 80038e0:	e02c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ee:	461a      	mov	r2, r3
 80038f0:	f000 fabd 	bl	8003e6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	2160      	movs	r1, #96	@ 0x60
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 fae7 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003900:	e01c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390e:	461a      	mov	r2, r3
 8003910:	f000 fa7e 	bl	8003e10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2140      	movs	r1, #64	@ 0x40
 800391a:	4618      	mov	r0, r3
 800391c:	f000 fad7 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003920:	e00c      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4619      	mov	r1, r3
 800392c:	4610      	mov	r0, r2
 800392e:	f000 face 	bl	8003ece <TIM_ITRx_SetConfig>
      break;
 8003932:	e003      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	73fb      	strb	r3, [r7, #15]
      break;
 8003938:	e000      	b.n	800393c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800393a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a46      	ldr	r2, [pc, #280]	@ (8003a84 <TIM_Base_SetConfig+0x12c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d013      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003976:	d00f      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a43      	ldr	r2, [pc, #268]	@ (8003a88 <TIM_Base_SetConfig+0x130>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d00b      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a42      	ldr	r2, [pc, #264]	@ (8003a8c <TIM_Base_SetConfig+0x134>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d007      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a41      	ldr	r2, [pc, #260]	@ (8003a90 <TIM_Base_SetConfig+0x138>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d003      	beq.n	8003998 <TIM_Base_SetConfig+0x40>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a40      	ldr	r2, [pc, #256]	@ (8003a94 <TIM_Base_SetConfig+0x13c>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d108      	bne.n	80039aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800399e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	68fa      	ldr	r2, [r7, #12]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a35      	ldr	r2, [pc, #212]	@ (8003a84 <TIM_Base_SetConfig+0x12c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d02b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b8:	d027      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a32      	ldr	r2, [pc, #200]	@ (8003a88 <TIM_Base_SetConfig+0x130>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d023      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a31      	ldr	r2, [pc, #196]	@ (8003a8c <TIM_Base_SetConfig+0x134>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d01f      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a30      	ldr	r2, [pc, #192]	@ (8003a90 <TIM_Base_SetConfig+0x138>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d01b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2f      	ldr	r2, [pc, #188]	@ (8003a94 <TIM_Base_SetConfig+0x13c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d017      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2e      	ldr	r2, [pc, #184]	@ (8003a98 <TIM_Base_SetConfig+0x140>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d013      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2d      	ldr	r2, [pc, #180]	@ (8003a9c <TIM_Base_SetConfig+0x144>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d00f      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a2c      	ldr	r2, [pc, #176]	@ (8003aa0 <TIM_Base_SetConfig+0x148>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d00b      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a2b      	ldr	r2, [pc, #172]	@ (8003aa4 <TIM_Base_SetConfig+0x14c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d007      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a2a      	ldr	r2, [pc, #168]	@ (8003aa8 <TIM_Base_SetConfig+0x150>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d003      	beq.n	8003a0a <TIM_Base_SetConfig+0xb2>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a29      	ldr	r2, [pc, #164]	@ (8003aac <TIM_Base_SetConfig+0x154>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d108      	bne.n	8003a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	695b      	ldr	r3, [r3, #20]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	689a      	ldr	r2, [r3, #8]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	4a10      	ldr	r2, [pc, #64]	@ (8003a84 <TIM_Base_SetConfig+0x12c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d003      	beq.n	8003a50 <TIM_Base_SetConfig+0xf8>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	4a12      	ldr	r2, [pc, #72]	@ (8003a94 <TIM_Base_SetConfig+0x13c>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d103      	bne.n	8003a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	691a      	ldr	r2, [r3, #16]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	691b      	ldr	r3, [r3, #16]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d105      	bne.n	8003a76 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	f023 0201 	bic.w	r2, r3, #1
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]
  }
}
 8003a76:	bf00      	nop
 8003a78:	3714      	adds	r7, #20
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40010000 	.word	0x40010000
 8003a88:	40000400 	.word	0x40000400
 8003a8c:	40000800 	.word	0x40000800
 8003a90:	40000c00 	.word	0x40000c00
 8003a94:	40010400 	.word	0x40010400
 8003a98:	40014000 	.word	0x40014000
 8003a9c:	40014400 	.word	0x40014400
 8003aa0:	40014800 	.word	0x40014800
 8003aa4:	40001800 	.word	0x40001800
 8003aa8:	40001c00 	.word	0x40001c00
 8003aac:	40002000 	.word	0x40002000

08003ab0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b087      	sub	sp, #28
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a1b      	ldr	r3, [r3, #32]
 8003ac4:	f023 0201 	bic.w	r2, r3, #1
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0303 	bic.w	r3, r3, #3
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	68fa      	ldr	r2, [r7, #12]
 8003aee:	4313      	orrs	r3, r2
 8003af0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f023 0302 	bic.w	r3, r3, #2
 8003af8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a20      	ldr	r2, [pc, #128]	@ (8003b88 <TIM_OC1_SetConfig+0xd8>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC1_SetConfig+0x64>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a1f      	ldr	r2, [pc, #124]	@ (8003b8c <TIM_OC1_SetConfig+0xdc>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d10c      	bne.n	8003b2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	f023 0308 	bic.w	r3, r3, #8
 8003b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68db      	ldr	r3, [r3, #12]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f023 0304 	bic.w	r3, r3, #4
 8003b2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	4a15      	ldr	r2, [pc, #84]	@ (8003b88 <TIM_OC1_SetConfig+0xd8>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d003      	beq.n	8003b3e <TIM_OC1_SetConfig+0x8e>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	4a14      	ldr	r2, [pc, #80]	@ (8003b8c <TIM_OC1_SetConfig+0xdc>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d111      	bne.n	8003b62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	695b      	ldr	r3, [r3, #20]
 8003b52:	693a      	ldr	r2, [r7, #16]
 8003b54:	4313      	orrs	r3, r2
 8003b56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	621a      	str	r2, [r3, #32]
}
 8003b7c:	bf00      	nop
 8003b7e:	371c      	adds	r7, #28
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40010400 	.word	0x40010400

08003b90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b087      	sub	sp, #28
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f023 0210 	bic.w	r2, r3, #16
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003bbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	021b      	lsls	r3, r3, #8
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	f023 0320 	bic.w	r3, r3, #32
 8003bda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a22      	ldr	r2, [pc, #136]	@ (8003c74 <TIM_OC2_SetConfig+0xe4>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d003      	beq.n	8003bf8 <TIM_OC2_SetConfig+0x68>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a21      	ldr	r2, [pc, #132]	@ (8003c78 <TIM_OC2_SetConfig+0xe8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d10d      	bne.n	8003c14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <TIM_OC2_SetConfig+0xe4>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d003      	beq.n	8003c24 <TIM_OC2_SetConfig+0x94>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a16      	ldr	r2, [pc, #88]	@ (8003c78 <TIM_OC2_SetConfig+0xe8>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d113      	bne.n	8003c4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	699b      	ldr	r3, [r3, #24]
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	697a      	ldr	r2, [r7, #20]
 8003c64:	621a      	str	r2, [r3, #32]
}
 8003c66:	bf00      	nop
 8003c68:	371c      	adds	r7, #28
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40010000 	.word	0x40010000
 8003c78:	40010400 	.word	0x40010400

08003c7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a1b      	ldr	r3, [r3, #32]
 8003c90:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003caa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f023 0303 	bic.w	r3, r3, #3
 8003cb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68fa      	ldr	r2, [r7, #12]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003cc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	021b      	lsls	r3, r3, #8
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a21      	ldr	r2, [pc, #132]	@ (8003d5c <TIM_OC3_SetConfig+0xe0>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d003      	beq.n	8003ce2 <TIM_OC3_SetConfig+0x66>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <TIM_OC3_SetConfig+0xe4>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d10d      	bne.n	8003cfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ce8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	68db      	ldr	r3, [r3, #12]
 8003cee:	021b      	lsls	r3, r3, #8
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a16      	ldr	r2, [pc, #88]	@ (8003d5c <TIM_OC3_SetConfig+0xe0>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d003      	beq.n	8003d0e <TIM_OC3_SetConfig+0x92>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a15      	ldr	r2, [pc, #84]	@ (8003d60 <TIM_OC3_SetConfig+0xe4>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d113      	bne.n	8003d36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	011b      	lsls	r3, r3, #4
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	4313      	orrs	r3, r2
 8003d34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68fa      	ldr	r2, [r7, #12]
 8003d40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	685a      	ldr	r2, [r3, #4]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	697a      	ldr	r2, [r7, #20]
 8003d4e:	621a      	str	r2, [r3, #32]
}
 8003d50:	bf00      	nop
 8003d52:	371c      	adds	r7, #28
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40010400 	.word	0x40010400

08003d64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b087      	sub	sp, #28
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a1b      	ldr	r3, [r3, #32]
 8003d72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6a1b      	ldr	r3, [r3, #32]
 8003d78:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	021b      	lsls	r3, r3, #8
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003dae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	031b      	lsls	r3, r3, #12
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a12      	ldr	r2, [pc, #72]	@ (8003e08 <TIM_OC4_SetConfig+0xa4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <TIM_OC4_SetConfig+0x68>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a11      	ldr	r2, [pc, #68]	@ (8003e0c <TIM_OC4_SetConfig+0xa8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d109      	bne.n	8003de0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003dd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	019b      	lsls	r3, r3, #6
 8003dda:	697a      	ldr	r2, [r7, #20]
 8003ddc:	4313      	orrs	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	697a      	ldr	r2, [r7, #20]
 8003de4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685a      	ldr	r2, [r3, #4]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	693a      	ldr	r2, [r7, #16]
 8003df8:	621a      	str	r2, [r3, #32]
}
 8003dfa:	bf00      	nop
 8003dfc:	371c      	adds	r7, #28
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010000 	.word	0x40010000
 8003e0c:	40010400 	.word	0x40010400

08003e10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	60f8      	str	r0, [r7, #12]
 8003e18:	60b9      	str	r1, [r7, #8]
 8003e1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6a1b      	ldr	r3, [r3, #32]
 8003e20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6a1b      	ldr	r3, [r3, #32]
 8003e26:	f023 0201 	bic.w	r2, r3, #1
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	699b      	ldr	r3, [r3, #24]
 8003e32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	011b      	lsls	r3, r3, #4
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	f023 030a 	bic.w	r3, r3, #10
 8003e4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	621a      	str	r2, [r3, #32]
}
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	f023 0210 	bic.w	r2, r3, #16
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	031b      	lsls	r3, r3, #12
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003eaa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	621a      	str	r2, [r3, #32]
}
 8003ec2:	bf00      	nop
 8003ec4:	371c      	adds	r7, #28
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b085      	sub	sp, #20
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
 8003ed6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ee4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee6:	683a      	ldr	r2, [r7, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	f043 0307 	orr.w	r3, r3, #7
 8003ef0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	609a      	str	r2, [r3, #8]
}
 8003ef8:	bf00      	nop
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b087      	sub	sp, #28
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	607a      	str	r2, [r7, #4]
 8003f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	021a      	lsls	r2, r3, #8
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	431a      	orrs	r2, r3
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	697a      	ldr	r2, [r7, #20]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	609a      	str	r2, [r3, #8]
}
 8003f38:	bf00      	nop
 8003f3a:	371c      	adds	r7, #28
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr

08003f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b087      	sub	sp, #28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f003 031f 	and.w	r3, r3, #31
 8003f56:	2201      	movs	r2, #1
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6a1a      	ldr	r2, [r3, #32]
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	43db      	mvns	r3, r3
 8003f66:	401a      	ands	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6a1a      	ldr	r2, [r3, #32]
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f003 031f 	and.w	r3, r3, #31
 8003f76:	6879      	ldr	r1, [r7, #4]
 8003f78:	fa01 f303 	lsl.w	r3, r1, r3
 8003f7c:	431a      	orrs	r2, r3
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	621a      	str	r2, [r3, #32]
}
 8003f82:	bf00      	nop
 8003f84:	371c      	adds	r7, #28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
	...

08003f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d101      	bne.n	8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	e05a      	b.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68fa      	ldr	r2, [r7, #12]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a21      	ldr	r2, [pc, #132]	@ (800406c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d022      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ff4:	d01d      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d018      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a1b      	ldr	r2, [pc, #108]	@ (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d013      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a1a      	ldr	r2, [pc, #104]	@ (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d00e      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a18      	ldr	r2, [pc, #96]	@ (800407c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d009      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a17      	ldr	r2, [pc, #92]	@ (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d004      	beq.n	8004032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a15      	ldr	r2, [pc, #84]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d10c      	bne.n	800404c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004038:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	685b      	ldr	r3, [r3, #4]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	4313      	orrs	r3, r2
 8004042:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800405c:	2300      	movs	r3, #0
}
 800405e:	4618      	mov	r0, r3
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40010000 	.word	0x40010000
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40010400 	.word	0x40010400
 8004080:	40014000 	.word	0x40014000
 8004084:	40001800 	.word	0x40001800

08004088 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004088:	b480      	push	{r7}
 800408a:	b085      	sub	sp, #20
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004092:	2300      	movs	r3, #0
 8004094:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800409c:	2b01      	cmp	r3, #1
 800409e:	d101      	bne.n	80040a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040a0:	2302      	movs	r3, #2
 80040a2:	e03d      	b.n	8004120 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	4313      	orrs	r3, r2
 80040b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	695b      	ldr	r3, [r3, #20]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	69db      	ldr	r3, [r3, #28]
 800410a:	4313      	orrs	r3, r2
 800410c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3714      	adds	r7, #20
 8004124:	46bd      	mov	sp, r7
 8004126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412a:	4770      	bx	lr

0800412c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d101      	bne.n	800413e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e042      	b.n	80041c4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004144:	b2db      	uxtb	r3, r3
 8004146:	2b00      	cmp	r3, #0
 8004148:	d106      	bne.n	8004158 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004152:	6878      	ldr	r0, [r7, #4]
 8004154:	f7fd f8c6 	bl	80012e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2224      	movs	r2, #36	@ 0x24
 800415c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	68da      	ldr	r2, [r3, #12]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800416e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004170:	6878      	ldr	r0, [r7, #4]
 8004172:	f000 f82b 	bl	80041cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	691a      	ldr	r2, [r3, #16]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004184:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	695a      	ldr	r2, [r3, #20]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004194:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68da      	ldr	r2, [r3, #12]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2220      	movs	r2, #32
 80041b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041c2:	2300      	movs	r3, #0
}
 80041c4:	4618      	mov	r0, r3
 80041c6:	3708      	adds	r7, #8
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}

080041cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d0:	b0c0      	sub	sp, #256	@ 0x100
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041e8:	68d9      	ldr	r1, [r3, #12]
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	ea40 0301 	orr.w	r3, r0, r1
 80041f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041fa:	689a      	ldr	r2, [r3, #8]
 80041fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004208:	695b      	ldr	r3, [r3, #20]
 800420a:	431a      	orrs	r2, r3
 800420c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	4313      	orrs	r3, r2
 8004214:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004224:	f021 010c 	bic.w	r1, r1, #12
 8004228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004232:	430b      	orrs	r3, r1
 8004234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004246:	6999      	ldr	r1, [r3, #24]
 8004248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	ea40 0301 	orr.w	r3, r0, r1
 8004252:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	4b8f      	ldr	r3, [pc, #572]	@ (8004498 <UART_SetConfig+0x2cc>)
 800425c:	429a      	cmp	r2, r3
 800425e:	d005      	beq.n	800426c <UART_SetConfig+0xa0>
 8004260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4b8d      	ldr	r3, [pc, #564]	@ (800449c <UART_SetConfig+0x2d0>)
 8004268:	429a      	cmp	r2, r3
 800426a:	d104      	bne.n	8004276 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800426c:	f7fe fb98 	bl	80029a0 <HAL_RCC_GetPCLK2Freq>
 8004270:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004274:	e003      	b.n	800427e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004276:	f7fe fb7f 	bl	8002978 <HAL_RCC_GetPCLK1Freq>
 800427a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800427e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004288:	f040 810c 	bne.w	80044a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800428c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004290:	2200      	movs	r2, #0
 8004292:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004296:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800429a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800429e:	4622      	mov	r2, r4
 80042a0:	462b      	mov	r3, r5
 80042a2:	1891      	adds	r1, r2, r2
 80042a4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80042a6:	415b      	adcs	r3, r3
 80042a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80042ae:	4621      	mov	r1, r4
 80042b0:	eb12 0801 	adds.w	r8, r2, r1
 80042b4:	4629      	mov	r1, r5
 80042b6:	eb43 0901 	adc.w	r9, r3, r1
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ce:	4690      	mov	r8, r2
 80042d0:	4699      	mov	r9, r3
 80042d2:	4623      	mov	r3, r4
 80042d4:	eb18 0303 	adds.w	r3, r8, r3
 80042d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80042dc:	462b      	mov	r3, r5
 80042de:	eb49 0303 	adc.w	r3, r9, r3
 80042e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80042e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80042f2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80042f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80042fa:	460b      	mov	r3, r1
 80042fc:	18db      	adds	r3, r3, r3
 80042fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8004300:	4613      	mov	r3, r2
 8004302:	eb42 0303 	adc.w	r3, r2, r3
 8004306:	657b      	str	r3, [r7, #84]	@ 0x54
 8004308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800430c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004310:	f7fb ff78 	bl	8000204 <__aeabi_uldivmod>
 8004314:	4602      	mov	r2, r0
 8004316:	460b      	mov	r3, r1
 8004318:	4b61      	ldr	r3, [pc, #388]	@ (80044a0 <UART_SetConfig+0x2d4>)
 800431a:	fba3 2302 	umull	r2, r3, r3, r2
 800431e:	095b      	lsrs	r3, r3, #5
 8004320:	011c      	lsls	r4, r3, #4
 8004322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004326:	2200      	movs	r2, #0
 8004328:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800432c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004330:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004334:	4642      	mov	r2, r8
 8004336:	464b      	mov	r3, r9
 8004338:	1891      	adds	r1, r2, r2
 800433a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800433c:	415b      	adcs	r3, r3
 800433e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004340:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004344:	4641      	mov	r1, r8
 8004346:	eb12 0a01 	adds.w	sl, r2, r1
 800434a:	4649      	mov	r1, r9
 800434c:	eb43 0b01 	adc.w	fp, r3, r1
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800435c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004364:	4692      	mov	sl, r2
 8004366:	469b      	mov	fp, r3
 8004368:	4643      	mov	r3, r8
 800436a:	eb1a 0303 	adds.w	r3, sl, r3
 800436e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004372:	464b      	mov	r3, r9
 8004374:	eb4b 0303 	adc.w	r3, fp, r3
 8004378:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004388:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800438c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004390:	460b      	mov	r3, r1
 8004392:	18db      	adds	r3, r3, r3
 8004394:	643b      	str	r3, [r7, #64]	@ 0x40
 8004396:	4613      	mov	r3, r2
 8004398:	eb42 0303 	adc.w	r3, r2, r3
 800439c:	647b      	str	r3, [r7, #68]	@ 0x44
 800439e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80043a6:	f7fb ff2d 	bl	8000204 <__aeabi_uldivmod>
 80043aa:	4602      	mov	r2, r0
 80043ac:	460b      	mov	r3, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	4b3b      	ldr	r3, [pc, #236]	@ (80044a0 <UART_SetConfig+0x2d4>)
 80043b2:	fba3 2301 	umull	r2, r3, r3, r1
 80043b6:	095b      	lsrs	r3, r3, #5
 80043b8:	2264      	movs	r2, #100	@ 0x64
 80043ba:	fb02 f303 	mul.w	r3, r2, r3
 80043be:	1acb      	subs	r3, r1, r3
 80043c0:	00db      	lsls	r3, r3, #3
 80043c2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043c6:	4b36      	ldr	r3, [pc, #216]	@ (80044a0 <UART_SetConfig+0x2d4>)
 80043c8:	fba3 2302 	umull	r2, r3, r3, r2
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80043d4:	441c      	add	r4, r3
 80043d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043da:	2200      	movs	r2, #0
 80043dc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80043e0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80043e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80043e8:	4642      	mov	r2, r8
 80043ea:	464b      	mov	r3, r9
 80043ec:	1891      	adds	r1, r2, r2
 80043ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80043f0:	415b      	adcs	r3, r3
 80043f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80043f8:	4641      	mov	r1, r8
 80043fa:	1851      	adds	r1, r2, r1
 80043fc:	6339      	str	r1, [r7, #48]	@ 0x30
 80043fe:	4649      	mov	r1, r9
 8004400:	414b      	adcs	r3, r1
 8004402:	637b      	str	r3, [r7, #52]	@ 0x34
 8004404:	f04f 0200 	mov.w	r2, #0
 8004408:	f04f 0300 	mov.w	r3, #0
 800440c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004410:	4659      	mov	r1, fp
 8004412:	00cb      	lsls	r3, r1, #3
 8004414:	4651      	mov	r1, sl
 8004416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800441a:	4651      	mov	r1, sl
 800441c:	00ca      	lsls	r2, r1, #3
 800441e:	4610      	mov	r0, r2
 8004420:	4619      	mov	r1, r3
 8004422:	4603      	mov	r3, r0
 8004424:	4642      	mov	r2, r8
 8004426:	189b      	adds	r3, r3, r2
 8004428:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800442c:	464b      	mov	r3, r9
 800442e:	460a      	mov	r2, r1
 8004430:	eb42 0303 	adc.w	r3, r2, r3
 8004434:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004444:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800444c:	460b      	mov	r3, r1
 800444e:	18db      	adds	r3, r3, r3
 8004450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004452:	4613      	mov	r3, r2
 8004454:	eb42 0303 	adc.w	r3, r2, r3
 8004458:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800445a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800445e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004462:	f7fb fecf 	bl	8000204 <__aeabi_uldivmod>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4b0d      	ldr	r3, [pc, #52]	@ (80044a0 <UART_SetConfig+0x2d4>)
 800446c:	fba3 1302 	umull	r1, r3, r3, r2
 8004470:	095b      	lsrs	r3, r3, #5
 8004472:	2164      	movs	r1, #100	@ 0x64
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	3332      	adds	r3, #50	@ 0x32
 800447e:	4a08      	ldr	r2, [pc, #32]	@ (80044a0 <UART_SetConfig+0x2d4>)
 8004480:	fba2 2303 	umull	r2, r3, r2, r3
 8004484:	095b      	lsrs	r3, r3, #5
 8004486:	f003 0207 	and.w	r2, r3, #7
 800448a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4422      	add	r2, r4
 8004492:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004494:	e106      	b.n	80046a4 <UART_SetConfig+0x4d8>
 8004496:	bf00      	nop
 8004498:	40011000 	.word	0x40011000
 800449c:	40011400 	.word	0x40011400
 80044a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80044a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a8:	2200      	movs	r2, #0
 80044aa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80044ae:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80044b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80044b6:	4642      	mov	r2, r8
 80044b8:	464b      	mov	r3, r9
 80044ba:	1891      	adds	r1, r2, r2
 80044bc:	6239      	str	r1, [r7, #32]
 80044be:	415b      	adcs	r3, r3
 80044c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80044c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80044c6:	4641      	mov	r1, r8
 80044c8:	1854      	adds	r4, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb43 0501 	adc.w	r5, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	00eb      	lsls	r3, r5, #3
 80044da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044de:	00e2      	lsls	r2, r4, #3
 80044e0:	4614      	mov	r4, r2
 80044e2:	461d      	mov	r5, r3
 80044e4:	4643      	mov	r3, r8
 80044e6:	18e3      	adds	r3, r4, r3
 80044e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80044ec:	464b      	mov	r3, r9
 80044ee:	eb45 0303 	adc.w	r3, r5, r3
 80044f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80044f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004502:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004506:	f04f 0200 	mov.w	r2, #0
 800450a:	f04f 0300 	mov.w	r3, #0
 800450e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004512:	4629      	mov	r1, r5
 8004514:	008b      	lsls	r3, r1, #2
 8004516:	4621      	mov	r1, r4
 8004518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800451c:	4621      	mov	r1, r4
 800451e:	008a      	lsls	r2, r1, #2
 8004520:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004524:	f7fb fe6e 	bl	8000204 <__aeabi_uldivmod>
 8004528:	4602      	mov	r2, r0
 800452a:	460b      	mov	r3, r1
 800452c:	4b60      	ldr	r3, [pc, #384]	@ (80046b0 <UART_SetConfig+0x4e4>)
 800452e:	fba3 2302 	umull	r2, r3, r3, r2
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	011c      	lsls	r4, r3, #4
 8004536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800453a:	2200      	movs	r2, #0
 800453c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004540:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004544:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004548:	4642      	mov	r2, r8
 800454a:	464b      	mov	r3, r9
 800454c:	1891      	adds	r1, r2, r2
 800454e:	61b9      	str	r1, [r7, #24]
 8004550:	415b      	adcs	r3, r3
 8004552:	61fb      	str	r3, [r7, #28]
 8004554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004558:	4641      	mov	r1, r8
 800455a:	1851      	adds	r1, r2, r1
 800455c:	6139      	str	r1, [r7, #16]
 800455e:	4649      	mov	r1, r9
 8004560:	414b      	adcs	r3, r1
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	f04f 0200 	mov.w	r2, #0
 8004568:	f04f 0300 	mov.w	r3, #0
 800456c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004570:	4659      	mov	r1, fp
 8004572:	00cb      	lsls	r3, r1, #3
 8004574:	4651      	mov	r1, sl
 8004576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800457a:	4651      	mov	r1, sl
 800457c:	00ca      	lsls	r2, r1, #3
 800457e:	4610      	mov	r0, r2
 8004580:	4619      	mov	r1, r3
 8004582:	4603      	mov	r3, r0
 8004584:	4642      	mov	r2, r8
 8004586:	189b      	adds	r3, r3, r2
 8004588:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800458c:	464b      	mov	r3, r9
 800458e:	460a      	mov	r2, r1
 8004590:	eb42 0303 	adc.w	r3, r2, r3
 8004594:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045a2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80045a4:	f04f 0200 	mov.w	r2, #0
 80045a8:	f04f 0300 	mov.w	r3, #0
 80045ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80045b0:	4649      	mov	r1, r9
 80045b2:	008b      	lsls	r3, r1, #2
 80045b4:	4641      	mov	r1, r8
 80045b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ba:	4641      	mov	r1, r8
 80045bc:	008a      	lsls	r2, r1, #2
 80045be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80045c2:	f7fb fe1f 	bl	8000204 <__aeabi_uldivmod>
 80045c6:	4602      	mov	r2, r0
 80045c8:	460b      	mov	r3, r1
 80045ca:	4611      	mov	r1, r2
 80045cc:	4b38      	ldr	r3, [pc, #224]	@ (80046b0 <UART_SetConfig+0x4e4>)
 80045ce:	fba3 2301 	umull	r2, r3, r3, r1
 80045d2:	095b      	lsrs	r3, r3, #5
 80045d4:	2264      	movs	r2, #100	@ 0x64
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	1acb      	subs	r3, r1, r3
 80045dc:	011b      	lsls	r3, r3, #4
 80045de:	3332      	adds	r3, #50	@ 0x32
 80045e0:	4a33      	ldr	r2, [pc, #204]	@ (80046b0 <UART_SetConfig+0x4e4>)
 80045e2:	fba2 2303 	umull	r2, r3, r2, r3
 80045e6:	095b      	lsrs	r3, r3, #5
 80045e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045ec:	441c      	add	r4, r3
 80045ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f2:	2200      	movs	r2, #0
 80045f4:	673b      	str	r3, [r7, #112]	@ 0x70
 80045f6:	677a      	str	r2, [r7, #116]	@ 0x74
 80045f8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80045fc:	4642      	mov	r2, r8
 80045fe:	464b      	mov	r3, r9
 8004600:	1891      	adds	r1, r2, r2
 8004602:	60b9      	str	r1, [r7, #8]
 8004604:	415b      	adcs	r3, r3
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800460c:	4641      	mov	r1, r8
 800460e:	1851      	adds	r1, r2, r1
 8004610:	6039      	str	r1, [r7, #0]
 8004612:	4649      	mov	r1, r9
 8004614:	414b      	adcs	r3, r1
 8004616:	607b      	str	r3, [r7, #4]
 8004618:	f04f 0200 	mov.w	r2, #0
 800461c:	f04f 0300 	mov.w	r3, #0
 8004620:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004624:	4659      	mov	r1, fp
 8004626:	00cb      	lsls	r3, r1, #3
 8004628:	4651      	mov	r1, sl
 800462a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800462e:	4651      	mov	r1, sl
 8004630:	00ca      	lsls	r2, r1, #3
 8004632:	4610      	mov	r0, r2
 8004634:	4619      	mov	r1, r3
 8004636:	4603      	mov	r3, r0
 8004638:	4642      	mov	r2, r8
 800463a:	189b      	adds	r3, r3, r2
 800463c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800463e:	464b      	mov	r3, r9
 8004640:	460a      	mov	r2, r1
 8004642:	eb42 0303 	adc.w	r3, r2, r3
 8004646:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	663b      	str	r3, [r7, #96]	@ 0x60
 8004652:	667a      	str	r2, [r7, #100]	@ 0x64
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004660:	4649      	mov	r1, r9
 8004662:	008b      	lsls	r3, r1, #2
 8004664:	4641      	mov	r1, r8
 8004666:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800466a:	4641      	mov	r1, r8
 800466c:	008a      	lsls	r2, r1, #2
 800466e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004672:	f7fb fdc7 	bl	8000204 <__aeabi_uldivmod>
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4b0d      	ldr	r3, [pc, #52]	@ (80046b0 <UART_SetConfig+0x4e4>)
 800467c:	fba3 1302 	umull	r1, r3, r3, r2
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	2164      	movs	r1, #100	@ 0x64
 8004684:	fb01 f303 	mul.w	r3, r1, r3
 8004688:	1ad3      	subs	r3, r2, r3
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	3332      	adds	r3, #50	@ 0x32
 800468e:	4a08      	ldr	r2, [pc, #32]	@ (80046b0 <UART_SetConfig+0x4e4>)
 8004690:	fba2 2303 	umull	r2, r3, r2, r3
 8004694:	095b      	lsrs	r3, r3, #5
 8004696:	f003 020f 	and.w	r2, r3, #15
 800469a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4422      	add	r2, r4
 80046a2:	609a      	str	r2, [r3, #8]
}
 80046a4:	bf00      	nop
 80046a6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80046aa:	46bd      	mov	sp, r7
 80046ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046b0:	51eb851f 	.word	0x51eb851f

080046b4 <memset>:
 80046b4:	4402      	add	r2, r0
 80046b6:	4603      	mov	r3, r0
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d100      	bne.n	80046be <memset+0xa>
 80046bc:	4770      	bx	lr
 80046be:	f803 1b01 	strb.w	r1, [r3], #1
 80046c2:	e7f9      	b.n	80046b8 <memset+0x4>

080046c4 <__libc_init_array>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4d0d      	ldr	r5, [pc, #52]	@ (80046fc <__libc_init_array+0x38>)
 80046c8:	4c0d      	ldr	r4, [pc, #52]	@ (8004700 <__libc_init_array+0x3c>)
 80046ca:	1b64      	subs	r4, r4, r5
 80046cc:	10a4      	asrs	r4, r4, #2
 80046ce:	2600      	movs	r6, #0
 80046d0:	42a6      	cmp	r6, r4
 80046d2:	d109      	bne.n	80046e8 <__libc_init_array+0x24>
 80046d4:	4d0b      	ldr	r5, [pc, #44]	@ (8004704 <__libc_init_array+0x40>)
 80046d6:	4c0c      	ldr	r4, [pc, #48]	@ (8004708 <__libc_init_array+0x44>)
 80046d8:	f000 f818 	bl	800470c <_init>
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	2600      	movs	r6, #0
 80046e2:	42a6      	cmp	r6, r4
 80046e4:	d105      	bne.n	80046f2 <__libc_init_array+0x2e>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ec:	4798      	blx	r3
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7ee      	b.n	80046d0 <__libc_init_array+0xc>
 80046f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f6:	4798      	blx	r3
 80046f8:	3601      	adds	r6, #1
 80046fa:	e7f2      	b.n	80046e2 <__libc_init_array+0x1e>
 80046fc:	08004744 	.word	0x08004744
 8004700:	08004744 	.word	0x08004744
 8004704:	08004744 	.word	0x08004744
 8004708:	08004748 	.word	0x08004748

0800470c <_init>:
 800470c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800470e:	bf00      	nop
 8004710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004712:	bc08      	pop	{r3}
 8004714:	469e      	mov	lr, r3
 8004716:	4770      	bx	lr

08004718 <_fini>:
 8004718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800471a:	bf00      	nop
 800471c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800471e:	bc08      	pop	{r3}
 8004720:	469e      	mov	lr, r3
 8004722:	4770      	bx	lr
